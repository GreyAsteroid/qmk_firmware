   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"rgb_matrix.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.sqrt16,"ax",%progbits
  18              		.align	1
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	sqrt16:
  26              	.LVL0:
  27              	.LFB37:
  28              		.file 1 "./lib/lib8tion/math8.h"
   1:./lib/lib8tion/math8.h **** #ifndef __INC_LIB8TION_MATH_H
   2:./lib/lib8tion/math8.h **** #define __INC_LIB8TION_MATH_H
   3:./lib/lib8tion/math8.h **** 
   4:./lib/lib8tion/math8.h **** #include "scale8.h"
   5:./lib/lib8tion/math8.h **** 
   6:./lib/lib8tion/math8.h **** ///@ingroup lib8tion
   7:./lib/lib8tion/math8.h **** 
   8:./lib/lib8tion/math8.h **** ///@defgroup Math Basic math operations
   9:./lib/lib8tion/math8.h **** /// Fast, efficient 8-bit math functions specifically
  10:./lib/lib8tion/math8.h **** /// designed for high-performance LED programming.
  11:./lib/lib8tion/math8.h **** ///
  12:./lib/lib8tion/math8.h **** /// Because of the AVR(Arduino) and ARM assembly language
  13:./lib/lib8tion/math8.h **** /// implementations provided, using these functions often
  14:./lib/lib8tion/math8.h **** /// results in smaller and faster code than the equivalent
  15:./lib/lib8tion/math8.h **** /// program using plain "C" arithmetic and logic.
  16:./lib/lib8tion/math8.h **** ///@{
  17:./lib/lib8tion/math8.h **** 
  18:./lib/lib8tion/math8.h **** 
  19:./lib/lib8tion/math8.h **** /// add one byte to another, saturating at 0xFF
  20:./lib/lib8tion/math8.h **** /// @param i - first byte to add
  21:./lib/lib8tion/math8.h **** /// @param j - second byte to add
  22:./lib/lib8tion/math8.h **** /// @returns the sum of i & j, capped at 0xFF
  23:./lib/lib8tion/math8.h **** LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
  24:./lib/lib8tion/math8.h **** {
  25:./lib/lib8tion/math8.h **** #if QADD8_C == 1
  26:./lib/lib8tion/math8.h ****     uint16_t t = i + j;
  27:./lib/lib8tion/math8.h ****     if (t > 255) t = 255;
  28:./lib/lib8tion/math8.h ****     return t;
  29:./lib/lib8tion/math8.h **** #elif QADD8_AVRASM == 1
  30:./lib/lib8tion/math8.h ****     asm volatile(
  31:./lib/lib8tion/math8.h ****          /* First, add j to i, conditioning the C flag */
  32:./lib/lib8tion/math8.h ****          "add %0, %1    \n\t"
  33:./lib/lib8tion/math8.h **** 
  34:./lib/lib8tion/math8.h ****          /* Now test the C flag.
  35:./lib/lib8tion/math8.h ****            If C is clear, we branch around a load of 0xFF into i.
  36:./lib/lib8tion/math8.h ****            If C is set, we go ahead and load 0xFF into i.
  37:./lib/lib8tion/math8.h ****          */
  38:./lib/lib8tion/math8.h ****          "brcc L_%=     \n\t"
  39:./lib/lib8tion/math8.h ****          "ldi %0, 0xFF  \n\t"
  40:./lib/lib8tion/math8.h ****          "L_%=: "
  41:./lib/lib8tion/math8.h ****          : "+a" (i)
  42:./lib/lib8tion/math8.h ****          : "a"  (j) );
  43:./lib/lib8tion/math8.h ****     return i;
  44:./lib/lib8tion/math8.h **** #elif QADD8_ARM_DSP_ASM == 1
  45:./lib/lib8tion/math8.h ****     asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
  46:./lib/lib8tion/math8.h ****     return i;
  47:./lib/lib8tion/math8.h **** #else
  48:./lib/lib8tion/math8.h **** #error "No implementation for qadd8 available."
  49:./lib/lib8tion/math8.h **** #endif
  50:./lib/lib8tion/math8.h **** }
  51:./lib/lib8tion/math8.h **** 
  52:./lib/lib8tion/math8.h **** /// Add one byte to another, saturating at 0x7F
  53:./lib/lib8tion/math8.h **** /// @param i - first byte to add
  54:./lib/lib8tion/math8.h **** /// @param j - second byte to add
  55:./lib/lib8tion/math8.h **** /// @returns the sum of i & j, capped at 0xFF
  56:./lib/lib8tion/math8.h **** LIB8STATIC_ALWAYS_INLINE int8_t qadd7( int8_t i, int8_t j)
  57:./lib/lib8tion/math8.h **** {
  58:./lib/lib8tion/math8.h **** #if QADD7_C == 1
  59:./lib/lib8tion/math8.h ****     int16_t t = i + j;
  60:./lib/lib8tion/math8.h ****     if (t > 127) t = 127;
  61:./lib/lib8tion/math8.h ****     return t;
  62:./lib/lib8tion/math8.h **** #elif QADD7_AVRASM == 1
  63:./lib/lib8tion/math8.h ****     asm volatile(
  64:./lib/lib8tion/math8.h ****          /* First, add j to i, conditioning the V flag */
  65:./lib/lib8tion/math8.h ****          "add %0, %1    \n\t"
  66:./lib/lib8tion/math8.h **** 
  67:./lib/lib8tion/math8.h ****          /* Now test the V flag.
  68:./lib/lib8tion/math8.h ****           If V is clear, we branch around a load of 0x7F into i.
  69:./lib/lib8tion/math8.h ****           If V is set, we go ahead and load 0x7F into i.
  70:./lib/lib8tion/math8.h ****           */
  71:./lib/lib8tion/math8.h ****          "brvc L_%=     \n\t"
  72:./lib/lib8tion/math8.h ****          "ldi %0, 0x7F  \n\t"
  73:./lib/lib8tion/math8.h ****          "L_%=: "
  74:./lib/lib8tion/math8.h ****          : "+a" (i)
  75:./lib/lib8tion/math8.h ****          : "a"  (j) );
  76:./lib/lib8tion/math8.h **** 
  77:./lib/lib8tion/math8.h ****     return i;
  78:./lib/lib8tion/math8.h **** #elif QADD7_ARM_DSP_ASM == 1
  79:./lib/lib8tion/math8.h ****     asm volatile( "qadd8 %0, %0, %1" : "+r" (i) : "r" (j));
  80:./lib/lib8tion/math8.h ****     return i;
  81:./lib/lib8tion/math8.h **** #else
  82:./lib/lib8tion/math8.h **** #error "No implementation for qadd7 available."
  83:./lib/lib8tion/math8.h **** #endif
  84:./lib/lib8tion/math8.h **** }
  85:./lib/lib8tion/math8.h **** 
  86:./lib/lib8tion/math8.h **** /// subtract one byte from another, saturating at 0x00
  87:./lib/lib8tion/math8.h **** /// @returns i - j with a floor of 0
  88:./lib/lib8tion/math8.h **** LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
  89:./lib/lib8tion/math8.h **** {
  90:./lib/lib8tion/math8.h **** #if QSUB8_C == 1
  91:./lib/lib8tion/math8.h ****     int16_t t = i - j;
  92:./lib/lib8tion/math8.h ****     if (t < 0) t = 0;
  93:./lib/lib8tion/math8.h ****     return t;
  94:./lib/lib8tion/math8.h **** #elif QSUB8_AVRASM == 1
  95:./lib/lib8tion/math8.h **** 
  96:./lib/lib8tion/math8.h ****     asm volatile(
  97:./lib/lib8tion/math8.h ****          /* First, subtract j from i, conditioning the C flag */
  98:./lib/lib8tion/math8.h ****          "sub %0, %1    \n\t"
  99:./lib/lib8tion/math8.h **** 
 100:./lib/lib8tion/math8.h ****          /* Now test the C flag.
 101:./lib/lib8tion/math8.h ****           If C is clear, we branch around a load of 0x00 into i.
 102:./lib/lib8tion/math8.h ****           If C is set, we go ahead and load 0x00 into i.
 103:./lib/lib8tion/math8.h ****           */
 104:./lib/lib8tion/math8.h ****          "brcc L_%=     \n\t"
 105:./lib/lib8tion/math8.h ****          "ldi %0, 0x00  \n\t"
 106:./lib/lib8tion/math8.h ****          "L_%=: "
 107:./lib/lib8tion/math8.h ****          : "+a" (i)
 108:./lib/lib8tion/math8.h ****          : "a"  (j) );
 109:./lib/lib8tion/math8.h **** 
 110:./lib/lib8tion/math8.h ****     return i;
 111:./lib/lib8tion/math8.h **** #else
 112:./lib/lib8tion/math8.h **** #error "No implementation for qsub8 available."
 113:./lib/lib8tion/math8.h **** #endif
 114:./lib/lib8tion/math8.h **** }
 115:./lib/lib8tion/math8.h **** 
 116:./lib/lib8tion/math8.h **** /// add one byte to another, with one byte result
 117:./lib/lib8tion/math8.h **** LIB8STATIC_ALWAYS_INLINE uint8_t add8( uint8_t i, uint8_t j)
 118:./lib/lib8tion/math8.h **** {
 119:./lib/lib8tion/math8.h **** #if ADD8_C == 1
 120:./lib/lib8tion/math8.h ****     uint16_t t = i + j;
 121:./lib/lib8tion/math8.h ****     return t;
 122:./lib/lib8tion/math8.h **** #elif ADD8_AVRASM == 1
 123:./lib/lib8tion/math8.h ****     // Add j to i, period.
 124:./lib/lib8tion/math8.h ****     asm volatile( "add %0, %1" : "+a" (i) : "a" (j));
 125:./lib/lib8tion/math8.h ****     return i;
 126:./lib/lib8tion/math8.h **** #else
 127:./lib/lib8tion/math8.h **** #error "No implementation for add8 available."
 128:./lib/lib8tion/math8.h **** #endif
 129:./lib/lib8tion/math8.h **** }
 130:./lib/lib8tion/math8.h **** 
 131:./lib/lib8tion/math8.h **** /// add one byte to another, with one byte result
 132:./lib/lib8tion/math8.h **** LIB8STATIC_ALWAYS_INLINE uint16_t add8to16( uint8_t i, uint16_t j)
 133:./lib/lib8tion/math8.h **** {
 134:./lib/lib8tion/math8.h **** #if ADD8_C == 1
 135:./lib/lib8tion/math8.h ****     uint16_t t = i + j;
 136:./lib/lib8tion/math8.h ****     return t;
 137:./lib/lib8tion/math8.h **** #elif ADD8_AVRASM == 1
 138:./lib/lib8tion/math8.h ****     // Add i(one byte) to j(two bytes)
 139:./lib/lib8tion/math8.h ****     asm volatile( "add %A[j], %[i]              \n\t"
 140:./lib/lib8tion/math8.h ****                   "adc %B[j], __zero_reg__      \n\t"
 141:./lib/lib8tion/math8.h ****                  : [j] "+a" (j)
 142:./lib/lib8tion/math8.h ****                  : [i] "a"  (i)
 143:./lib/lib8tion/math8.h ****                  );
 144:./lib/lib8tion/math8.h ****     return i;
 145:./lib/lib8tion/math8.h **** #else
 146:./lib/lib8tion/math8.h **** #error "No implementation for add8to16 available."
 147:./lib/lib8tion/math8.h **** #endif
 148:./lib/lib8tion/math8.h **** }
 149:./lib/lib8tion/math8.h **** 
 150:./lib/lib8tion/math8.h **** 
 151:./lib/lib8tion/math8.h **** /// subtract one byte from another, 8-bit result
 152:./lib/lib8tion/math8.h **** LIB8STATIC_ALWAYS_INLINE uint8_t sub8( uint8_t i, uint8_t j)
 153:./lib/lib8tion/math8.h **** {
 154:./lib/lib8tion/math8.h **** #if SUB8_C == 1
 155:./lib/lib8tion/math8.h ****     int16_t t = i - j;
 156:./lib/lib8tion/math8.h ****     return t;
 157:./lib/lib8tion/math8.h **** #elif SUB8_AVRASM == 1
 158:./lib/lib8tion/math8.h ****     // Subtract j from i, period.
 159:./lib/lib8tion/math8.h ****     asm volatile( "sub %0, %1" : "+a" (i) : "a" (j));
 160:./lib/lib8tion/math8.h ****     return i;
 161:./lib/lib8tion/math8.h **** #else
 162:./lib/lib8tion/math8.h **** #error "No implementation for sub8 available."
 163:./lib/lib8tion/math8.h **** #endif
 164:./lib/lib8tion/math8.h **** }
 165:./lib/lib8tion/math8.h **** 
 166:./lib/lib8tion/math8.h **** /// Calculate an integer average of two unsigned
 167:./lib/lib8tion/math8.h **** ///       8-bit integer values (uint8_t).
 168:./lib/lib8tion/math8.h **** ///       Fractional results are rounded down, e.g. avg8(20,41) = 30
 169:./lib/lib8tion/math8.h **** LIB8STATIC_ALWAYS_INLINE uint8_t avg8( uint8_t i, uint8_t j)
 170:./lib/lib8tion/math8.h **** {
 171:./lib/lib8tion/math8.h **** #if AVG8_C == 1
 172:./lib/lib8tion/math8.h ****     return (i + j) >> 1;
 173:./lib/lib8tion/math8.h **** #elif AVG8_AVRASM == 1
 174:./lib/lib8tion/math8.h ****     asm volatile(
 175:./lib/lib8tion/math8.h ****          /* First, add j to i, 9th bit overflows into C flag */
 176:./lib/lib8tion/math8.h ****          "add %0, %1    \n\t"
 177:./lib/lib8tion/math8.h ****          /* Divide by two, moving C flag into high 8th bit */
 178:./lib/lib8tion/math8.h ****          "ror %0        \n\t"
 179:./lib/lib8tion/math8.h ****          : "+a" (i)
 180:./lib/lib8tion/math8.h ****          : "a"  (j) );
 181:./lib/lib8tion/math8.h ****     return i;
 182:./lib/lib8tion/math8.h **** #else
 183:./lib/lib8tion/math8.h **** #error "No implementation for avg8 available."
 184:./lib/lib8tion/math8.h **** #endif
 185:./lib/lib8tion/math8.h **** }
 186:./lib/lib8tion/math8.h **** 
 187:./lib/lib8tion/math8.h **** /// Calculate an integer average of two unsigned
 188:./lib/lib8tion/math8.h **** ///       16-bit integer values (uint16_t).
 189:./lib/lib8tion/math8.h **** ///       Fractional results are rounded down, e.g. avg16(20,41) = 30
 190:./lib/lib8tion/math8.h **** LIB8STATIC_ALWAYS_INLINE uint16_t avg16( uint16_t i, uint16_t j)
 191:./lib/lib8tion/math8.h **** {
 192:./lib/lib8tion/math8.h **** #if AVG16_C == 1
 193:./lib/lib8tion/math8.h ****     return (uint32_t)((uint32_t)(i) + (uint32_t)(j)) >> 1;
 194:./lib/lib8tion/math8.h **** #elif AVG16_AVRASM == 1
 195:./lib/lib8tion/math8.h ****     asm volatile(
 196:./lib/lib8tion/math8.h ****                  /* First, add jLo (heh) to iLo, 9th bit overflows into C flag */
 197:./lib/lib8tion/math8.h ****                  "add %A[i], %A[j]    \n\t"
 198:./lib/lib8tion/math8.h ****                  /* Now, add C + jHi to iHi, 17th bit overflows into C flag */
 199:./lib/lib8tion/math8.h ****                  "adc %B[i], %B[j]    \n\t"
 200:./lib/lib8tion/math8.h ****                  /* Divide iHi by two, moving C flag into high 16th bit, old 9th bit now in C */
 201:./lib/lib8tion/math8.h ****                  "ror %B[i]        \n\t"
 202:./lib/lib8tion/math8.h ****                  /* Divide iLo by two, moving C flag into high 8th bit */
 203:./lib/lib8tion/math8.h ****                  "ror %A[i]        \n\t"
 204:./lib/lib8tion/math8.h ****                  : [i] "+a" (i)
 205:./lib/lib8tion/math8.h ****                  : [j] "a"  (j) );
 206:./lib/lib8tion/math8.h ****     return i;
 207:./lib/lib8tion/math8.h **** #else
 208:./lib/lib8tion/math8.h **** #error "No implementation for avg16 available."
 209:./lib/lib8tion/math8.h **** #endif
 210:./lib/lib8tion/math8.h **** }
 211:./lib/lib8tion/math8.h **** 
 212:./lib/lib8tion/math8.h **** 
 213:./lib/lib8tion/math8.h **** /// Calculate an integer average of two signed 7-bit
 214:./lib/lib8tion/math8.h **** ///       integers (int8_t)
 215:./lib/lib8tion/math8.h **** ///       If the first argument is even, result is rounded down.
 216:./lib/lib8tion/math8.h **** ///       If the first argument is odd, result is result up.
 217:./lib/lib8tion/math8.h **** LIB8STATIC_ALWAYS_INLINE int8_t avg7( int8_t i, int8_t j)
 218:./lib/lib8tion/math8.h **** {
 219:./lib/lib8tion/math8.h **** #if AVG7_C == 1
 220:./lib/lib8tion/math8.h ****     return ((i + j) >> 1) + (i & 0x1);
 221:./lib/lib8tion/math8.h **** #elif AVG7_AVRASM == 1
 222:./lib/lib8tion/math8.h ****     asm volatile(
 223:./lib/lib8tion/math8.h ****                  "asr %1        \n\t"
 224:./lib/lib8tion/math8.h ****                  "asr %0        \n\t"
 225:./lib/lib8tion/math8.h ****                  "adc %0, %1    \n\t"
 226:./lib/lib8tion/math8.h ****                  : "+a" (i)
 227:./lib/lib8tion/math8.h ****                  : "a"  (j) );
 228:./lib/lib8tion/math8.h ****     return i;
 229:./lib/lib8tion/math8.h **** #else
 230:./lib/lib8tion/math8.h **** #error "No implementation for avg7 available."
 231:./lib/lib8tion/math8.h **** #endif
 232:./lib/lib8tion/math8.h **** }
 233:./lib/lib8tion/math8.h **** 
 234:./lib/lib8tion/math8.h **** /// Calculate an integer average of two signed 15-bit
 235:./lib/lib8tion/math8.h **** ///       integers (int16_t)
 236:./lib/lib8tion/math8.h **** ///       If the first argument is even, result is rounded down.
 237:./lib/lib8tion/math8.h **** ///       If the first argument is odd, result is result up.
 238:./lib/lib8tion/math8.h **** LIB8STATIC_ALWAYS_INLINE int16_t avg15( int16_t i, int16_t j)
 239:./lib/lib8tion/math8.h **** {
 240:./lib/lib8tion/math8.h **** #if AVG15_C == 1
 241:./lib/lib8tion/math8.h ****     return ((int32_t)((int32_t)(i) + (int32_t)(j)) >> 1) + (i & 0x1);
 242:./lib/lib8tion/math8.h **** #elif AVG15_AVRASM == 1
 243:./lib/lib8tion/math8.h ****     asm volatile(
 244:./lib/lib8tion/math8.h ****                  /* first divide j by 2, throwing away lowest bit */
 245:./lib/lib8tion/math8.h ****                  "asr %B[j]          \n\t"
 246:./lib/lib8tion/math8.h ****                  "ror %A[j]          \n\t"
 247:./lib/lib8tion/math8.h ****                  /* now divide i by 2, with lowest bit going into C */
 248:./lib/lib8tion/math8.h ****                  "asr %B[i]          \n\t"
 249:./lib/lib8tion/math8.h ****                  "ror %A[i]          \n\t"
 250:./lib/lib8tion/math8.h ****                  /* add j + C to i */
 251:./lib/lib8tion/math8.h ****                  "adc %A[i], %A[j]   \n\t"
 252:./lib/lib8tion/math8.h ****                  "adc %B[i], %B[j]   \n\t"
 253:./lib/lib8tion/math8.h ****                  : [i] "+a" (i)
 254:./lib/lib8tion/math8.h ****                  : [j] "a"  (j) );
 255:./lib/lib8tion/math8.h ****     return i;
 256:./lib/lib8tion/math8.h **** #else
 257:./lib/lib8tion/math8.h **** #error "No implementation for avg15 available."
 258:./lib/lib8tion/math8.h **** #endif
 259:./lib/lib8tion/math8.h **** }
 260:./lib/lib8tion/math8.h **** 
 261:./lib/lib8tion/math8.h **** 
 262:./lib/lib8tion/math8.h **** ///       Calculate the remainder of one unsigned 8-bit
 263:./lib/lib8tion/math8.h **** ///       value divided by anoter, aka A % M.
 264:./lib/lib8tion/math8.h **** ///       Implemented by repeated subtraction, which is
 265:./lib/lib8tion/math8.h **** ///       very compact, and very fast if A is 'probably'
 266:./lib/lib8tion/math8.h **** ///       less than M.  If A is a large multiple of M,
 267:./lib/lib8tion/math8.h **** ///       the loop has to execute multiple times.  However,
 268:./lib/lib8tion/math8.h **** ///       even in that case, the loop is only two
 269:./lib/lib8tion/math8.h **** ///       instructions long on AVR, i.e., quick.
 270:./lib/lib8tion/math8.h **** LIB8STATIC_ALWAYS_INLINE uint8_t mod8( uint8_t a, uint8_t m)
 271:./lib/lib8tion/math8.h **** {
 272:./lib/lib8tion/math8.h **** #if defined(__AVR__)
 273:./lib/lib8tion/math8.h ****     asm volatile (
 274:./lib/lib8tion/math8.h ****                   "L_%=:  sub %[a],%[m]    \n\t"
 275:./lib/lib8tion/math8.h ****                   "       brcc L_%=        \n\t"
 276:./lib/lib8tion/math8.h ****                   "       add %[a],%[m]    \n\t"
 277:./lib/lib8tion/math8.h ****                   : [a] "+r" (a)
 278:./lib/lib8tion/math8.h ****                   : [m] "r"  (m)
 279:./lib/lib8tion/math8.h ****                   );
 280:./lib/lib8tion/math8.h **** #else
 281:./lib/lib8tion/math8.h ****     while( a >= m) a -= m;
 282:./lib/lib8tion/math8.h **** #endif
 283:./lib/lib8tion/math8.h ****     return a;
 284:./lib/lib8tion/math8.h **** }
 285:./lib/lib8tion/math8.h **** 
 286:./lib/lib8tion/math8.h **** ///          Add two numbers, and calculate the modulo
 287:./lib/lib8tion/math8.h **** ///          of the sum and a third number, M.
 288:./lib/lib8tion/math8.h **** ///          In other words, it returns (A+B) % M.
 289:./lib/lib8tion/math8.h **** ///          It is designed as a compact mechanism for
 290:./lib/lib8tion/math8.h **** ///          incrementing a 'mode' switch and wrapping
 291:./lib/lib8tion/math8.h **** ///          around back to 'mode 0' when the switch
 292:./lib/lib8tion/math8.h **** ///          goes past the end of the available range.
 293:./lib/lib8tion/math8.h **** ///          e.g. if you have seven modes, this switches
 294:./lib/lib8tion/math8.h **** ///          to the next one and wraps around if needed:
 295:./lib/lib8tion/math8.h **** ///            mode = addmod8( mode, 1, 7);
 296:./lib/lib8tion/math8.h **** ///LIB8STATIC_ALWAYS_INLINESee 'mod8' for notes on performance.
 297:./lib/lib8tion/math8.h **** LIB8STATIC uint8_t addmod8( uint8_t a, uint8_t b, uint8_t m)
 298:./lib/lib8tion/math8.h **** {
 299:./lib/lib8tion/math8.h **** #if defined(__AVR__)
 300:./lib/lib8tion/math8.h ****     asm volatile (
 301:./lib/lib8tion/math8.h ****                   "       add %[a],%[b]    \n\t"
 302:./lib/lib8tion/math8.h ****                   "L_%=:  sub %[a],%[m]    \n\t"
 303:./lib/lib8tion/math8.h ****                   "       brcc L_%=        \n\t"
 304:./lib/lib8tion/math8.h ****                   "       add %[a],%[m]    \n\t"
 305:./lib/lib8tion/math8.h ****                   : [a] "+r" (a)
 306:./lib/lib8tion/math8.h ****                   : [b] "r"  (b), [m] "r" (m)
 307:./lib/lib8tion/math8.h ****                   );
 308:./lib/lib8tion/math8.h **** #else
 309:./lib/lib8tion/math8.h ****     a += b;
 310:./lib/lib8tion/math8.h ****     while( a >= m) a -= m;
 311:./lib/lib8tion/math8.h **** #endif
 312:./lib/lib8tion/math8.h ****     return a;
 313:./lib/lib8tion/math8.h **** }
 314:./lib/lib8tion/math8.h **** 
 315:./lib/lib8tion/math8.h **** ///          Subtract two numbers, and calculate the modulo
 316:./lib/lib8tion/math8.h **** ///          of the difference and a third number, M.
 317:./lib/lib8tion/math8.h **** ///          In other words, it returns (A-B) % M.
 318:./lib/lib8tion/math8.h **** ///          It is designed as a compact mechanism for
 319:./lib/lib8tion/math8.h **** ///          incrementing a 'mode' switch and wrapping
 320:./lib/lib8tion/math8.h **** ///          around back to 'mode 0' when the switch
 321:./lib/lib8tion/math8.h **** ///          goes past the end of the available range.
 322:./lib/lib8tion/math8.h **** ///          e.g. if you have seven modes, this switches
 323:./lib/lib8tion/math8.h **** ///          to the next one and wraps around if needed:
 324:./lib/lib8tion/math8.h **** ///            mode = addmod8( mode, 1, 7);
 325:./lib/lib8tion/math8.h **** ///LIB8STATIC_ALWAYS_INLINESee 'mod8' for notes on performance.
 326:./lib/lib8tion/math8.h **** LIB8STATIC uint8_t submod8( uint8_t a, uint8_t b, uint8_t m)
 327:./lib/lib8tion/math8.h **** {
 328:./lib/lib8tion/math8.h **** #if defined(__AVR__)
 329:./lib/lib8tion/math8.h ****     asm volatile (
 330:./lib/lib8tion/math8.h ****                   "       sub %[a],%[b]    \n\t"
 331:./lib/lib8tion/math8.h ****                   "L_%=:  sub %[a],%[m]    \n\t"
 332:./lib/lib8tion/math8.h ****                   "       brcc L_%=        \n\t"
 333:./lib/lib8tion/math8.h ****                   "       add %[a],%[m]    \n\t"
 334:./lib/lib8tion/math8.h ****                   : [a] "+r" (a)
 335:./lib/lib8tion/math8.h ****                   : [b] "r"  (b), [m] "r" (m)
 336:./lib/lib8tion/math8.h ****                   );
 337:./lib/lib8tion/math8.h **** #else
 338:./lib/lib8tion/math8.h ****     a -= b;
 339:./lib/lib8tion/math8.h ****     while( a >= m) a -= m;
 340:./lib/lib8tion/math8.h **** #endif
 341:./lib/lib8tion/math8.h ****     return a;
 342:./lib/lib8tion/math8.h **** }
 343:./lib/lib8tion/math8.h **** 
 344:./lib/lib8tion/math8.h **** /// 8x8 bit multiplication, with 8 bit result
 345:./lib/lib8tion/math8.h **** LIB8STATIC_ALWAYS_INLINE uint8_t mul8( uint8_t i, uint8_t j)
 346:./lib/lib8tion/math8.h **** {
 347:./lib/lib8tion/math8.h **** #if MUL8_C == 1
 348:./lib/lib8tion/math8.h ****     return ((uint16_t)i * (uint16_t)(j) ) & 0xFF;
 349:./lib/lib8tion/math8.h **** #elif MUL8_AVRASM == 1
 350:./lib/lib8tion/math8.h ****     asm volatile(
 351:./lib/lib8tion/math8.h ****          /* Multiply 8-bit i * 8-bit j, giving 16-bit r1,r0 */
 352:./lib/lib8tion/math8.h ****          "mul %0, %1          \n\t"
 353:./lib/lib8tion/math8.h ****          /* Extract the LOW 8-bits (r0) */
 354:./lib/lib8tion/math8.h ****          "mov %0, r0          \n\t"
 355:./lib/lib8tion/math8.h ****          /* Restore r1 to "0"; it's expected to always be that */
 356:./lib/lib8tion/math8.h ****          "clr __zero_reg__    \n\t"
 357:./lib/lib8tion/math8.h ****          : "+a" (i)
 358:./lib/lib8tion/math8.h ****          : "a"  (j)
 359:./lib/lib8tion/math8.h ****          : "r0", "r1");
 360:./lib/lib8tion/math8.h **** 
 361:./lib/lib8tion/math8.h ****     return i;
 362:./lib/lib8tion/math8.h **** #else
 363:./lib/lib8tion/math8.h **** #error "No implementation for mul8 available."
 364:./lib/lib8tion/math8.h **** #endif
 365:./lib/lib8tion/math8.h **** }
 366:./lib/lib8tion/math8.h **** 
 367:./lib/lib8tion/math8.h **** 
 368:./lib/lib8tion/math8.h **** /// saturating 8x8 bit multiplication, with 8 bit result
 369:./lib/lib8tion/math8.h **** /// @returns the product of i * j, capping at 0xFF
 370:./lib/lib8tion/math8.h **** LIB8STATIC_ALWAYS_INLINE uint8_t qmul8( uint8_t i, uint8_t j)
 371:./lib/lib8tion/math8.h **** {
 372:./lib/lib8tion/math8.h **** #if QMUL8_C == 1
 373:./lib/lib8tion/math8.h ****     int p = ((uint16_t)i * (uint16_t)(j) );
 374:./lib/lib8tion/math8.h ****     if( p > 255) p = 255;
 375:./lib/lib8tion/math8.h ****     return p;
 376:./lib/lib8tion/math8.h **** #elif QMUL8_AVRASM == 1
 377:./lib/lib8tion/math8.h ****     asm volatile(
 378:./lib/lib8tion/math8.h ****                  /* Multiply 8-bit i * 8-bit j, giving 16-bit r1,r0 */
 379:./lib/lib8tion/math8.h ****                  "  mul %0, %1          \n\t"
 380:./lib/lib8tion/math8.h ****                  /* If high byte of result is zero, all is well. */
 381:./lib/lib8tion/math8.h ****                  "  tst r1              \n\t"
 382:./lib/lib8tion/math8.h ****                  "  breq Lnospill_%=    \n\t"
 383:./lib/lib8tion/math8.h ****                  /* If high byte of result > 0, saturate low byte to 0xFF */
 384:./lib/lib8tion/math8.h ****                  "  ldi %0,0xFF         \n\t"
 385:./lib/lib8tion/math8.h ****                  "  rjmp Ldone_%=       \n\t"
 386:./lib/lib8tion/math8.h ****                  "Lnospill_%=:          \n\t"
 387:./lib/lib8tion/math8.h ****                  /* Extract the LOW 8-bits (r0) */
 388:./lib/lib8tion/math8.h ****                  "  mov %0, r0          \n\t"
 389:./lib/lib8tion/math8.h ****                  "Ldone_%=:             \n\t"
 390:./lib/lib8tion/math8.h ****                  /* Restore r1 to "0"; it's expected to always be that */
 391:./lib/lib8tion/math8.h ****                  "  clr __zero_reg__    \n\t"
 392:./lib/lib8tion/math8.h ****                  : "+a" (i)
 393:./lib/lib8tion/math8.h ****                  : "a"  (j)
 394:./lib/lib8tion/math8.h ****                  : "r0", "r1");
 395:./lib/lib8tion/math8.h **** 
 396:./lib/lib8tion/math8.h ****     return i;
 397:./lib/lib8tion/math8.h **** #else
 398:./lib/lib8tion/math8.h **** #error "No implementation for qmul8 available."
 399:./lib/lib8tion/math8.h **** #endif
 400:./lib/lib8tion/math8.h **** }
 401:./lib/lib8tion/math8.h **** 
 402:./lib/lib8tion/math8.h **** 
 403:./lib/lib8tion/math8.h **** /// take abs() of a signed 8-bit uint8_t
 404:./lib/lib8tion/math8.h **** LIB8STATIC_ALWAYS_INLINE int8_t abs8( int8_t i)
 405:./lib/lib8tion/math8.h **** {
 406:./lib/lib8tion/math8.h **** #if ABS8_C == 1
 407:./lib/lib8tion/math8.h ****     if( i < 0) i = -i;
 408:./lib/lib8tion/math8.h ****     return i;
 409:./lib/lib8tion/math8.h **** #elif ABS8_AVRASM == 1
 410:./lib/lib8tion/math8.h **** 
 411:./lib/lib8tion/math8.h **** 
 412:./lib/lib8tion/math8.h ****     asm volatile(
 413:./lib/lib8tion/math8.h ****          /* First, check the high bit, and prepare to skip if it's clear */
 414:./lib/lib8tion/math8.h ****          "sbrc %0, 7 \n"
 415:./lib/lib8tion/math8.h **** 
 416:./lib/lib8tion/math8.h ****          /* Negate the value */
 417:./lib/lib8tion/math8.h ****          "neg %0     \n"
 418:./lib/lib8tion/math8.h **** 
 419:./lib/lib8tion/math8.h ****          : "+r" (i) : "r" (i) );
 420:./lib/lib8tion/math8.h ****     return i;
 421:./lib/lib8tion/math8.h **** #else
 422:./lib/lib8tion/math8.h **** #error "No implementation for abs8 available."
 423:./lib/lib8tion/math8.h **** #endif
 424:./lib/lib8tion/math8.h **** }
 425:./lib/lib8tion/math8.h **** 
 426:./lib/lib8tion/math8.h **** ///         square root for 16-bit integers
 427:./lib/lib8tion/math8.h **** ///         About three times faster and five times smaller
 428:./lib/lib8tion/math8.h **** ///         than Arduino's general sqrt on AVR.
 429:./lib/lib8tion/math8.h **** LIB8STATIC uint8_t sqrt16(uint16_t x)
 430:./lib/lib8tion/math8.h **** {
  29              		.loc 1 430 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
 431:./lib/lib8tion/math8.h ****     if( x <= 1) {
  33              		.loc 1 431 5 view .LVU1
  34              		.loc 1 431 7 is_stmt 0 view .LVU2
  35 0000 0128     		cmp	r0, #1
 430:./lib/lib8tion/math8.h ****     if( x <= 1) {
  36              		.loc 1 430 1 view .LVU3
  37 0002 30B5     		push	{r4, r5, lr}
  38              		.cfi_def_cfa_offset 12
  39              		.cfi_offset 4, -12
  40              		.cfi_offset 5, -8
  41              		.cfi_offset 14, -4
  42              		.loc 1 431 7 view .LVU4
  43 0004 01D8     		bhi	.L2
  44              	.LVL1:
  45              	.L11:
 432:./lib/lib8tion/math8.h ****         return x;
 433:./lib/lib8tion/math8.h ****     }
 434:./lib/lib8tion/math8.h **** 
 435:./lib/lib8tion/math8.h ****     uint8_t low = 1; // lower bound
 436:./lib/lib8tion/math8.h ****     uint8_t hi, mid;
 437:./lib/lib8tion/math8.h **** 
 438:./lib/lib8tion/math8.h ****     if( x > 7904) {
 439:./lib/lib8tion/math8.h ****         hi = 255;
 440:./lib/lib8tion/math8.h ****     } else {
 441:./lib/lib8tion/math8.h ****         hi = (x >> 5) + 8; // initial estimate for upper bound
 442:./lib/lib8tion/math8.h ****     }
 443:./lib/lib8tion/math8.h **** 
 444:./lib/lib8tion/math8.h ****     do {
 445:./lib/lib8tion/math8.h ****         mid = (low + hi) >> 1;
 446:./lib/lib8tion/math8.h ****         if ((uint16_t)(mid * mid) > x) {
 447:./lib/lib8tion/math8.h ****             hi = mid - 1;
 448:./lib/lib8tion/math8.h ****         } else {
 449:./lib/lib8tion/math8.h ****             if( mid == 255) {
 450:./lib/lib8tion/math8.h ****                 return 255;
 451:./lib/lib8tion/math8.h ****             }
 452:./lib/lib8tion/math8.h ****             low = mid + 1;
 453:./lib/lib8tion/math8.h ****         }
 454:./lib/lib8tion/math8.h ****     } while (hi >= low);
 455:./lib/lib8tion/math8.h **** 
 456:./lib/lib8tion/math8.h ****     return low - 1;
  46              		.loc 1 456 16 view .LVU5
  47 0006 C0B2     		uxtb	r0, r0
  48              	.L3:
 457:./lib/lib8tion/math8.h **** }
  49              		.loc 1 457 1 view .LVU6
  50 0008 30BD     		pop	{r4, r5, pc}
  51              	.LVL2:
  52              	.L2:
 435:./lib/lib8tion/math8.h ****     uint8_t hi, mid;
  53              		.loc 1 435 5 is_stmt 1 view .LVU7
 436:./lib/lib8tion/math8.h **** 
  54              		.loc 1 436 5 view .LVU8
 438:./lib/lib8tion/math8.h ****         hi = 255;
  55              		.loc 1 438 5 view .LVU9
 438:./lib/lib8tion/math8.h ****         hi = 255;
  56              		.loc 1 438 7 is_stmt 0 view .LVU10
  57 000a B0F5F75F 		cmp	r0, #7904
 441:./lib/lib8tion/math8.h ****     }
  58              		.loc 1 441 9 is_stmt 1 view .LVU11
 441:./lib/lib8tion/math8.h ****     }
  59              		.loc 1 441 23 is_stmt 0 view .LVU12
  60 000e 9DBF     		ittte	ls
  61 0010 4209     		lsrls	r2, r0, #5
 441:./lib/lib8tion/math8.h ****     }
  62              		.loc 1 441 12 view .LVU13
  63 0012 0832     		addls	r2, r2, #8
  64 0014 D2B2     		uxtbls	r2, r2
  65              	.LVL3:
 439:./lib/lib8tion/math8.h ****     } else {
  66              		.loc 1 439 12 view .LVU14
  67 0016 FF22     		movhi	r2, #255
  68              	.LVL4:
 439:./lib/lib8tion/math8.h ****     } else {
  69              		.loc 1 439 12 view .LVU15
  70 0018 0121     		movs	r1, #1
  71              	.LVL5:
  72              	.L7:
 444:./lib/lib8tion/math8.h ****         mid = (low + hi) >> 1;
  73              		.loc 1 444 5 is_stmt 1 view .LVU16
 445:./lib/lib8tion/math8.h ****         if ((uint16_t)(mid * mid) > x) {
  74              		.loc 1 445 9 view .LVU17
 445:./lib/lib8tion/math8.h ****         if ((uint16_t)(mid * mid) > x) {
  75              		.loc 1 445 20 is_stmt 0 view .LVU18
  76 001a 8B18     		adds	r3, r1, r2
 445:./lib/lib8tion/math8.h ****         if ((uint16_t)(mid * mid) > x) {
  77              		.loc 1 445 26 view .LVU19
  78 001c 5B10     		asrs	r3, r3, #1
 446:./lib/lib8tion/math8.h ****             hi = mid - 1;
  79              		.loc 1 446 13 view .LVU20
  80 001e 03FB03F5 		mul	r5, r3, r3
 446:./lib/lib8tion/math8.h ****             hi = mid - 1;
  81              		.loc 1 446 12 view .LVU21
  82 0022 ADB2     		uxth	r5, r5
  83 0024 8542     		cmp	r5, r0
 445:./lib/lib8tion/math8.h ****         if ((uint16_t)(mid * mid) > x) {
  84              		.loc 1 445 13 view .LVU22
  85 0026 DCB2     		uxtb	r4, r3
  86              	.LVL6:
 446:./lib/lib8tion/math8.h ****             hi = mid - 1;
  87              		.loc 1 446 9 is_stmt 1 view .LVU23
 446:./lib/lib8tion/math8.h ****             hi = mid - 1;
  88              		.loc 1 446 12 is_stmt 0 view .LVU24
  89 0028 05D9     		bls	.L5
 447:./lib/lib8tion/math8.h ****         } else {
  90              		.loc 1 447 13 is_stmt 1 view .LVU25
 447:./lib/lib8tion/math8.h ****         } else {
  91              		.loc 1 447 16 is_stmt 0 view .LVU26
  92 002a 621E     		subs	r2, r4, #1
  93              	.LVL7:
 447:./lib/lib8tion/math8.h ****         } else {
  94              		.loc 1 447 16 view .LVU27
  95 002c D2B2     		uxtb	r2, r2
  96              	.LVL8:
  97              	.L6:
 454:./lib/lib8tion/math8.h **** 
  98              		.loc 1 454 5 view .LVU28
  99 002e 9142     		cmp	r1, r2
 100 0030 F3D9     		bls	.L7
 456:./lib/lib8tion/math8.h **** }
 101              		.loc 1 456 5 is_stmt 1 view .LVU29
 456:./lib/lib8tion/math8.h **** }
 102              		.loc 1 456 16 is_stmt 0 view .LVU30
 103 0032 481E     		subs	r0, r1, #1
 104              	.LVL9:
 456:./lib/lib8tion/math8.h **** }
 105              		.loc 1 456 16 view .LVU31
 106 0034 E7E7     		b	.L11
 107              	.LVL10:
 108              	.L5:
 449:./lib/lib8tion/math8.h ****                 return 255;
 109              		.loc 1 449 13 is_stmt 1 view .LVU32
 449:./lib/lib8tion/math8.h ****                 return 255;
 110              		.loc 1 449 15 is_stmt 0 view .LVU33
 111 0036 FF2B     		cmp	r3, #255
 112 0038 02D0     		beq	.L9
 452:./lib/lib8tion/math8.h ****         }
 113              		.loc 1 452 13 is_stmt 1 view .LVU34
 452:./lib/lib8tion/math8.h ****         }
 114              		.loc 1 452 17 is_stmt 0 view .LVU35
 115 003a 611C     		adds	r1, r4, #1
 116              	.LVL11:
 452:./lib/lib8tion/math8.h ****         }
 117              		.loc 1 452 17 view .LVU36
 118 003c C9B2     		uxtb	r1, r1
 119              	.LVL12:
 452:./lib/lib8tion/math8.h ****         }
 120              		.loc 1 452 17 view .LVU37
 121 003e F6E7     		b	.L6
 122              	.L9:
 450:./lib/lib8tion/math8.h ****             }
 123              		.loc 1 450 24 view .LVU38
 124 0040 1846     		mov	r0, r3
 125              	.LVL13:
 450:./lib/lib8tion/math8.h ****             }
 126              		.loc 1 450 24 view .LVU39
 127 0042 E1E7     		b	.L3
 128              		.cfi_endproc
 129              	.LFE37:
 131              		.section	.text.sin8_C,"ax",%progbits
 132              		.align	1
 133              		.syntax unified
 134              		.thumb
 135              		.thumb_func
 136              		.fpu fpv4-sp-d16
 138              	sin8_C:
 139              	.LVL14:
 140              	.LFB52:
 141              		.file 2 "./lib/lib8tion/trig8.h"
   1:./lib/lib8tion/trig8.h **** #ifndef __INC_LIB8TION_TRIG_H
   2:./lib/lib8tion/trig8.h **** #define __INC_LIB8TION_TRIG_H
   3:./lib/lib8tion/trig8.h **** 
   4:./lib/lib8tion/trig8.h **** ///@ingroup lib8tion
   5:./lib/lib8tion/trig8.h **** 
   6:./lib/lib8tion/trig8.h **** ///@defgroup Trig Fast trig functions
   7:./lib/lib8tion/trig8.h **** /// Fast 8 and 16-bit approximations of sin(x) and cos(x).
   8:./lib/lib8tion/trig8.h **** ///        Don't use these approximations for calculating the
   9:./lib/lib8tion/trig8.h **** ///        trajectory of a rocket to Mars, but they're great
  10:./lib/lib8tion/trig8.h **** ///        for art projects and LED displays.
  11:./lib/lib8tion/trig8.h **** ///
  12:./lib/lib8tion/trig8.h **** ///        On Arduino/AVR, the 16-bit approximation is more than
  13:./lib/lib8tion/trig8.h **** ///        10X faster than floating point sin(x) and cos(x), while
  14:./lib/lib8tion/trig8.h **** /// the 8-bit approximation is more than 20X faster.
  15:./lib/lib8tion/trig8.h **** ///@{
  16:./lib/lib8tion/trig8.h **** 
  17:./lib/lib8tion/trig8.h **** #if defined(__AVR__)
  18:./lib/lib8tion/trig8.h **** #define sin16 sin16_avr
  19:./lib/lib8tion/trig8.h **** #else
  20:./lib/lib8tion/trig8.h **** #define sin16 sin16_C
  21:./lib/lib8tion/trig8.h **** #endif
  22:./lib/lib8tion/trig8.h **** 
  23:./lib/lib8tion/trig8.h **** /// Fast 16-bit approximation of sin(x). This approximation never varies more than
  24:./lib/lib8tion/trig8.h **** /// 0.69% from the floating point value you'd get by doing
  25:./lib/lib8tion/trig8.h **** ///
  26:./lib/lib8tion/trig8.h **** ///     float s = sin(x) * 32767.0;
  27:./lib/lib8tion/trig8.h **** ///
  28:./lib/lib8tion/trig8.h **** /// @param theta input angle from 0-65535
  29:./lib/lib8tion/trig8.h **** /// @returns sin of theta, value between -32767 to 32767.
  30:./lib/lib8tion/trig8.h **** LIB8STATIC int16_t sin16_avr( uint16_t theta )
  31:./lib/lib8tion/trig8.h **** {
  32:./lib/lib8tion/trig8.h ****     static const uint8_t data[] =
  33:./lib/lib8tion/trig8.h ****     { 0,         0,         49, 0, 6393%256,   6393/256, 48, 0,
  34:./lib/lib8tion/trig8.h ****       12539%256, 12539/256, 44, 0, 18204%256, 18204/256, 38, 0,
  35:./lib/lib8tion/trig8.h ****       23170%256, 23170/256, 31, 0, 27245%256, 27245/256, 23, 0,
  36:./lib/lib8tion/trig8.h ****       30273%256, 30273/256, 14, 0, 32137%256, 32137/256,  4 /*,0*/ };
  37:./lib/lib8tion/trig8.h **** 
  38:./lib/lib8tion/trig8.h ****     uint16_t offset = (theta & 0x3FFF);
  39:./lib/lib8tion/trig8.h **** 
  40:./lib/lib8tion/trig8.h ****     // AVR doesn't have a multi-bit shift instruction,
  41:./lib/lib8tion/trig8.h ****     // so if we say "offset >>= 3", gcc makes a tiny loop.
  42:./lib/lib8tion/trig8.h ****     // Inserting empty volatile statements between each
  43:./lib/lib8tion/trig8.h ****     // bit shift forces gcc to unroll the loop.
  44:./lib/lib8tion/trig8.h ****     offset >>= 1; // 0..8191
  45:./lib/lib8tion/trig8.h ****     asm volatile("");
  46:./lib/lib8tion/trig8.h ****     offset >>= 1; // 0..4095
  47:./lib/lib8tion/trig8.h ****     asm volatile("");
  48:./lib/lib8tion/trig8.h ****     offset >>= 1; // 0..2047
  49:./lib/lib8tion/trig8.h **** 
  50:./lib/lib8tion/trig8.h ****     if( theta & 0x4000 ) offset = 2047 - offset;
  51:./lib/lib8tion/trig8.h **** 
  52:./lib/lib8tion/trig8.h ****     uint8_t sectionX4;
  53:./lib/lib8tion/trig8.h ****     sectionX4 = offset / 256;
  54:./lib/lib8tion/trig8.h ****     sectionX4 *= 4;
  55:./lib/lib8tion/trig8.h **** 
  56:./lib/lib8tion/trig8.h ****     uint8_t m;
  57:./lib/lib8tion/trig8.h **** 
  58:./lib/lib8tion/trig8.h ****     union {
  59:./lib/lib8tion/trig8.h ****         uint16_t b;
  60:./lib/lib8tion/trig8.h ****         struct {
  61:./lib/lib8tion/trig8.h ****             uint8_t blo;
  62:./lib/lib8tion/trig8.h ****             uint8_t bhi;
  63:./lib/lib8tion/trig8.h ****         };
  64:./lib/lib8tion/trig8.h ****     } u;
  65:./lib/lib8tion/trig8.h **** 
  66:./lib/lib8tion/trig8.h ****     //in effect u.b = blo + (256 * bhi);
  67:./lib/lib8tion/trig8.h ****     u.blo = data[ sectionX4 ];
  68:./lib/lib8tion/trig8.h ****     u.bhi = data[ sectionX4 + 1];
  69:./lib/lib8tion/trig8.h ****     m     = data[ sectionX4 + 2];
  70:./lib/lib8tion/trig8.h **** 
  71:./lib/lib8tion/trig8.h ****     uint8_t secoffset8 = (uint8_t)(offset) / 2;
  72:./lib/lib8tion/trig8.h **** 
  73:./lib/lib8tion/trig8.h ****     uint16_t mx = m * secoffset8;
  74:./lib/lib8tion/trig8.h **** 
  75:./lib/lib8tion/trig8.h ****     int16_t  y  = mx + u.b;
  76:./lib/lib8tion/trig8.h ****     if( theta & 0x8000 ) y = -y;
  77:./lib/lib8tion/trig8.h **** 
  78:./lib/lib8tion/trig8.h ****     return y;
  79:./lib/lib8tion/trig8.h **** }
  80:./lib/lib8tion/trig8.h **** 
  81:./lib/lib8tion/trig8.h **** /// Fast 16-bit approximation of sin(x). This approximation never varies more than
  82:./lib/lib8tion/trig8.h **** /// 0.69% from the floating point value you'd get by doing
  83:./lib/lib8tion/trig8.h **** ///
  84:./lib/lib8tion/trig8.h **** ///     float s = sin(x) * 32767.0;
  85:./lib/lib8tion/trig8.h **** ///
  86:./lib/lib8tion/trig8.h **** /// @param theta input angle from 0-65535
  87:./lib/lib8tion/trig8.h **** /// @returns sin of theta, value between -32767 to 32767.
  88:./lib/lib8tion/trig8.h **** LIB8STATIC int16_t sin16_C( uint16_t theta )
  89:./lib/lib8tion/trig8.h **** {
  90:./lib/lib8tion/trig8.h ****     static const uint16_t base[] =
  91:./lib/lib8tion/trig8.h ****     { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
  92:./lib/lib8tion/trig8.h ****     static const uint8_t slope[] =
  93:./lib/lib8tion/trig8.h ****     { 49, 48, 44, 38, 31, 23, 14, 4 };
  94:./lib/lib8tion/trig8.h **** 
  95:./lib/lib8tion/trig8.h ****     uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
  96:./lib/lib8tion/trig8.h ****     if( theta & 0x4000 ) offset = 2047 - offset;
  97:./lib/lib8tion/trig8.h **** 
  98:./lib/lib8tion/trig8.h ****     uint8_t section = offset / 256; // 0..7
  99:./lib/lib8tion/trig8.h ****     uint16_t b   = base[section];
 100:./lib/lib8tion/trig8.h ****     uint8_t  m   = slope[section];
 101:./lib/lib8tion/trig8.h **** 
 102:./lib/lib8tion/trig8.h ****     uint8_t secoffset8 = (uint8_t)(offset) / 2;
 103:./lib/lib8tion/trig8.h **** 
 104:./lib/lib8tion/trig8.h ****     uint16_t mx = m * secoffset8;
 105:./lib/lib8tion/trig8.h ****     int16_t  y  = mx + b;
 106:./lib/lib8tion/trig8.h **** 
 107:./lib/lib8tion/trig8.h ****     if( theta & 0x8000 ) y = -y;
 108:./lib/lib8tion/trig8.h **** 
 109:./lib/lib8tion/trig8.h ****     return y;
 110:./lib/lib8tion/trig8.h **** }
 111:./lib/lib8tion/trig8.h **** 
 112:./lib/lib8tion/trig8.h **** 
 113:./lib/lib8tion/trig8.h **** /// Fast 16-bit approximation of cos(x). This approximation never varies more than
 114:./lib/lib8tion/trig8.h **** /// 0.69% from the floating point value you'd get by doing
 115:./lib/lib8tion/trig8.h **** ///
 116:./lib/lib8tion/trig8.h **** ///     float s = cos(x) * 32767.0;
 117:./lib/lib8tion/trig8.h **** ///
 118:./lib/lib8tion/trig8.h **** /// @param theta input angle from 0-65535
 119:./lib/lib8tion/trig8.h **** /// @returns sin of theta, value between -32767 to 32767.
 120:./lib/lib8tion/trig8.h **** LIB8STATIC int16_t cos16( uint16_t theta)
 121:./lib/lib8tion/trig8.h **** {
 122:./lib/lib8tion/trig8.h ****     return sin16( theta + 16384);
 123:./lib/lib8tion/trig8.h **** }
 124:./lib/lib8tion/trig8.h **** 
 125:./lib/lib8tion/trig8.h **** ///////////////////////////////////////////////////////////////////////
 126:./lib/lib8tion/trig8.h **** 
 127:./lib/lib8tion/trig8.h **** // sin8 & cos8
 128:./lib/lib8tion/trig8.h **** //        Fast 8-bit approximations of sin(x) & cos(x).
 129:./lib/lib8tion/trig8.h **** //        Input angle is an unsigned int from 0-255.
 130:./lib/lib8tion/trig8.h **** //        Output is an unsigned int from 0 to 255.
 131:./lib/lib8tion/trig8.h **** //
 132:./lib/lib8tion/trig8.h **** //        This approximation can vary to to 2%
 133:./lib/lib8tion/trig8.h **** //        from the floating point value you'd get by doing
 134:./lib/lib8tion/trig8.h **** //          float s = (sin( x ) * 128.0) + 128;
 135:./lib/lib8tion/trig8.h **** //
 136:./lib/lib8tion/trig8.h **** //        Don't use this approximation for calculating the
 137:./lib/lib8tion/trig8.h **** //        "real" trigonometric calculations, but it's great
 138:./lib/lib8tion/trig8.h **** //        for art projects and LED displays.
 139:./lib/lib8tion/trig8.h **** //
 140:./lib/lib8tion/trig8.h **** //        On Arduino/AVR, this approximation is more than
 141:./lib/lib8tion/trig8.h **** //        20X faster than floating point sin(x) and cos(x)
 142:./lib/lib8tion/trig8.h **** 
 143:./lib/lib8tion/trig8.h **** #if defined(__AVR__) && !defined(LIB8_ATTINY)
 144:./lib/lib8tion/trig8.h **** #define sin8 sin8_avr
 145:./lib/lib8tion/trig8.h **** #else
 146:./lib/lib8tion/trig8.h **** #define sin8 sin8_C
 147:./lib/lib8tion/trig8.h **** #endif
 148:./lib/lib8tion/trig8.h **** 
 149:./lib/lib8tion/trig8.h **** 
 150:./lib/lib8tion/trig8.h **** static const uint8_t b_m16_interleave[8] = { 0, 49, 49, 41, 90, 27, 117, 10 };
 151:./lib/lib8tion/trig8.h **** 
 152:./lib/lib8tion/trig8.h **** /// Fast 8-bit approximation of sin(x). This approximation never varies more than
 153:./lib/lib8tion/trig8.h **** /// 2% from the floating point value you'd get by doing
 154:./lib/lib8tion/trig8.h **** ///
 155:./lib/lib8tion/trig8.h **** ///     float s = (sin(x) * 128.0) + 128;
 156:./lib/lib8tion/trig8.h **** ///
 157:./lib/lib8tion/trig8.h **** /// @param theta input angle from 0-255
 158:./lib/lib8tion/trig8.h **** /// @returns sin of theta, value between 0 and 255
 159:./lib/lib8tion/trig8.h **** LIB8STATIC uint8_t  sin8_avr( uint8_t theta)
 160:./lib/lib8tion/trig8.h **** {
 161:./lib/lib8tion/trig8.h ****     uint8_t offset = theta;
 162:./lib/lib8tion/trig8.h **** 
 163:./lib/lib8tion/trig8.h ****     asm volatile(
 164:./lib/lib8tion/trig8.h ****                  "sbrc %[theta],6         \n\t"
 165:./lib/lib8tion/trig8.h ****                  "com  %[offset]           \n\t"
 166:./lib/lib8tion/trig8.h ****                  : [theta] "+r" (theta), [offset] "+r" (offset)
 167:./lib/lib8tion/trig8.h ****                  );
 168:./lib/lib8tion/trig8.h **** 
 169:./lib/lib8tion/trig8.h ****     offset &= 0x3F; // 0..63
 170:./lib/lib8tion/trig8.h **** 
 171:./lib/lib8tion/trig8.h ****     uint8_t secoffset  = offset & 0x0F; // 0..15
 172:./lib/lib8tion/trig8.h ****     if( theta & 0x40) secoffset++;
 173:./lib/lib8tion/trig8.h **** 
 174:./lib/lib8tion/trig8.h ****     uint8_t m16; uint8_t b;
 175:./lib/lib8tion/trig8.h **** 
 176:./lib/lib8tion/trig8.h ****     uint8_t section = offset >> 4; // 0..3
 177:./lib/lib8tion/trig8.h ****     uint8_t s2 = section * 2;
 178:./lib/lib8tion/trig8.h **** 
 179:./lib/lib8tion/trig8.h ****     const uint8_t* p = b_m16_interleave;
 180:./lib/lib8tion/trig8.h ****     p += s2;
 181:./lib/lib8tion/trig8.h ****     b   = *p;
 182:./lib/lib8tion/trig8.h ****     p++;
 183:./lib/lib8tion/trig8.h ****     m16 = *p;
 184:./lib/lib8tion/trig8.h **** 
 185:./lib/lib8tion/trig8.h ****     uint8_t mx;
 186:./lib/lib8tion/trig8.h ****     uint8_t xr1;
 187:./lib/lib8tion/trig8.h ****     asm volatile(
 188:./lib/lib8tion/trig8.h ****                  "mul %[m16],%[secoffset]   \n\t"
 189:./lib/lib8tion/trig8.h ****                  "mov %[mx],r0              \n\t"
 190:./lib/lib8tion/trig8.h ****                  "mov %[xr1],r1             \n\t"
 191:./lib/lib8tion/trig8.h ****                  "eor  r1, r1               \n\t"
 192:./lib/lib8tion/trig8.h ****                  "swap %[mx]                \n\t"
 193:./lib/lib8tion/trig8.h ****                  "andi %[mx],0x0F           \n\t"
 194:./lib/lib8tion/trig8.h ****                  "swap %[xr1]               \n\t"
 195:./lib/lib8tion/trig8.h ****                  "andi %[xr1], 0xF0         \n\t"
 196:./lib/lib8tion/trig8.h ****                  "or   %[mx], %[xr1]        \n\t"
 197:./lib/lib8tion/trig8.h ****                  : [mx] "=d" (mx), [xr1] "=d" (xr1)
 198:./lib/lib8tion/trig8.h ****                  : [m16] "d" (m16), [secoffset] "d" (secoffset)
 199:./lib/lib8tion/trig8.h ****                  );
 200:./lib/lib8tion/trig8.h **** 
 201:./lib/lib8tion/trig8.h ****     int8_t y = mx + b;
 202:./lib/lib8tion/trig8.h ****     if( theta & 0x80 ) y = -y;
 203:./lib/lib8tion/trig8.h **** 
 204:./lib/lib8tion/trig8.h ****     y += 128;
 205:./lib/lib8tion/trig8.h **** 
 206:./lib/lib8tion/trig8.h ****     return y;
 207:./lib/lib8tion/trig8.h **** }
 208:./lib/lib8tion/trig8.h **** 
 209:./lib/lib8tion/trig8.h **** 
 210:./lib/lib8tion/trig8.h **** /// Fast 8-bit approximation of sin(x). This approximation never varies more than
 211:./lib/lib8tion/trig8.h **** /// 2% from the floating point value you'd get by doing
 212:./lib/lib8tion/trig8.h **** ///
 213:./lib/lib8tion/trig8.h **** ///     float s = (sin(x) * 128.0) + 128;
 214:./lib/lib8tion/trig8.h **** ///
 215:./lib/lib8tion/trig8.h **** /// @param theta input angle from 0-255
 216:./lib/lib8tion/trig8.h **** /// @returns sin of theta, value between 0 and 255
 217:./lib/lib8tion/trig8.h **** LIB8STATIC uint8_t sin8_C( uint8_t theta)
 218:./lib/lib8tion/trig8.h **** {
 142              		.loc 2 218 1 is_stmt 1 view -0
 143              		.cfi_startproc
 144              		@ args = 0, pretend = 0, frame = 0
 145              		@ frame_needed = 0, uses_anonymous_args = 0
 219:./lib/lib8tion/trig8.h ****     uint8_t offset = theta;
 146              		.loc 2 219 5 view .LVU41
 220:./lib/lib8tion/trig8.h ****     if( theta & 0x40 ) {
 147              		.loc 2 220 5 view .LVU42
 148              		.loc 2 220 7 is_stmt 0 view .LVU43
 149 0000 10F04002 		ands	r2, r0, #64
 221:./lib/lib8tion/trig8.h ****         offset = (uint8_t)255 - offset;
 150              		.loc 2 221 9 is_stmt 1 view .LVU44
 151              		.loc 2 221 16 is_stmt 0 view .LVU45
 152 0004 1ABF     		itte	ne
 153 0006 C343     		mvnne	r3, r0
 154 0008 DBB2     		uxtbne	r3, r3
 155              	.LVL15:
 156              		.loc 2 221 16 view .LVU46
 157 000a 0346     		moveq	r3, r0
 158              	.LVL16:
 222:./lib/lib8tion/trig8.h ****     }
 223:./lib/lib8tion/trig8.h ****     offset &= 0x3F; // 0..63
 159              		.loc 2 223 5 is_stmt 1 view .LVU47
 224:./lib/lib8tion/trig8.h **** 
 225:./lib/lib8tion/trig8.h ****     uint8_t secoffset  = offset & 0x0F; // 0..15
 160              		.loc 2 225 5 view .LVU48
 218:./lib/lib8tion/trig8.h ****     uint8_t offset = theta;
 161              		.loc 2 218 1 is_stmt 0 view .LVU49
 162 000c 10B5     		push	{r4, lr}
 163              		.cfi_def_cfa_offset 8
 164              		.cfi_offset 4, -8
 165              		.cfi_offset 14, -4
 166              		.loc 2 225 13 view .LVU50
 167 000e 03F00F01 		and	r1, r3, #15
 168              	.LVL17:
 226:./lib/lib8tion/trig8.h ****     if( theta & 0x40) secoffset++;
 169              		.loc 2 226 5 is_stmt 1 view .LVU51
 170              		.loc 2 226 7 is_stmt 0 view .LVU52
 171 0012 02B1     		cbz	r2, .L14
 172              		.loc 2 226 23 is_stmt 1 discriminator 1 view .LVU53
 173              		.loc 2 226 32 is_stmt 0 discriminator 1 view .LVU54
 174 0014 0131     		adds	r1, r1, #1
 175              	.LVL18:
 176              	.L14:
 227:./lib/lib8tion/trig8.h **** 
 228:./lib/lib8tion/trig8.h ****     uint8_t section = offset >> 4; // 0..3
 177              		.loc 2 228 5 is_stmt 1 view .LVU55
 229:./lib/lib8tion/trig8.h ****     uint8_t s2 = section * 2;
 178              		.loc 2 229 5 view .LVU56
 230:./lib/lib8tion/trig8.h ****     const uint8_t* p = b_m16_interleave;
 179              		.loc 2 230 5 view .LVU57
 231:./lib/lib8tion/trig8.h ****     p += s2;
 180              		.loc 2 231 5 view .LVU58
 181              		.loc 2 231 7 is_stmt 0 view .LVU59
 182 0016 094C     		ldr	r4, .L20
 228:./lib/lib8tion/trig8.h ****     uint8_t s2 = section * 2;
 183              		.loc 2 228 13 view .LVU60
 184 0018 C3F30113 		ubfx	r3, r3, #4, #2
 185              	.LVL19:
 186              		.loc 2 231 7 view .LVU61
 187 001c 5B00     		lsls	r3, r3, #1
 188 001e E218     		adds	r2, r4, r3
 189              	.LVL20:
 232:./lib/lib8tion/trig8.h ****     uint8_t b   =  *p;
 190              		.loc 2 232 5 is_stmt 1 view .LVU62
 233:./lib/lib8tion/trig8.h ****     p++;
 191              		.loc 2 233 5 view .LVU63
 234:./lib/lib8tion/trig8.h ****     uint8_t m16 =  *p;
 192              		.loc 2 234 5 view .LVU64
 235:./lib/lib8tion/trig8.h **** 
 236:./lib/lib8tion/trig8.h ****     uint8_t mx = (m16 * secoffset) >> 4;
 193              		.loc 2 236 5 view .LVU65
 237:./lib/lib8tion/trig8.h **** 
 238:./lib/lib8tion/trig8.h ****     int8_t y = mx + b;
 194              		.loc 2 238 5 view .LVU66
 195              		.loc 2 238 19 is_stmt 0 view .LVU67
 196 0020 E35C     		ldrb	r3, [r4, r3]	@ zero_extendqisi2
 236:./lib/lib8tion/trig8.h **** 
 197              		.loc 2 236 23 view .LVU68
 198 0022 5278     		ldrb	r2, [r2, #1]	@ zero_extendqisi2
 199              	.LVL21:
 236:./lib/lib8tion/trig8.h **** 
 200              		.loc 2 236 23 view .LVU69
 201 0024 12FB01F2 		smulbb	r2, r2, r1
 202              	.LVL22:
 203              		.loc 2 238 19 view .LVU70
 204 0028 03EB2213 		add	r3, r3, r2, asr #4
 205              	.LVL23:
 206              		.loc 2 238 19 view .LVU71
 207 002c DBB2     		uxtb	r3, r3
 208              	.LVL24:
 239:./lib/lib8tion/trig8.h ****     if( theta & 0x80 ) y = -y;
 209              		.loc 2 239 5 is_stmt 1 view .LVU72
 210              		.loc 2 239 7 is_stmt 0 view .LVU73
 211 002e 0206     		lsls	r2, r0, #24
 212              		.loc 2 239 24 is_stmt 1 view .LVU74
 213              		.loc 2 239 26 is_stmt 0 view .LVU75
 214 0030 44BF     		itt	mi
 215 0032 5B42     		rsbmi	r3, r3, #0
 216              	.LVL25:
 217              		.loc 2 239 26 view .LVU76
 218 0034 DBB2     		uxtbmi	r3, r3
 219              	.LVL26:
 240:./lib/lib8tion/trig8.h **** 
 241:./lib/lib8tion/trig8.h ****     y += 128;
 220              		.loc 2 241 5 is_stmt 1 view .LVU77
 242:./lib/lib8tion/trig8.h **** 
 243:./lib/lib8tion/trig8.h ****     return y;
 221              		.loc 2 243 5 view .LVU78
 244:./lib/lib8tion/trig8.h **** }
 222              		.loc 2 244 1 is_stmt 0 view .LVU79
 223 0036 83F08000 		eor	r0, r3, #128
 224              	.LVL27:
 225              		.loc 2 244 1 view .LVU80
 226 003a 10BD     		pop	{r4, pc}
 227              	.L21:
 228              		.loc 2 244 1 view .LVU81
 229              		.align	2
 230              	.L20:
 231 003c 00000000 		.word	.LANCHOR0
 232              		.cfi_endproc
 233              	.LFE52:
 235              		.section	.text.eeconfig_read_rgb_matrix,"ax",%progbits
 236              		.align	1
 237              		.global	eeconfig_read_rgb_matrix
 238              		.syntax unified
 239              		.thumb
 240              		.thumb_func
 241              		.fpu fpv4-sp-d16
 243              	eeconfig_read_rgb_matrix:
 244              	.LFB87:
 245              		.file 3 "quantum/rgb_matrix.c"
   1:quantum/rgb_matrix.c **** /* Copyright 2017 Jason Williams
   2:quantum/rgb_matrix.c ****  * Copyright 2017 Jack Humbert
   3:quantum/rgb_matrix.c ****  * Copyright 2018 Yiancar
   4:quantum/rgb_matrix.c ****  *
   5:quantum/rgb_matrix.c ****  * This program is free software: you can redistribute it and/or modify
   6:quantum/rgb_matrix.c ****  * it under the terms of the GNU General Public License as published by
   7:quantum/rgb_matrix.c ****  * the Free Software Foundation, either version 2 of the License, or
   8:quantum/rgb_matrix.c ****  * (at your option) any later version.
   9:quantum/rgb_matrix.c ****  *
  10:quantum/rgb_matrix.c ****  * This program is distributed in the hope that it will be useful,
  11:quantum/rgb_matrix.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  12:quantum/rgb_matrix.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13:quantum/rgb_matrix.c ****  * GNU General Public License for more details.
  14:quantum/rgb_matrix.c ****  *
  15:quantum/rgb_matrix.c ****  * You should have received a copy of the GNU General Public License
  16:quantum/rgb_matrix.c ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  17:quantum/rgb_matrix.c ****  */
  18:quantum/rgb_matrix.c **** 
  19:quantum/rgb_matrix.c **** #include "rgb_matrix.h"
  20:quantum/rgb_matrix.c **** #include "progmem.h"
  21:quantum/rgb_matrix.c **** #include "config.h"
  22:quantum/rgb_matrix.c **** #include "eeprom.h"
  23:quantum/rgb_matrix.c **** #include <string.h>
  24:quantum/rgb_matrix.c **** #include <math.h>
  25:quantum/rgb_matrix.c **** 
  26:quantum/rgb_matrix.c **** #include "lib/lib8tion/lib8tion.h"
  27:quantum/rgb_matrix.c **** 
  28:quantum/rgb_matrix.c **** #ifndef RGB_MATRIX_CENTER
  29:quantum/rgb_matrix.c **** const point_t k_rgb_matrix_center = {112, 32};
  30:quantum/rgb_matrix.c **** #else
  31:quantum/rgb_matrix.c **** const point_t k_rgb_matrix_center = RGB_MATRIX_CENTER;
  32:quantum/rgb_matrix.c **** #endif
  33:quantum/rgb_matrix.c **** 
  34:quantum/rgb_matrix.c **** // Generic effect runners
  35:quantum/rgb_matrix.c **** #include "rgb_matrix_runners/effect_runner_dx_dy_dist.h"
  36:quantum/rgb_matrix.c **** #include "rgb_matrix_runners/effect_runner_dx_dy.h"
  37:quantum/rgb_matrix.c **** #include "rgb_matrix_runners/effect_runner_i.h"
  38:quantum/rgb_matrix.c **** #include "rgb_matrix_runners/effect_runner_sin_cos_i.h"
  39:quantum/rgb_matrix.c **** #include "rgb_matrix_runners/effect_runner_reactive.h"
  40:quantum/rgb_matrix.c **** #include "rgb_matrix_runners/effect_runner_reactive_splash.h"
  41:quantum/rgb_matrix.c **** 
  42:quantum/rgb_matrix.c **** // ------------------------------------------
  43:quantum/rgb_matrix.c **** // -----Begin rgb effect includes macros-----
  44:quantum/rgb_matrix.c **** #define RGB_MATRIX_EFFECT(name)
  45:quantum/rgb_matrix.c **** #define RGB_MATRIX_CUSTOM_EFFECT_IMPLS
  46:quantum/rgb_matrix.c **** 
  47:quantum/rgb_matrix.c **** #include "rgb_matrix_animations/rgb_matrix_effects.inc"
  48:quantum/rgb_matrix.c **** #ifdef RGB_MATRIX_CUSTOM_KB
  49:quantum/rgb_matrix.c **** #    include "rgb_matrix_kb.inc"
  50:quantum/rgb_matrix.c **** #endif
  51:quantum/rgb_matrix.c **** #ifdef RGB_MATRIX_CUSTOM_USER
  52:quantum/rgb_matrix.c **** #    include "rgb_matrix_user.inc"
  53:quantum/rgb_matrix.c **** #endif
  54:quantum/rgb_matrix.c **** 
  55:quantum/rgb_matrix.c **** #undef RGB_MATRIX_CUSTOM_EFFECT_IMPLS
  56:quantum/rgb_matrix.c **** #undef RGB_MATRIX_EFFECT
  57:quantum/rgb_matrix.c **** // -----End rgb effect includes macros-------
  58:quantum/rgb_matrix.c **** // ------------------------------------------
  59:quantum/rgb_matrix.c **** 
  60:quantum/rgb_matrix.c **** #if defined(RGB_DISABLE_AFTER_TIMEOUT) && !defined(RGB_DISABLE_TIMEOUT)
  61:quantum/rgb_matrix.c **** #    define RGB_DISABLE_TIMEOUT (RGB_DISABLE_AFTER_TIMEOUT * 1200)
  62:quantum/rgb_matrix.c **** #endif
  63:quantum/rgb_matrix.c **** 
  64:quantum/rgb_matrix.c **** #ifndef RGB_DISABLE_TIMEOUT
  65:quantum/rgb_matrix.c **** #    define RGB_DISABLE_TIMEOUT 0
  66:quantum/rgb_matrix.c **** #endif
  67:quantum/rgb_matrix.c **** 
  68:quantum/rgb_matrix.c **** #ifndef RGB_DISABLE_WHEN_USB_SUSPENDED
  69:quantum/rgb_matrix.c **** #    define RGB_DISABLE_WHEN_USB_SUSPENDED false
  70:quantum/rgb_matrix.c **** #endif
  71:quantum/rgb_matrix.c **** 
  72:quantum/rgb_matrix.c **** #if !defined(RGB_MATRIX_MAXIMUM_BRIGHTNESS) || RGB_MATRIX_MAXIMUM_BRIGHTNESS > UINT8_MAX
  73:quantum/rgb_matrix.c **** #    undef RGB_MATRIX_MAXIMUM_BRIGHTNESS
  74:quantum/rgb_matrix.c **** #    define RGB_MATRIX_MAXIMUM_BRIGHTNESS UINT8_MAX
  75:quantum/rgb_matrix.c **** #endif
  76:quantum/rgb_matrix.c **** 
  77:quantum/rgb_matrix.c **** #if !defined(RGB_MATRIX_HUE_STEP)
  78:quantum/rgb_matrix.c **** #    define RGB_MATRIX_HUE_STEP 8
  79:quantum/rgb_matrix.c **** #endif
  80:quantum/rgb_matrix.c **** 
  81:quantum/rgb_matrix.c **** #if !defined(RGB_MATRIX_SAT_STEP)
  82:quantum/rgb_matrix.c **** #    define RGB_MATRIX_SAT_STEP 16
  83:quantum/rgb_matrix.c **** #endif
  84:quantum/rgb_matrix.c **** 
  85:quantum/rgb_matrix.c **** #if !defined(RGB_MATRIX_VAL_STEP)
  86:quantum/rgb_matrix.c **** #    define RGB_MATRIX_VAL_STEP 16
  87:quantum/rgb_matrix.c **** #endif
  88:quantum/rgb_matrix.c **** 
  89:quantum/rgb_matrix.c **** #if !defined(RGB_MATRIX_SPD_STEP)
  90:quantum/rgb_matrix.c **** #    define RGB_MATRIX_SPD_STEP 16
  91:quantum/rgb_matrix.c **** #endif
  92:quantum/rgb_matrix.c **** 
  93:quantum/rgb_matrix.c **** #if !defined(RGB_MATRIX_STARTUP_MODE)
  94:quantum/rgb_matrix.c **** #    ifndef DISABLE_RGB_MATRIX_CYCLE_LEFT_RIGHT
  95:quantum/rgb_matrix.c **** #        define RGB_MATRIX_STARTUP_MODE RGB_MATRIX_CYCLE_LEFT_RIGHT
  96:quantum/rgb_matrix.c **** #    else
  97:quantum/rgb_matrix.c **** // fallback to solid colors if RGB_MATRIX_CYCLE_LEFT_RIGHT is disabled in userspace
  98:quantum/rgb_matrix.c **** #        define RGB_MATRIX_STARTUP_MODE RGB_MATRIX_SOLID_COLOR
  99:quantum/rgb_matrix.c **** #    endif
 100:quantum/rgb_matrix.c **** #endif
 101:quantum/rgb_matrix.c **** 
 102:quantum/rgb_matrix.c **** #if !defined(RGB_MATRIX_STARTUP_HUE)
 103:quantum/rgb_matrix.c **** #    define RGB_MATRIX_STARTUP_HUE 0
 104:quantum/rgb_matrix.c **** #endif
 105:quantum/rgb_matrix.c **** 
 106:quantum/rgb_matrix.c **** #if !defined(RGB_MATRIX_STARTUP_SAT)
 107:quantum/rgb_matrix.c **** #    define RGB_MATRIX_STARTUP_SAT UINT8_MAX
 108:quantum/rgb_matrix.c **** #endif
 109:quantum/rgb_matrix.c **** 
 110:quantum/rgb_matrix.c **** #if !defined(RGB_MATRIX_STARTUP_VAL)
 111:quantum/rgb_matrix.c **** #    define RGB_MATRIX_STARTUP_VAL RGB_MATRIX_MAXIMUM_BRIGHTNESS
 112:quantum/rgb_matrix.c **** #endif
 113:quantum/rgb_matrix.c **** 
 114:quantum/rgb_matrix.c **** #if !defined(RGB_MATRIX_STARTUP_SPD)
 115:quantum/rgb_matrix.c **** #    define RGB_MATRIX_STARTUP_SPD UINT8_MAX / 2
 116:quantum/rgb_matrix.c **** #endif
 117:quantum/rgb_matrix.c **** 
 118:quantum/rgb_matrix.c **** // globals
 119:quantum/rgb_matrix.c **** bool         g_suspend_state = false;
 120:quantum/rgb_matrix.c **** rgb_config_t rgb_matrix_config;  // TODO: would like to prefix this with g_ for global consistancy,
 121:quantum/rgb_matrix.c **** uint32_t     g_rgb_timer;
 122:quantum/rgb_matrix.c **** #ifdef RGB_MATRIX_FRAMEBUFFER_EFFECTS
 123:quantum/rgb_matrix.c **** uint8_t g_rgb_frame_buffer[MATRIX_ROWS][MATRIX_COLS] = {{0}};
 124:quantum/rgb_matrix.c **** #endif  // RGB_MATRIX_FRAMEBUFFER_EFFECTS
 125:quantum/rgb_matrix.c **** #ifdef RGB_MATRIX_KEYREACTIVE_ENABLED
 126:quantum/rgb_matrix.c **** last_hit_t g_last_hit_tracker;
 127:quantum/rgb_matrix.c **** #endif  // RGB_MATRIX_KEYREACTIVE_ENABLED
 128:quantum/rgb_matrix.c **** 
 129:quantum/rgb_matrix.c **** // internals
 130:quantum/rgb_matrix.c **** static uint8_t         rgb_last_enable   = UINT8_MAX;
 131:quantum/rgb_matrix.c **** static uint8_t         rgb_last_effect   = UINT8_MAX;
 132:quantum/rgb_matrix.c **** static effect_params_t rgb_effect_params = {0, 0xFF};
 133:quantum/rgb_matrix.c **** static rgb_task_states rgb_task_state    = SYNCING;
 134:quantum/rgb_matrix.c **** #if RGB_DISABLE_TIMEOUT > 0
 135:quantum/rgb_matrix.c **** static uint32_t rgb_anykey_timer;
 136:quantum/rgb_matrix.c **** #endif  // RGB_DISABLE_TIMEOUT > 0
 137:quantum/rgb_matrix.c **** 
 138:quantum/rgb_matrix.c **** // double buffers
 139:quantum/rgb_matrix.c **** static uint32_t rgb_timer_buffer;
 140:quantum/rgb_matrix.c **** #ifdef RGB_MATRIX_KEYREACTIVE_ENABLED
 141:quantum/rgb_matrix.c **** static last_hit_t last_hit_buffer;
 142:quantum/rgb_matrix.c **** #endif  // RGB_MATRIX_KEYREACTIVE_ENABLED
 143:quantum/rgb_matrix.c **** 
 144:quantum/rgb_matrix.c **** void eeconfig_read_rgb_matrix(void) { eeprom_read_block(&rgb_matrix_config, EECONFIG_RGB_MATRIX, si
 246              		.loc 3 144 37 is_stmt 1 view -0
 247              		.cfi_startproc
 248              		@ args = 0, pretend = 0, frame = 0
 249              		@ frame_needed = 0, uses_anonymous_args = 0
 250              		@ link register save eliminated.
 251              		.loc 3 144 39 view .LVU83
 252 0000 0822     		movs	r2, #8
 253 0002 1C21     		movs	r1, #28
 254 0004 0148     		ldr	r0, .L23
 255 0006 FFF7FEBF 		b	eeprom_read_block
 256              	.LVL28:
 257              	.L24:
 258 000a 00BF     		.align	2
 259              	.L23:
 260 000c 00000000 		.word	rgb_matrix_config
 261              		.cfi_endproc
 262              	.LFE87:
 264              		.section	.text.eeconfig_update_rgb_matrix,"ax",%progbits
 265              		.align	1
 266              		.global	eeconfig_update_rgb_matrix
 267              		.syntax unified
 268              		.thumb
 269              		.thumb_func
 270              		.fpu fpv4-sp-d16
 272              	eeconfig_update_rgb_matrix:
 273              	.LFB88:
 145:quantum/rgb_matrix.c **** 
 146:quantum/rgb_matrix.c **** void eeconfig_update_rgb_matrix(void) { eeprom_update_block(&rgb_matrix_config, EECONFIG_RGB_MATRIX
 274              		.loc 3 146 39 view -0
 275              		.cfi_startproc
 276              		@ args = 0, pretend = 0, frame = 0
 277              		@ frame_needed = 0, uses_anonymous_args = 0
 278              		@ link register save eliminated.
 279              		.loc 3 146 41 view .LVU85
 280 0000 0822     		movs	r2, #8
 281 0002 1C21     		movs	r1, #28
 282 0004 0148     		ldr	r0, .L26
 283 0006 FFF7FEBF 		b	eeprom_update_block
 284              	.LVL29:
 285              	.L27:
 286 000a 00BF     		.align	2
 287              	.L26:
 288 000c 00000000 		.word	rgb_matrix_config
 289              		.cfi_endproc
 290              	.LFE88:
 292              		.section	.text.eeconfig_update_rgb_matrix_default,"ax",%progbits
 293              		.align	1
 294              		.global	eeconfig_update_rgb_matrix_default
 295              		.syntax unified
 296              		.thumb
 297              		.thumb_func
 298              		.fpu fpv4-sp-d16
 300              	eeconfig_update_rgb_matrix_default:
 301              	.LFB89:
 147:quantum/rgb_matrix.c **** 
 148:quantum/rgb_matrix.c **** void eeconfig_update_rgb_matrix_default(void) {
 302              		.loc 3 148 47 view -0
 303              		.cfi_startproc
 304              		@ args = 0, pretend = 0, frame = 0
 305              		@ frame_needed = 0, uses_anonymous_args = 0
 306              		@ link register save eliminated.
 149:quantum/rgb_matrix.c ****     dprintf("eeconfig_update_rgb_matrix_default\n");
 307              		.loc 3 149 52 view .LVU87
 150:quantum/rgb_matrix.c ****     rgb_matrix_config.enable = 1;
 308              		.loc 3 150 5 view .LVU88
 151:quantum/rgb_matrix.c ****     rgb_matrix_config.mode   = RGB_MATRIX_STARTUP_MODE;
 309              		.loc 3 151 5 view .LVU89
 150:quantum/rgb_matrix.c ****     rgb_matrix_config.enable = 1;
 310              		.loc 3 150 30 is_stmt 0 view .LVU90
 311 0000 074B     		ldr	r3, .L29
 312 0002 1A46     		mov	r2, r3
 313 0004 0521     		movs	r1, #5
 314 0006 02F8011B 		strb	r1, [r2], #1
 152:quantum/rgb_matrix.c ****     rgb_matrix_config.hsv    = (HSV){RGB_MATRIX_STARTUP_HUE, RGB_MATRIX_STARTUP_SAT, RGB_MATRIX_STA
 315              		.loc 3 152 5 is_stmt 1 view .LVU91
 316              		.loc 3 152 30 is_stmt 0 view .LVU92
 317 000a 0649     		ldr	r1, .L29+4
 318 000c 31F8080F 		ldrh	r0, [r1, #8]!	@ unaligned
 319 0010 A3F80100 		strh	r0, [r3, #1]	@ unaligned
 320 0014 8978     		ldrb	r1, [r1, #2]	@ zero_extendqisi2
 321 0016 9170     		strb	r1, [r2, #2]
 153:quantum/rgb_matrix.c ****     rgb_matrix_config.speed  = RGB_MATRIX_STARTUP_SPD;
 322              		.loc 3 153 5 is_stmt 1 view .LVU93
 323              		.loc 3 153 30 is_stmt 0 view .LVU94
 324 0018 0022     		movs	r2, #0
 325 001a 1A71     		strb	r2, [r3, #4]
 154:quantum/rgb_matrix.c ****     eeconfig_update_rgb_matrix();
 326              		.loc 3 154 5 is_stmt 1 view .LVU95
 327 001c FFF7FEBF 		b	eeconfig_update_rgb_matrix
 328              	.LVL30:
 329              	.L30:
 330              		.align	2
 331              	.L29:
 332 0020 00000000 		.word	rgb_matrix_config
 333 0024 00000000 		.word	.LANCHOR0
 334              		.cfi_endproc
 335              	.LFE89:
 337              		.section	.text.eeconfig_debug_rgb_matrix,"ax",%progbits
 338              		.align	1
 339              		.global	eeconfig_debug_rgb_matrix
 340              		.syntax unified
 341              		.thumb
 342              		.thumb_func
 343              		.fpu fpv4-sp-d16
 345              	eeconfig_debug_rgb_matrix:
 346              	.LFB90:
 155:quantum/rgb_matrix.c **** }
 156:quantum/rgb_matrix.c **** 
 157:quantum/rgb_matrix.c **** void eeconfig_debug_rgb_matrix(void) {
 347              		.loc 3 157 38 view -0
 348              		.cfi_startproc
 349              		@ args = 0, pretend = 0, frame = 0
 350              		@ frame_needed = 0, uses_anonymous_args = 0
 351              		@ link register save eliminated.
 158:quantum/rgb_matrix.c ****     dprintf("rgb_matrix_config eprom\n");
 352              		.loc 3 158 41 view .LVU97
 159:quantum/rgb_matrix.c ****     dprintf("rgb_matrix_config.enable = %d\n", rgb_matrix_config.enable);
 353              		.loc 3 159 73 view .LVU98
 160:quantum/rgb_matrix.c ****     dprintf("rgb_matrix_config.mode = %d\n", rgb_matrix_config.mode);
 354              		.loc 3 160 69 view .LVU99
 161:quantum/rgb_matrix.c ****     dprintf("rgb_matrix_config.hsv.h = %d\n", rgb_matrix_config.hsv.h);
 355              		.loc 3 161 71 view .LVU100
 162:quantum/rgb_matrix.c ****     dprintf("rgb_matrix_config.hsv.s = %d\n", rgb_matrix_config.hsv.s);
 356              		.loc 3 162 71 view .LVU101
 163:quantum/rgb_matrix.c ****     dprintf("rgb_matrix_config.hsv.v = %d\n", rgb_matrix_config.hsv.v);
 357              		.loc 3 163 71 view .LVU102
 164:quantum/rgb_matrix.c ****     dprintf("rgb_matrix_config.speed = %d\n", rgb_matrix_config.speed);
 358              		.loc 3 164 71 view .LVU103
 165:quantum/rgb_matrix.c **** }
 359              		.loc 3 165 1 is_stmt 0 view .LVU104
 360 0000 7047     		bx	lr
 361              		.cfi_endproc
 362              	.LFE90:
 364              		.section	.text.rgb_matrix_map_row_column_to_led_kb,"ax",%progbits
 365              		.align	1
 366              		.weak	rgb_matrix_map_row_column_to_led_kb
 367              		.syntax unified
 368              		.thumb
 369              		.thumb_func
 370              		.fpu fpv4-sp-d16
 372              	rgb_matrix_map_row_column_to_led_kb:
 373              	.LVL31:
 374              	.LFB91:
 166:quantum/rgb_matrix.c **** 
 167:quantum/rgb_matrix.c **** __attribute__((weak)) uint8_t rgb_matrix_map_row_column_to_led_kb(uint8_t row, uint8_t column, uint
 375              		.loc 3 167 112 is_stmt 1 view -0
 376              		.cfi_startproc
 377              		@ args = 0, pretend = 0, frame = 0
 378              		@ frame_needed = 0, uses_anonymous_args = 0
 379              		@ link register save eliminated.
 380              		.loc 3 167 114 view .LVU106
 381              		.loc 3 167 1 is_stmt 0 view .LVU107
 382 0000 0020     		movs	r0, #0
 383              	.LVL32:
 384              		.loc 3 167 1 view .LVU108
 385 0002 7047     		bx	lr
 386              		.cfi_endproc
 387              	.LFE91:
 389              		.section	.text.rgb_matrix_map_row_column_to_led,"ax",%progbits
 390              		.align	1
 391              		.global	rgb_matrix_map_row_column_to_led
 392              		.syntax unified
 393              		.thumb
 394              		.thumb_func
 395              		.fpu fpv4-sp-d16
 397              	rgb_matrix_map_row_column_to_led:
 398              	.LVL33:
 399              	.LFB92:
 168:quantum/rgb_matrix.c **** 
 169:quantum/rgb_matrix.c **** uint8_t rgb_matrix_map_row_column_to_led(uint8_t row, uint8_t column, uint8_t *led_i) {
 400              		.loc 3 169 87 is_stmt 1 view -0
 401              		.cfi_startproc
 402              		@ args = 0, pretend = 0, frame = 0
 403              		@ frame_needed = 0, uses_anonymous_args = 0
 170:quantum/rgb_matrix.c ****     uint8_t led_count = rgb_matrix_map_row_column_to_led_kb(row, column, led_i);
 404              		.loc 3 170 5 view .LVU110
 169:quantum/rgb_matrix.c ****     uint8_t led_count = rgb_matrix_map_row_column_to_led_kb(row, column, led_i);
 405              		.loc 3 169 87 is_stmt 0 view .LVU111
 406 0000 70B5     		push	{r4, r5, r6, lr}
 407              		.cfi_def_cfa_offset 16
 408              		.cfi_offset 4, -16
 409              		.cfi_offset 5, -12
 410              		.cfi_offset 6, -8
 411              		.cfi_offset 14, -4
 169:quantum/rgb_matrix.c ****     uint8_t led_count = rgb_matrix_map_row_column_to_led_kb(row, column, led_i);
 412              		.loc 3 169 87 view .LVU112
 413 0002 0646     		mov	r6, r0
 414 0004 0D46     		mov	r5, r1
 415 0006 1446     		mov	r4, r2
 416              		.loc 3 170 25 view .LVU113
 417 0008 FFF7FEFF 		bl	rgb_matrix_map_row_column_to_led_kb
 418              	.LVL34:
 171:quantum/rgb_matrix.c ****     uint8_t led_index = g_led_config.matrix_co[row][column];
 419              		.loc 3 171 5 is_stmt 1 view .LVU114
 420              		.loc 3 171 13 is_stmt 0 view .LVU115
 421 000c 044B     		ldr	r3, .L38
 422 000e 03EBC603 		add	r3, r3, r6, lsl #3
 423 0012 5B5D     		ldrb	r3, [r3, r5]	@ zero_extendqisi2
 424              	.LVL35:
 172:quantum/rgb_matrix.c ****     if (led_index != NO_LED) {
 425              		.loc 3 172 5 is_stmt 1 view .LVU116
 426              		.loc 3 172 8 is_stmt 0 view .LVU117
 427 0014 FF2B     		cmp	r3, #255
 173:quantum/rgb_matrix.c ****         led_i[led_count] = led_index;
 428              		.loc 3 173 9 is_stmt 1 view .LVU118
 429              		.loc 3 173 26 is_stmt 0 view .LVU119
 430 0016 1EBF     		ittt	ne
 431 0018 2354     		strbne	r3, [r4, r0]
 174:quantum/rgb_matrix.c ****         led_count++;
 432              		.loc 3 174 9 is_stmt 1 view .LVU120
 433              		.loc 3 174 18 is_stmt 0 view .LVU121
 434 001a 0130     		addne	r0, r0, #1
 435              	.LVL36:
 436              		.loc 3 174 18 view .LVU122
 437 001c C0B2     		uxtbne	r0, r0
 438              	.LVL37:
 175:quantum/rgb_matrix.c ****     }
 176:quantum/rgb_matrix.c ****     return led_count;
 439              		.loc 3 176 5 is_stmt 1 view .LVU123
 177:quantum/rgb_matrix.c **** }
 440              		.loc 3 177 1 is_stmt 0 view .LVU124
 441 001e 70BD     		pop	{r4, r5, r6, pc}
 442              	.LVL38:
 443              	.L39:
 444              		.loc 3 177 1 view .LVU125
 445              		.align	2
 446              	.L38:
 447 0020 00000000 		.word	g_led_config
 448              		.cfi_endproc
 449              	.LFE92:
 451              		.section	.text.rgb_matrix_update_pwm_buffers,"ax",%progbits
 452              		.align	1
 453              		.global	rgb_matrix_update_pwm_buffers
 454              		.syntax unified
 455              		.thumb
 456              		.thumb_func
 457              		.fpu fpv4-sp-d16
 459              	rgb_matrix_update_pwm_buffers:
 460              	.LFB93:
 178:quantum/rgb_matrix.c **** 
 179:quantum/rgb_matrix.c **** void rgb_matrix_update_pwm_buffers(void) { rgb_matrix_driver.flush(); }
 461              		.loc 3 179 42 is_stmt 1 view -0
 462              		.cfi_startproc
 463              		@ args = 0, pretend = 0, frame = 0
 464              		@ frame_needed = 0, uses_anonymous_args = 0
 465              		@ link register save eliminated.
 466              		.loc 3 179 44 view .LVU127
 467              		.loc 3 179 61 is_stmt 0 view .LVU128
 468 0000 014B     		ldr	r3, .L41
 469              		.loc 3 179 44 view .LVU129
 470 0002 DB68     		ldr	r3, [r3, #12]
 471 0004 1847     		bx	r3	@ indirect register sibling call
 472              	.LVL39:
 473              	.L42:
 474 0006 00BF     		.align	2
 475              	.L41:
 476 0008 00000000 		.word	rgb_matrix_driver
 477              		.cfi_endproc
 478              	.LFE93:
 480              		.section	.text.rgb_matrix_set_color,"ax",%progbits
 481              		.align	1
 482              		.global	rgb_matrix_set_color
 483              		.syntax unified
 484              		.thumb
 485              		.thumb_func
 486              		.fpu fpv4-sp-d16
 488              	rgb_matrix_set_color:
 489              	.LVL40:
 490              	.LFB94:
 180:quantum/rgb_matrix.c **** 
 181:quantum/rgb_matrix.c **** void rgb_matrix_set_color(int index, uint8_t red, uint8_t green, uint8_t blue) { rgb_matrix_driver.
 491              		.loc 3 181 80 is_stmt 1 view -0
 492              		.cfi_startproc
 493              		@ args = 0, pretend = 0, frame = 0
 494              		@ frame_needed = 0, uses_anonymous_args = 0
 495              		@ link register save eliminated.
 496              		.loc 3 181 82 view .LVU131
 497              		.loc 3 181 80 is_stmt 0 view .LVU132
 498 0000 10B4     		push	{r4}
 499              		.cfi_def_cfa_offset 4
 500              		.cfi_offset 4, -4
 501              		.loc 3 181 99 view .LVU133
 502 0002 034C     		ldr	r4, .L44
 503              		.loc 3 181 82 view .LVU134
 504 0004 6468     		ldr	r4, [r4, #4]
 505 0006 A446     		mov	ip, r4
 506              		.loc 3 181 1 view .LVU135
 507 0008 5DF8044B 		ldr	r4, [sp], #4
 508              		.cfi_restore 4
 509              		.cfi_def_cfa_offset 0
 510              		.loc 3 181 82 view .LVU136
 511 000c 6047     		bx	ip	@ indirect register sibling call
 512              	.LVL41:
 513              	.L45:
 514              		.loc 3 181 82 view .LVU137
 515 000e 00BF     		.align	2
 516              	.L44:
 517 0010 00000000 		.word	rgb_matrix_driver
 518              		.cfi_endproc
 519              	.LFE94:
 521              		.section	.text.effect_runner_dx_dy_dist,"ax",%progbits
 522              		.align	1
 523              		.global	effect_runner_dx_dy_dist
 524              		.syntax unified
 525              		.thumb
 526              		.thumb_func
 527              		.fpu fpv4-sp-d16
 529              	effect_runner_dx_dy_dist:
 530              	.LVL42:
 531              	.LFB80:
 532              		.file 4 "quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h"
   1:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h **** #pragma once
   2:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h **** 
   3:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h **** typedef HSV (*dx_dy_dist_f)(HSV hsv, int16_t dx, int16_t dy, uint8_t dist, uint8_t time);
   4:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h **** 
   5:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h **** bool effect_runner_dx_dy_dist(effect_params_t* params, dx_dy_dist_f effect_func) {
 533              		.loc 4 5 82 is_stmt 1 view -0
 534              		.cfi_startproc
 535              		@ args = 0, pretend = 0, frame = 24
 536              		@ frame_needed = 0, uses_anonymous_args = 0
   6:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
 537              		.loc 4 6 5 view .LVU139
   5:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
 538              		.loc 4 5 82 is_stmt 0 view .LVU140
 539 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 540              		.cfi_def_cfa_offset 36
 541              		.cfi_offset 4, -36
 542              		.cfi_offset 5, -32
 543              		.cfi_offset 6, -28
 544              		.cfi_offset 7, -24
 545              		.cfi_offset 8, -20
 546              		.cfi_offset 9, -16
 547              		.cfi_offset 10, -12
 548              		.cfi_offset 11, -8
 549              		.cfi_offset 14, -4
   7:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h **** 
   8:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****     uint8_t time = scale16by8(g_rgb_timer, rgb_matrix_config.speed / 2);
 550              		.loc 4 8 61 view .LVU141
 551 0004 344D     		ldr	r5, .L51
 552              	.LBB43:
 553              	.LBB44:
 554              		.file 5 "./lib/lib8tion/scale8.h"
   1:./lib/lib8tion/scale8.h **** #ifndef __INC_LIB8TION_SCALE_H
   2:./lib/lib8tion/scale8.h **** #define __INC_LIB8TION_SCALE_H
   3:./lib/lib8tion/scale8.h **** 
   4:./lib/lib8tion/scale8.h **** ///@ingroup lib8tion
   5:./lib/lib8tion/scale8.h **** 
   6:./lib/lib8tion/scale8.h **** ///@defgroup Scaling Scaling functions
   7:./lib/lib8tion/scale8.h **** /// Fast, efficient 8-bit scaling functions specifically
   8:./lib/lib8tion/scale8.h **** /// designed for high-performance LED programming.
   9:./lib/lib8tion/scale8.h **** ///
  10:./lib/lib8tion/scale8.h **** /// Because of the AVR(Arduino) and ARM assembly language
  11:./lib/lib8tion/scale8.h **** /// implementations provided, using these functions often
  12:./lib/lib8tion/scale8.h **** /// results in smaller and faster code than the equivalent
  13:./lib/lib8tion/scale8.h **** /// program using plain "C" arithmetic and logic.
  14:./lib/lib8tion/scale8.h **** ///@{
  15:./lib/lib8tion/scale8.h **** 
  16:./lib/lib8tion/scale8.h **** ///  scale one byte by a second one, which is treated as
  17:./lib/lib8tion/scale8.h **** ///  the numerator of a fraction whose denominator is 256
  18:./lib/lib8tion/scale8.h **** ///  In other words, it computes i * (scale / 256)
  19:./lib/lib8tion/scale8.h **** ///  4 clocks AVR with MUL, 2 clocks ARM
  20:./lib/lib8tion/scale8.h **** LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
  21:./lib/lib8tion/scale8.h **** {
  22:./lib/lib8tion/scale8.h **** #if SCALE8_C == 1
  23:./lib/lib8tion/scale8.h **** #if (FASTLED_SCALE8_FIXED == 1)
  24:./lib/lib8tion/scale8.h ****     return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
  25:./lib/lib8tion/scale8.h **** #else
  26:./lib/lib8tion/scale8.h ****     return ((uint16_t)i * (uint16_t)(scale) ) >> 8;
  27:./lib/lib8tion/scale8.h **** #endif
  28:./lib/lib8tion/scale8.h **** #elif SCALE8_AVRASM == 1
  29:./lib/lib8tion/scale8.h **** #if defined(LIB8_ATTINY)
  30:./lib/lib8tion/scale8.h **** #if (FASTLED_SCALE8_FIXED == 1)
  31:./lib/lib8tion/scale8.h ****     uint8_t work=i;
  32:./lib/lib8tion/scale8.h **** #else
  33:./lib/lib8tion/scale8.h ****     uint8_t work=0;
  34:./lib/lib8tion/scale8.h **** #endif
  35:./lib/lib8tion/scale8.h ****     uint8_t cnt=0x80;
  36:./lib/lib8tion/scale8.h ****     asm volatile(
  37:./lib/lib8tion/scale8.h **** #if (FASTLED_SCALE8_FIXED == 1)
  38:./lib/lib8tion/scale8.h ****         "  inc %[scale]                 \n\t"
  39:./lib/lib8tion/scale8.h ****         "  breq DONE_%=                 \n\t"
  40:./lib/lib8tion/scale8.h ****         "  clr %[work]                  \n\t"
  41:./lib/lib8tion/scale8.h **** #endif
  42:./lib/lib8tion/scale8.h ****         "LOOP_%=:                       \n\t"
  43:./lib/lib8tion/scale8.h ****         /*"  sbrc %[scale], 0             \n\t"
  44:./lib/lib8tion/scale8.h ****         "  add %[work], %[i]            \n\t"
  45:./lib/lib8tion/scale8.h ****         "  ror %[work]                  \n\t"
  46:./lib/lib8tion/scale8.h ****         "  lsr %[scale]                 \n\t"
  47:./lib/lib8tion/scale8.h ****         "  clc                          \n\t"*/
  48:./lib/lib8tion/scale8.h ****         "  sbrc %[scale], 0             \n\t"
  49:./lib/lib8tion/scale8.h ****         "  add %[work], %[i]            \n\t"
  50:./lib/lib8tion/scale8.h ****         "  ror %[work]                  \n\t"
  51:./lib/lib8tion/scale8.h ****         "  lsr %[scale]                 \n\t"
  52:./lib/lib8tion/scale8.h ****         "  lsr %[cnt]                   \n\t"
  53:./lib/lib8tion/scale8.h ****         "brcc LOOP_%=                   \n\t"
  54:./lib/lib8tion/scale8.h ****         "DONE_%=:                       \n\t"
  55:./lib/lib8tion/scale8.h ****         : [work] "+r" (work), [cnt] "+r" (cnt)
  56:./lib/lib8tion/scale8.h ****         : [scale] "r" (scale), [i] "r" (i)
  57:./lib/lib8tion/scale8.h ****         :
  58:./lib/lib8tion/scale8.h ****       );
  59:./lib/lib8tion/scale8.h ****     return work;
  60:./lib/lib8tion/scale8.h **** #else
  61:./lib/lib8tion/scale8.h ****     asm volatile(
  62:./lib/lib8tion/scale8.h **** #if (FASTLED_SCALE8_FIXED==1)
  63:./lib/lib8tion/scale8.h ****         // Multiply 8-bit i * 8-bit scale, giving 16-bit r1,r0
  64:./lib/lib8tion/scale8.h ****         "mul %0, %1          \n\t"
  65:./lib/lib8tion/scale8.h ****         // Add i to r0, possibly setting the carry flag
  66:./lib/lib8tion/scale8.h ****         "add r0, %0         \n\t"
  67:./lib/lib8tion/scale8.h ****         // load the immediate 0 into i (note, this does _not_ touch any flags)
  68:./lib/lib8tion/scale8.h ****         "ldi %0, 0x00       \n\t"
  69:./lib/lib8tion/scale8.h ****         // walk and chew gum at the same time
  70:./lib/lib8tion/scale8.h ****         "adc %0, r1          \n\t"
  71:./lib/lib8tion/scale8.h **** #else
  72:./lib/lib8tion/scale8.h ****          /* Multiply 8-bit i * 8-bit scale, giving 16-bit r1,r0 */
  73:./lib/lib8tion/scale8.h ****          "mul %0, %1          \n\t"
  74:./lib/lib8tion/scale8.h ****          /* Move the high 8-bits of the product (r1) back to i */
  75:./lib/lib8tion/scale8.h ****          "mov %0, r1          \n\t"
  76:./lib/lib8tion/scale8.h ****          /* Restore r1 to "0"; it's expected to always be that */
  77:./lib/lib8tion/scale8.h **** #endif
  78:./lib/lib8tion/scale8.h ****          "clr __zero_reg__    \n\t"
  79:./lib/lib8tion/scale8.h **** 
  80:./lib/lib8tion/scale8.h ****          : "+a" (i)      /* writes to i */
  81:./lib/lib8tion/scale8.h ****          : "a"  (scale)  /* uses scale */
  82:./lib/lib8tion/scale8.h ****          : "r0", "r1"    /* clobbers r0, r1 */ );
  83:./lib/lib8tion/scale8.h **** 
  84:./lib/lib8tion/scale8.h ****     /* Return the result */
  85:./lib/lib8tion/scale8.h ****     return i;
  86:./lib/lib8tion/scale8.h **** #endif
  87:./lib/lib8tion/scale8.h **** #else
  88:./lib/lib8tion/scale8.h **** #error "No implementation for scale8 available."
  89:./lib/lib8tion/scale8.h **** #endif
  90:./lib/lib8tion/scale8.h **** }
  91:./lib/lib8tion/scale8.h **** 
  92:./lib/lib8tion/scale8.h **** 
  93:./lib/lib8tion/scale8.h **** ///  The "video" version of scale8 guarantees that the output will
  94:./lib/lib8tion/scale8.h **** ///  be only be zero if one or both of the inputs are zero.  If both
  95:./lib/lib8tion/scale8.h **** ///  inputs are non-zero, the output is guaranteed to be non-zero.
  96:./lib/lib8tion/scale8.h **** ///  This makes for better 'video'/LED dimming, at the cost of
  97:./lib/lib8tion/scale8.h **** ///  several additional cycles.
  98:./lib/lib8tion/scale8.h **** LIB8STATIC_ALWAYS_INLINE uint8_t scale8_video( uint8_t i, fract8 scale)
  99:./lib/lib8tion/scale8.h **** {
 100:./lib/lib8tion/scale8.h **** #if SCALE8_C == 1 || defined(LIB8_ATTINY)
 101:./lib/lib8tion/scale8.h ****     uint8_t j = (((int)i * (int)scale) >> 8) + ((i&&scale)?1:0);
 102:./lib/lib8tion/scale8.h ****     // uint8_t nonzeroscale = (scale != 0) ? 1 : 0;
 103:./lib/lib8tion/scale8.h ****     // uint8_t j = (i == 0) ? 0 : (((int)i * (int)(scale) ) >> 8) + nonzeroscale;
 104:./lib/lib8tion/scale8.h ****     return j;
 105:./lib/lib8tion/scale8.h **** #elif SCALE8_AVRASM == 1
 106:./lib/lib8tion/scale8.h ****     uint8_t j=0;
 107:./lib/lib8tion/scale8.h ****     asm volatile(
 108:./lib/lib8tion/scale8.h ****         "  tst %[i]\n\t"
 109:./lib/lib8tion/scale8.h ****         "  breq L_%=\n\t"
 110:./lib/lib8tion/scale8.h ****         "  mul %[i], %[scale]\n\t"
 111:./lib/lib8tion/scale8.h ****         "  mov %[j], r1\n\t"
 112:./lib/lib8tion/scale8.h ****         "  clr __zero_reg__\n\t"
 113:./lib/lib8tion/scale8.h ****         "  cpse %[scale], r1\n\t"
 114:./lib/lib8tion/scale8.h ****         "  subi %[j], 0xFF\n\t"
 115:./lib/lib8tion/scale8.h ****         "L_%=: \n\t"
 116:./lib/lib8tion/scale8.h ****         : [j] "+a" (j)
 117:./lib/lib8tion/scale8.h ****         : [i] "a" (i), [scale] "a" (scale)
 118:./lib/lib8tion/scale8.h ****         : "r0", "r1");
 119:./lib/lib8tion/scale8.h **** 
 120:./lib/lib8tion/scale8.h ****     return j;
 121:./lib/lib8tion/scale8.h ****     // uint8_t nonzeroscale = (scale != 0) ? 1 : 0;
 122:./lib/lib8tion/scale8.h ****     // asm volatile(
 123:./lib/lib8tion/scale8.h ****     //      "      tst %0           \n"
 124:./lib/lib8tion/scale8.h ****     //      "      breq L_%=        \n"
 125:./lib/lib8tion/scale8.h ****     //      "      mul %0, %1       \n"
 126:./lib/lib8tion/scale8.h ****     //      "      mov %0, r1       \n"
 127:./lib/lib8tion/scale8.h ****     //      "      add %0, %2       \n"
 128:./lib/lib8tion/scale8.h ****     //      "      clr __zero_reg__ \n"
 129:./lib/lib8tion/scale8.h ****     //      "L_%=:                  \n"
 130:./lib/lib8tion/scale8.h **** 
 131:./lib/lib8tion/scale8.h ****     //      : "+a" (i)
 132:./lib/lib8tion/scale8.h ****     //      : "a" (scale), "a" (nonzeroscale)
 133:./lib/lib8tion/scale8.h ****     //      : "r0", "r1");
 134:./lib/lib8tion/scale8.h **** 
 135:./lib/lib8tion/scale8.h ****     // // Return the result
 136:./lib/lib8tion/scale8.h ****     // return i;
 137:./lib/lib8tion/scale8.h **** #else
 138:./lib/lib8tion/scale8.h **** #error "No implementation for scale8_video available."
 139:./lib/lib8tion/scale8.h **** #endif
 140:./lib/lib8tion/scale8.h **** }
 141:./lib/lib8tion/scale8.h **** 
 142:./lib/lib8tion/scale8.h **** 
 143:./lib/lib8tion/scale8.h **** /// This version of scale8 does not clean up the R1 register on AVR
 144:./lib/lib8tion/scale8.h **** /// If you are doing several 'scale8's in a row, use this, and
 145:./lib/lib8tion/scale8.h **** /// then explicitly call cleanup_R1.
 146:./lib/lib8tion/scale8.h **** LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
 147:./lib/lib8tion/scale8.h **** {
 148:./lib/lib8tion/scale8.h **** #if SCALE8_C == 1
 149:./lib/lib8tion/scale8.h **** #if (FASTLED_SCALE8_FIXED == 1)
 150:./lib/lib8tion/scale8.h ****     return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
 151:./lib/lib8tion/scale8.h **** #else
 152:./lib/lib8tion/scale8.h ****     return ((int)i * (int)(scale) ) >> 8;
 153:./lib/lib8tion/scale8.h **** #endif
 154:./lib/lib8tion/scale8.h **** #elif SCALE8_AVRASM == 1
 155:./lib/lib8tion/scale8.h ****     asm volatile(
 156:./lib/lib8tion/scale8.h ****       #if (FASTLED_SCALE8_FIXED==1)
 157:./lib/lib8tion/scale8.h ****               // Multiply 8-bit i * 8-bit scale, giving 16-bit r1,r0
 158:./lib/lib8tion/scale8.h ****               "mul %0, %1          \n\t"
 159:./lib/lib8tion/scale8.h ****               // Add i to r0, possibly setting the carry flag
 160:./lib/lib8tion/scale8.h ****               "add r0, %0         \n\t"
 161:./lib/lib8tion/scale8.h ****               // load the immediate 0 into i (note, this does _not_ touch any flags)
 162:./lib/lib8tion/scale8.h ****               "ldi %0, 0x00       \n\t"
 163:./lib/lib8tion/scale8.h ****               // walk and chew gum at the same time
 164:./lib/lib8tion/scale8.h ****               "adc %0, r1          \n\t"
 165:./lib/lib8tion/scale8.h ****       #else
 166:./lib/lib8tion/scale8.h ****          /* Multiply 8-bit i * 8-bit scale, giving 16-bit r1,r0 */
 167:./lib/lib8tion/scale8.h ****          "mul %0, %1    \n\t"
 168:./lib/lib8tion/scale8.h ****          /* Move the high 8-bits of the product (r1) back to i */
 169:./lib/lib8tion/scale8.h ****          "mov %0, r1    \n\t"
 170:./lib/lib8tion/scale8.h ****       #endif
 171:./lib/lib8tion/scale8.h ****          /* R1 IS LEFT DIRTY HERE; YOU MUST ZERO IT OUT YOURSELF  */
 172:./lib/lib8tion/scale8.h ****          /* "clr __zero_reg__    \n\t" */
 173:./lib/lib8tion/scale8.h **** 
 174:./lib/lib8tion/scale8.h ****          : "+a" (i)      /* writes to i */
 175:./lib/lib8tion/scale8.h ****          : "a"  (scale)  /* uses scale */
 176:./lib/lib8tion/scale8.h ****          : "r0", "r1"    /* clobbers r0, r1 */ );
 177:./lib/lib8tion/scale8.h **** 
 178:./lib/lib8tion/scale8.h ****     // Return the result
 179:./lib/lib8tion/scale8.h ****     return i;
 180:./lib/lib8tion/scale8.h **** #else
 181:./lib/lib8tion/scale8.h **** #error "No implementation for scale8_LEAVING_R1_DIRTY available."
 182:./lib/lib8tion/scale8.h **** #endif
 183:./lib/lib8tion/scale8.h **** }
 184:./lib/lib8tion/scale8.h **** 
 185:./lib/lib8tion/scale8.h **** 
 186:./lib/lib8tion/scale8.h **** /// This version of scale8_video does not clean up the R1 register on AVR
 187:./lib/lib8tion/scale8.h **** /// If you are doing several 'scale8_video's in a row, use this, and
 188:./lib/lib8tion/scale8.h **** /// then explicitly call cleanup_R1.
 189:./lib/lib8tion/scale8.h **** LIB8STATIC_ALWAYS_INLINE uint8_t scale8_video_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
 190:./lib/lib8tion/scale8.h **** {
 191:./lib/lib8tion/scale8.h **** #if SCALE8_C == 1 || defined(LIB8_ATTINY)
 192:./lib/lib8tion/scale8.h ****     uint8_t j = (((int)i * (int)scale) >> 8) + ((i&&scale)?1:0);
 193:./lib/lib8tion/scale8.h ****     // uint8_t nonzeroscale = (scale != 0) ? 1 : 0;
 194:./lib/lib8tion/scale8.h ****     // uint8_t j = (i == 0) ? 0 : (((int)i * (int)(scale) ) >> 8) + nonzeroscale;
 195:./lib/lib8tion/scale8.h ****     return j;
 196:./lib/lib8tion/scale8.h **** #elif SCALE8_AVRASM == 1
 197:./lib/lib8tion/scale8.h ****     uint8_t j=0;
 198:./lib/lib8tion/scale8.h ****     asm volatile(
 199:./lib/lib8tion/scale8.h ****         "  tst %[i]\n\t"
 200:./lib/lib8tion/scale8.h ****         "  breq L_%=\n\t"
 201:./lib/lib8tion/scale8.h ****         "  mul %[i], %[scale]\n\t"
 202:./lib/lib8tion/scale8.h ****         "  mov %[j], r1\n\t"
 203:./lib/lib8tion/scale8.h ****         "  breq L_%=\n\t"
 204:./lib/lib8tion/scale8.h ****         "  subi %[j], 0xFF\n\t"
 205:./lib/lib8tion/scale8.h ****         "L_%=: \n\t"
 206:./lib/lib8tion/scale8.h ****         : [j] "+a" (j)
 207:./lib/lib8tion/scale8.h ****         : [i] "a" (i), [scale] "a" (scale)
 208:./lib/lib8tion/scale8.h ****         : "r0", "r1");
 209:./lib/lib8tion/scale8.h **** 
 210:./lib/lib8tion/scale8.h ****     return j;
 211:./lib/lib8tion/scale8.h ****     // uint8_t nonzeroscale = (scale != 0) ? 1 : 0;
 212:./lib/lib8tion/scale8.h ****     // asm volatile(
 213:./lib/lib8tion/scale8.h ****     //      "      tst %0           \n"
 214:./lib/lib8tion/scale8.h ****     //      "      breq L_%=        \n"
 215:./lib/lib8tion/scale8.h ****     //      "      mul %0, %1       \n"
 216:./lib/lib8tion/scale8.h ****     //      "      mov %0, r1       \n"
 217:./lib/lib8tion/scale8.h ****     //      "      add %0, %2       \n"
 218:./lib/lib8tion/scale8.h ****     //      "      clr __zero_reg__ \n"
 219:./lib/lib8tion/scale8.h ****     //      "L_%=:                  \n"
 220:./lib/lib8tion/scale8.h **** 
 221:./lib/lib8tion/scale8.h ****     //      : "+a" (i)
 222:./lib/lib8tion/scale8.h ****     //      : "a" (scale), "a" (nonzeroscale)
 223:./lib/lib8tion/scale8.h ****     //      : "r0", "r1");
 224:./lib/lib8tion/scale8.h **** 
 225:./lib/lib8tion/scale8.h ****     // // Return the result
 226:./lib/lib8tion/scale8.h ****     // return i;
 227:./lib/lib8tion/scale8.h **** #else
 228:./lib/lib8tion/scale8.h **** #error "No implementation for scale8_video_LEAVING_R1_DIRTY available."
 229:./lib/lib8tion/scale8.h **** #endif
 230:./lib/lib8tion/scale8.h **** }
 231:./lib/lib8tion/scale8.h **** 
 232:./lib/lib8tion/scale8.h **** /// Clean up the r1 register after a series of *LEAVING_R1_DIRTY calls
 233:./lib/lib8tion/scale8.h **** LIB8STATIC_ALWAYS_INLINE void cleanup_R1(void)
 234:./lib/lib8tion/scale8.h **** {
 235:./lib/lib8tion/scale8.h **** #if CLEANUP_R1_AVRASM == 1
 236:./lib/lib8tion/scale8.h ****     // Restore r1 to "0"; it's expected to always be that
 237:./lib/lib8tion/scale8.h ****     asm volatile( "clr __zero_reg__  \n\t" : : : "r1" );
 238:./lib/lib8tion/scale8.h **** #endif
 239:./lib/lib8tion/scale8.h **** }
 240:./lib/lib8tion/scale8.h **** 
 241:./lib/lib8tion/scale8.h **** 
 242:./lib/lib8tion/scale8.h **** /// scale a 16-bit unsigned value by an 8-bit value,
 243:./lib/lib8tion/scale8.h **** ///         considered as numerator of a fraction whose denominator
 244:./lib/lib8tion/scale8.h **** ///         is 256. In other words, it computes i * (scale / 256)
 245:./lib/lib8tion/scale8.h **** 
 246:./lib/lib8tion/scale8.h **** LIB8STATIC_ALWAYS_INLINE uint16_t scale16by8( uint16_t i, fract8 scale )
 247:./lib/lib8tion/scale8.h **** {
 248:./lib/lib8tion/scale8.h **** #if SCALE16BY8_C == 1
 249:./lib/lib8tion/scale8.h ****     uint16_t result;
 250:./lib/lib8tion/scale8.h **** #if FASTLED_SCALE8_FIXED == 1
 251:./lib/lib8tion/scale8.h ****     result = (i * (1+((uint16_t)scale))) >> 8;
 252:./lib/lib8tion/scale8.h **** #else
 253:./lib/lib8tion/scale8.h ****     result = (i * scale) / 256;
 555              		.loc 5 253 17 view .LVU142
 556 0006 354A     		ldr	r2, .L51+4
 557              	.LBE44:
 558              	.LBE43:
 559              		.loc 4 8 20 view .LVU143
 560 0008 2E79     		ldrb	r6, [r5, #4]	@ zero_extendqisi2
   6:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h **** 
 561              		.loc 4 6 5 view .LVU144
 562 000a 0478     		ldrb	r4, [r0]	@ zero_extendqisi2
 563              	.LBB48:
 564              	.LBB45:
 565              		.loc 5 253 17 view .LVU145
 566 000c 7308     		lsrs	r3, r6, #1
 567 000e 1688     		ldrh	r6, [r2]
 568              	.LBE45:
 569              	.LBE48:
   6:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h **** 
 570              		.loc 4 6 5 view .LVU146
 571 0010 C4EB0414 		rsb	r4, r4, r4, lsl #4
   5:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
 572              		.loc 4 5 82 view .LVU147
 573 0014 89B0     		sub	sp, sp, #36
 574              		.cfi_def_cfa_offset 72
   6:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h **** 
 575              		.loc 4 6 5 view .LVU148
 576 0016 E4B2     		uxtb	r4, r4
 577              	.LVL43:
   6:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h **** 
 578              		.loc 4 6 5 is_stmt 1 view .LVU149
 579              	.LBB49:
 580              	.LBB46:
 581              		.loc 5 253 17 is_stmt 0 view .LVU150
 582 0018 5E43     		muls	r6, r3, r6
 583              	.LBE46:
 584              	.LBE49:
 585              		.loc 4 8 13 view .LVU151
 586 001a C6F30723 		ubfx	r3, r6, #8, #8
   6:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h **** 
 587              		.loc 4 6 5 view .LVU152
 588 001e 04F10F07 		add	r7, r4, #15
 589 0022 FFB2     		uxtb	r7, r7
 590              	.LVL44:
   6:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h **** 
 591              		.loc 4 6 5 is_stmt 1 view .LVU153
 592              		.loc 4 8 13 is_stmt 0 view .LVU154
 593 0024 0293     		str	r3, [sp, #8]
 594 0026 2E4B     		ldr	r3, .L51+8
   5:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
 595              		.loc 4 5 82 view .LVU155
 596 0028 0391     		str	r1, [sp, #12]
 597 002a 772F     		cmp	r7, #119
 598 002c BB46     		mov	fp, r7
 599 002e 8246     		mov	r10, r0
 600 0030 28BF     		it	cs
 601 0032 4FF0770B 		movcs	fp, #119
 602              	.LVL45:
   6:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h **** 
 603              		.loc 4 6 44 is_stmt 1 view .LVU156
 604              		.loc 4 8 5 view .LVU157
 605              	.LBB50:
 606              	.LBI43:
 246:./lib/lib8tion/scale8.h **** {
 607              		.loc 5 246 35 view .LVU158
 608              	.LBB47:
 249:./lib/lib8tion/scale8.h **** #if FASTLED_SCALE8_FIXED == 1
 609              		.loc 5 249 5 view .LVU159
 610              		.loc 5 253 5 view .LVU160
 254:./lib/lib8tion/scale8.h **** #endif
 255:./lib/lib8tion/scale8.h ****     return result;
 611              		.loc 5 255 5 view .LVU161
 612              		.loc 5 255 5 is_stmt 0 view .LVU162
 613              	.LBE47:
 614              	.LBE50:
   9:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****     for (uint8_t i = led_min; i < led_max; i++) {
 615              		.loc 4 9 5 is_stmt 1 view .LVU163
 616              	.LBB51:
 617              		.loc 4 9 10 view .LVU164
 618              		.loc 4 9 10 is_stmt 0 view .LVU165
 619 0036 03EB4408 		add	r8, r3, r4, lsl #1
 620              	.LBB52:
  10:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****         RGB_MATRIX_TEST_LED_FLAGS();
 621              		.loc 4 10 9 view .LVU166
 622 003a 03F5A379 		add	r9, r3, #326
 623              	.LVL46:
 624              	.L47:
 625              		.loc 4 10 9 view .LVU167
 626              	.LBE52:
   9:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****     for (uint8_t i = led_min; i < led_max; i++) {
 627              		.loc 4 9 5 discriminator 1 view .LVU168
 628 003e E3B2     		uxtb	r3, r4
 629 0040 9B45     		cmp	fp, r3
 630 0042 06D8     		bhi	.L50
 631              	.LBE51:
  11:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****         int16_t dx   = g_led_config.point[i].x - k_rgb_matrix_center.x;
  12:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****         int16_t dy   = g_led_config.point[i].y - k_rgb_matrix_center.y;
  13:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****         uint8_t dist = sqrt16(dx * dx + dy * dy);
  14:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****         RGB     rgb  = hsv_to_rgb(effect_func(rgb_matrix_config.hsv, dx, dy, dist, time));
  15:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****         rgb_matrix_set_color(i, rgb.r, rgb.g, rgb.b);
  16:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****     }
  17:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****     return led_max < DRIVER_LED_TOTAL;
 632              		.loc 4 17 5 is_stmt 1 view .LVU169
  18:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h **** }
 633              		.loc 4 18 1 is_stmt 0 view .LVU170
 634 0044 762F     		cmp	r7, #118
 635 0046 8CBF     		ite	hi
 636 0048 0020     		movhi	r0, #0
 637 004a 0120     		movls	r0, #1
 638 004c 09B0     		add	sp, sp, #36
 639              		.cfi_remember_state
 640              		.cfi_def_cfa_offset 36
 641              		@ sp needed
 642 004e BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 643              	.LVL47:
 644              	.L50:
 645              		.cfi_restore_state
 646              	.LBB54:
 647              	.LBB53:
  10:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****         RGB_MATRIX_TEST_LED_FLAGS();
 648              		.loc 4 10 9 is_stmt 1 view .LVU171
 649 0052 14F80920 		ldrb	r2, [r4, r9]	@ zero_extendqisi2
 650 0056 9AF80130 		ldrb	r3, [r10, #1]	@ zero_extendqisi2
 651 005a 1A42     		tst	r2, r3
 652 005c 37D0     		beq	.L49
  11:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****         int16_t dx   = g_led_config.point[i].x - k_rgb_matrix_center.x;
 653              		.loc 4 11 9 view .LVU172
  12:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****         uint8_t dist = sqrt16(dx * dx + dy * dy);
 654              		.loc 4 12 45 is_stmt 0 view .LVU173
 655 005e 98F85920 		ldrb	r2, [r8, #89]	@ zero_extendqisi2
  11:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****         int16_t dx   = g_led_config.point[i].x - k_rgb_matrix_center.x;
 656              		.loc 4 11 45 view .LVU174
 657 0062 98F85810 		ldrb	r1, [r8, #88]	@ zero_extendqisi2
  12:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****         uint8_t dist = sqrt16(dx * dx + dy * dy);
 658              		.loc 4 12 48 view .LVU175
 659 0066 203A     		subs	r2, r2, #32
 660 0068 92B2     		uxth	r2, r2
  11:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****         int16_t dx   = g_led_config.point[i].x - k_rgb_matrix_center.x;
 661              		.loc 4 11 48 view .LVU176
 662 006a 7039     		subs	r1, r1, #112
 663 006c 89B2     		uxth	r1, r1
 664              	.LVL48:
  12:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****         uint8_t dist = sqrt16(dx * dx + dy * dy);
 665              		.loc 4 12 9 is_stmt 1 view .LVU177
  13:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****         RGB     rgb  = hsv_to_rgb(effect_func(rgb_matrix_config.hsv, dx, dy, dist, time));
 666              		.loc 4 13 9 view .LVU178
  13:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****         RGB     rgb  = hsv_to_rgb(effect_func(rgb_matrix_config.hsv, dx, dy, dist, time));
 667              		.loc 4 13 44 is_stmt 0 view .LVU179
 668 006e 12FB02F0 		smulbb	r0, r2, r2
  13:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****         RGB     rgb  = hsv_to_rgb(effect_func(rgb_matrix_config.hsv, dx, dy, dist, time));
 669              		.loc 4 13 24 view .LVU180
 670 0072 11FB0100 		smlabb	r0, r1, r1, r0
 671 0076 80B2     		uxth	r0, r0
  13:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****         RGB     rgb  = hsv_to_rgb(effect_func(rgb_matrix_config.hsv, dx, dy, dist, time));
 672              		.loc 4 13 44 view .LVU181
 673 0078 0592     		str	r2, [sp, #20]
  13:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****         RGB     rgb  = hsv_to_rgb(effect_func(rgb_matrix_config.hsv, dx, dy, dist, time));
 674              		.loc 4 13 24 view .LVU182
 675 007a 0491     		str	r1, [sp, #16]
 676 007c FFF7FEFF 		bl	sqrt16
 677              	.LVL49:
  14:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****         rgb_matrix_set_color(i, rgb.r, rgb.g, rgb.b);
 678              		.loc 4 14 9 is_stmt 1 view .LVU183
  14:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****         rgb_matrix_set_color(i, rgb.r, rgb.g, rgb.b);
 679              		.loc 4 14 24 is_stmt 0 view .LVU184
 680 0080 029B     		ldr	r3, [sp, #8]
 681 0082 0093     		str	r3, [sp]
 682 0084 95F801C0 		ldrb	ip, [r5, #1]	@ zero_extendqisi2
 683 0088 AB78     		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 684 008a 95F803E0 		ldrb	lr, [r5, #3]	@ zero_extendqisi2
 685 008e 059A     		ldr	r2, [sp, #20]
 686 0090 0499     		ldr	r1, [sp, #16]
 687 0092 039E     		ldr	r6, [sp, #12]
 688 0094 4CEA032C 		orr	ip, ip, r3, lsl #8
 689 0098 12B2     		sxth	r2, r2
 690 009a 0346     		mov	r3, r0
 691 009c 09B2     		sxth	r1, r1
 692 009e 4CEA0E40 		orr	r0, ip, lr, lsl #16
 693              	.LVL50:
  14:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****         rgb_matrix_set_color(i, rgb.r, rgb.g, rgb.b);
 694              		.loc 4 14 24 view .LVU185
 695 00a2 B047     		blx	r6
 696              	.LVL51:
 697 00a4 C0F30723 		ubfx	r3, r0, #8, #8
 698 00a8 8DF81C00 		strb	r0, [sp, #28]
 699 00ac C0F30740 		ubfx	r0, r0, #16, #8
 700 00b0 8DF81D30 		strb	r3, [sp, #29]
 701 00b4 8DF81E00 		strb	r0, [sp, #30]
 702 00b8 0798     		ldr	r0, [sp, #28]
 703 00ba FFF7FEFF 		bl	hsv_to_rgb
 704              	.LVL52:
  15:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****     }
 705              		.loc 4 15 9 is_stmt 1 view .LVU186
 706 00be C0F30743 		ubfx	r3, r0, #16, #8
 707 00c2 C2B2     		uxtb	r2, r0
 708 00c4 C0F30721 		ubfx	r1, r0, #8, #8
 709 00c8 2046     		mov	r0, r4
 710 00ca FFF7FEFF 		bl	rgb_matrix_set_color
 711              	.LVL53:
 712              	.L49:
  15:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****     }
 713              		.loc 4 15 9 is_stmt 0 view .LVU187
 714 00ce 08F10208 		add	r8, r8, #2
 715 00d2 0134     		adds	r4, r4, #1
 716              	.LVL54:
  15:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****     }
 717              		.loc 4 15 9 view .LVU188
 718 00d4 B3E7     		b	.L47
 719              	.L52:
 720 00d6 00BF     		.align	2
 721              	.L51:
 722 00d8 00000000 		.word	rgb_matrix_config
 723 00dc 00000000 		.word	g_rgb_timer
 724 00e0 00000000 		.word	g_led_config
 725              	.LBE53:
 726              	.LBE54:
 727              		.cfi_endproc
 728              	.LFE80:
 730              		.section	.text.effect_runner_dx_dy,"ax",%progbits
 731              		.align	1
 732              		.global	effect_runner_dx_dy
 733              		.syntax unified
 734              		.thumb
 735              		.thumb_func
 736              		.fpu fpv4-sp-d16
 738              	effect_runner_dx_dy:
 739              	.LVL55:
 740              	.LFB81:
 741              		.file 6 "quantum/rgb_matrix_runners/effect_runner_dx_dy.h"
   1:quantum/rgb_matrix_runners/effect_runner_dx_dy.h **** #pragma once
   2:quantum/rgb_matrix_runners/effect_runner_dx_dy.h **** 
   3:quantum/rgb_matrix_runners/effect_runner_dx_dy.h **** typedef HSV (*dx_dy_f)(HSV hsv, int16_t dx, int16_t dy, uint8_t time);
   4:quantum/rgb_matrix_runners/effect_runner_dx_dy.h **** 
   5:quantum/rgb_matrix_runners/effect_runner_dx_dy.h **** bool effect_runner_dx_dy(effect_params_t* params, dx_dy_f effect_func) {
 742              		.loc 6 5 72 is_stmt 1 view -0
 743              		.cfi_startproc
 744              		@ args = 0, pretend = 0, frame = 16
 745              		@ frame_needed = 0, uses_anonymous_args = 0
   6:quantum/rgb_matrix_runners/effect_runner_dx_dy.h ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
 746              		.loc 6 6 5 view .LVU190
   5:quantum/rgb_matrix_runners/effect_runner_dx_dy.h ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
 747              		.loc 6 5 72 is_stmt 0 view .LVU191
 748 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 749              		.cfi_def_cfa_offset 36
 750              		.cfi_offset 4, -36
 751              		.cfi_offset 5, -32
 752              		.cfi_offset 6, -28
 753              		.cfi_offset 7, -24
 754              		.cfi_offset 8, -20
 755              		.cfi_offset 9, -16
 756              		.cfi_offset 10, -12
 757              		.cfi_offset 11, -8
 758              		.cfi_offset 14, -4
   7:quantum/rgb_matrix_runners/effect_runner_dx_dy.h **** 
   8:quantum/rgb_matrix_runners/effect_runner_dx_dy.h ****     uint8_t time = scale16by8(g_rgb_timer, rgb_matrix_config.speed / 2);
 759              		.loc 6 8 61 view .LVU192
 760 0004 2B4E     		ldr	r6, .L58
 761              	.LBB55:
 762              	.LBB56:
 253:./lib/lib8tion/scale8.h **** #endif
 763              		.loc 5 253 17 view .LVU193
 764 0006 2C4B     		ldr	r3, .L58+4
 765              	.LBE56:
 766              	.LBE55:
   6:quantum/rgb_matrix_runners/effect_runner_dx_dy.h **** 
 767              		.loc 6 6 5 view .LVU194
 768 0008 0478     		ldrb	r4, [r0]	@ zero_extendqisi2
 769              		.loc 6 8 20 view .LVU195
 770 000a 3579     		ldrb	r5, [r6, #4]	@ zero_extendqisi2
 771              	.LBB61:
 772              	.LBB57:
 253:./lib/lib8tion/scale8.h **** #endif
 773              		.loc 5 253 17 view .LVU196
 774 000c 1B88     		ldrh	r3, [r3]
 775              	.LBE57:
 776              	.LBE61:
   6:quantum/rgb_matrix_runners/effect_runner_dx_dy.h **** 
 777              		.loc 6 6 5 view .LVU197
 778 000e C4EB0414 		rsb	r4, r4, r4, lsl #4
 779              	.LBB62:
 780              	.LBB58:
 253:./lib/lib8tion/scale8.h **** #endif
 781              		.loc 5 253 17 view .LVU198
 782 0012 6D08     		lsrs	r5, r5, #1
 783              	.LBE58:
 784              	.LBE62:
   5:quantum/rgb_matrix_runners/effect_runner_dx_dy.h ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
 785              		.loc 6 5 72 view .LVU199
 786 0014 85B0     		sub	sp, sp, #20
 787              		.cfi_def_cfa_offset 56
   6:quantum/rgb_matrix_runners/effect_runner_dx_dy.h **** 
 788              		.loc 6 6 5 view .LVU200
 789 0016 E4B2     		uxtb	r4, r4
 790              	.LVL56:
   6:quantum/rgb_matrix_runners/effect_runner_dx_dy.h **** 
 791              		.loc 6 6 5 is_stmt 1 view .LVU201
 792              	.LBB63:
 793              	.LBB59:
 253:./lib/lib8tion/scale8.h **** #endif
 794              		.loc 5 253 17 is_stmt 0 view .LVU202
 795 0018 5D43     		muls	r5, r3, r5
 796              	.LBE59:
 797              	.LBE63:
 798              		.loc 6 8 13 view .LVU203
 799 001a C5F30723 		ubfx	r3, r5, #8, #8
   6:quantum/rgb_matrix_runners/effect_runner_dx_dy.h **** 
 800              		.loc 6 6 5 view .LVU204
 801 001e 04F10F07 		add	r7, r4, #15
 802 0022 FFB2     		uxtb	r7, r7
 803              	.LVL57:
   6:quantum/rgb_matrix_runners/effect_runner_dx_dy.h **** 
 804              		.loc 6 6 5 is_stmt 1 view .LVU205
 805              		.loc 6 8 13 is_stmt 0 view .LVU206
 806 0024 0093     		str	r3, [sp]
 807 0026 254B     		ldr	r3, .L58+8
   5:quantum/rgb_matrix_runners/effect_runner_dx_dy.h ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
 808              		.loc 6 5 72 view .LVU207
 809 0028 0191     		str	r1, [sp, #4]
 810 002a 772F     		cmp	r7, #119
 811 002c BB46     		mov	fp, r7
 812 002e 8246     		mov	r10, r0
 813 0030 28BF     		it	cs
 814 0032 4FF0770B 		movcs	fp, #119
 815              	.LVL58:
   6:quantum/rgb_matrix_runners/effect_runner_dx_dy.h **** 
 816              		.loc 6 6 44 is_stmt 1 view .LVU208
 817              		.loc 6 8 5 view .LVU209
 818              	.LBB64:
 819              	.LBI55:
 246:./lib/lib8tion/scale8.h **** {
 820              		.loc 5 246 35 view .LVU210
 821              	.LBB60:
 249:./lib/lib8tion/scale8.h **** #if FASTLED_SCALE8_FIXED == 1
 822              		.loc 5 249 5 view .LVU211
 253:./lib/lib8tion/scale8.h **** #endif
 823              		.loc 5 253 5 view .LVU212
 824              		.loc 5 255 5 view .LVU213
 825              		.loc 5 255 5 is_stmt 0 view .LVU214
 826              	.LBE60:
 827              	.LBE64:
   9:quantum/rgb_matrix_runners/effect_runner_dx_dy.h ****     for (uint8_t i = led_min; i < led_max; i++) {
 828              		.loc 6 9 5 is_stmt 1 view .LVU215
 829              	.LBB65:
 830              		.loc 6 9 10 view .LVU216
 831              		.loc 6 9 10 is_stmt 0 view .LVU217
 832 0036 03EB4408 		add	r8, r3, r4, lsl #1
 833              	.LBB66:
  10:quantum/rgb_matrix_runners/effect_runner_dx_dy.h ****         RGB_MATRIX_TEST_LED_FLAGS();
 834              		.loc 6 10 9 view .LVU218
 835 003a 03F5A379 		add	r9, r3, #326
 836              	.LVL59:
 837              	.L54:
 838              		.loc 6 10 9 view .LVU219
 839              	.LBE66:
   9:quantum/rgb_matrix_runners/effect_runner_dx_dy.h ****     for (uint8_t i = led_min; i < led_max; i++) {
 840              		.loc 6 9 5 discriminator 1 view .LVU220
 841 003e E3B2     		uxtb	r3, r4
 842 0040 9B45     		cmp	fp, r3
 843 0042 06D8     		bhi	.L57
 844              	.LBE65:
  11:quantum/rgb_matrix_runners/effect_runner_dx_dy.h ****         int16_t dx  = g_led_config.point[i].x - k_rgb_matrix_center.x;
  12:quantum/rgb_matrix_runners/effect_runner_dx_dy.h ****         int16_t dy  = g_led_config.point[i].y - k_rgb_matrix_center.y;
  13:quantum/rgb_matrix_runners/effect_runner_dx_dy.h ****         RGB     rgb = hsv_to_rgb(effect_func(rgb_matrix_config.hsv, dx, dy, time));
  14:quantum/rgb_matrix_runners/effect_runner_dx_dy.h ****         rgb_matrix_set_color(i, rgb.r, rgb.g, rgb.b);
  15:quantum/rgb_matrix_runners/effect_runner_dx_dy.h ****     }
  16:quantum/rgb_matrix_runners/effect_runner_dx_dy.h ****     return led_max < DRIVER_LED_TOTAL;
 845              		.loc 6 16 5 is_stmt 1 view .LVU221
  17:quantum/rgb_matrix_runners/effect_runner_dx_dy.h **** }
 846              		.loc 6 17 1 is_stmt 0 view .LVU222
 847 0044 762F     		cmp	r7, #118
 848 0046 8CBF     		ite	hi
 849 0048 0020     		movhi	r0, #0
 850 004a 0120     		movls	r0, #1
 851 004c 05B0     		add	sp, sp, #20
 852              		.cfi_remember_state
 853              		.cfi_def_cfa_offset 36
 854              	.LVL60:
 855              		.loc 6 17 1 view .LVU223
 856              		@ sp needed
 857 004e BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 858              	.LVL61:
 859              	.L57:
 860              		.cfi_restore_state
 861              	.LBB68:
 862              	.LBB67:
  10:quantum/rgb_matrix_runners/effect_runner_dx_dy.h ****         RGB_MATRIX_TEST_LED_FLAGS();
 863              		.loc 6 10 9 is_stmt 1 view .LVU224
 864 0052 14F80920 		ldrb	r2, [r4, r9]	@ zero_extendqisi2
 865 0056 9AF80130 		ldrb	r3, [r10, #1]	@ zero_extendqisi2
 866 005a 1A42     		tst	r2, r3
 867 005c 25D0     		beq	.L56
  11:quantum/rgb_matrix_runners/effect_runner_dx_dy.h ****         int16_t dx  = g_led_config.point[i].x - k_rgb_matrix_center.x;
 868              		.loc 6 11 9 view .LVU225
 869              	.LVL62:
  12:quantum/rgb_matrix_runners/effect_runner_dx_dy.h ****         RGB     rgb = hsv_to_rgb(effect_func(rgb_matrix_config.hsv, dx, dy, time));
 870              		.loc 6 12 9 view .LVU226
  13:quantum/rgb_matrix_runners/effect_runner_dx_dy.h ****         rgb_matrix_set_color(i, rgb.r, rgb.g, rgb.b);
 871              		.loc 6 13 9 view .LVU227
  13:quantum/rgb_matrix_runners/effect_runner_dx_dy.h ****         rgb_matrix_set_color(i, rgb.r, rgb.g, rgb.b);
 872              		.loc 6 13 23 is_stmt 0 view .LVU228
 873 005e B378     		ldrb	r3, [r6, #2]	@ zero_extendqisi2
 874 0060 7078     		ldrb	r0, [r6, #1]	@ zero_extendqisi2
 875 0062 96F803C0 		ldrb	ip, [r6, #3]	@ zero_extendqisi2
  12:quantum/rgb_matrix_runners/effect_runner_dx_dy.h ****         RGB     rgb = hsv_to_rgb(effect_func(rgb_matrix_config.hsv, dx, dy, time));
 876              		.loc 6 12 44 view .LVU229
 877 0066 98F85920 		ldrb	r2, [r8, #89]	@ zero_extendqisi2
  11:quantum/rgb_matrix_runners/effect_runner_dx_dy.h ****         int16_t dy  = g_led_config.point[i].y - k_rgb_matrix_center.y;
 878              		.loc 6 11 44 view .LVU230
 879 006a 98F85810 		ldrb	r1, [r8, #88]	@ zero_extendqisi2
  13:quantum/rgb_matrix_runners/effect_runner_dx_dy.h ****         rgb_matrix_set_color(i, rgb.r, rgb.g, rgb.b);
 880              		.loc 6 13 23 view .LVU231
 881 006e 019D     		ldr	r5, [sp, #4]
 882 0070 40EA0320 		orr	r0, r0, r3, lsl #8
 883 0074 203A     		subs	r2, r2, #32
 884 0076 7039     		subs	r1, r1, #112
 885 0078 009B     		ldr	r3, [sp]
 886 007a 40EA0C40 		orr	r0, r0, ip, lsl #16
 887 007e A847     		blx	r5
 888              	.LVL63:
  13:quantum/rgb_matrix_runners/effect_runner_dx_dy.h ****         rgb_matrix_set_color(i, rgb.r, rgb.g, rgb.b);
 889              		.loc 6 13 23 view .LVU232
 890 0080 C0F30723 		ubfx	r3, r0, #8, #8
 891 0084 8DF80C00 		strb	r0, [sp, #12]
 892 0088 C0F30740 		ubfx	r0, r0, #16, #8
 893 008c 8DF80D30 		strb	r3, [sp, #13]
 894 0090 8DF80E00 		strb	r0, [sp, #14]
 895 0094 0398     		ldr	r0, [sp, #12]
 896 0096 FFF7FEFF 		bl	hsv_to_rgb
 897              	.LVL64:
  14:quantum/rgb_matrix_runners/effect_runner_dx_dy.h ****     }
 898              		.loc 6 14 9 is_stmt 1 view .LVU233
 899 009a C0F30743 		ubfx	r3, r0, #16, #8
 900 009e C2B2     		uxtb	r2, r0
 901 00a0 C0F30721 		ubfx	r1, r0, #8, #8
 902 00a4 2046     		mov	r0, r4
 903 00a6 FFF7FEFF 		bl	rgb_matrix_set_color
 904              	.LVL65:
 905              	.L56:
  14:quantum/rgb_matrix_runners/effect_runner_dx_dy.h ****     }
 906              		.loc 6 14 9 is_stmt 0 view .LVU234
 907 00aa 08F10208 		add	r8, r8, #2
 908 00ae 0134     		adds	r4, r4, #1
 909              	.LVL66:
  14:quantum/rgb_matrix_runners/effect_runner_dx_dy.h ****     }
 910              		.loc 6 14 9 view .LVU235
 911 00b0 C5E7     		b	.L54
 912              	.L59:
 913 00b2 00BF     		.align	2
 914              	.L58:
 915 00b4 00000000 		.word	rgb_matrix_config
 916 00b8 00000000 		.word	g_rgb_timer
 917 00bc 00000000 		.word	g_led_config
 918              	.LBE67:
 919              	.LBE68:
 920              		.cfi_endproc
 921              	.LFE81:
 923              		.section	.text.effect_runner_i,"ax",%progbits
 924              		.align	1
 925              		.global	effect_runner_i
 926              		.syntax unified
 927              		.thumb
 928              		.thumb_func
 929              		.fpu fpv4-sp-d16
 931              	effect_runner_i:
 932              	.LVL67:
 933              	.LFB82:
 934              		.file 7 "quantum/rgb_matrix_runners/effect_runner_i.h"
   1:quantum/rgb_matrix_runners/effect_runner_i.h **** #pragma once
   2:quantum/rgb_matrix_runners/effect_runner_i.h **** 
   3:quantum/rgb_matrix_runners/effect_runner_i.h **** typedef HSV (*i_f)(HSV hsv, uint8_t i, uint8_t time);
   4:quantum/rgb_matrix_runners/effect_runner_i.h **** 
   5:quantum/rgb_matrix_runners/effect_runner_i.h **** bool effect_runner_i(effect_params_t* params, i_f effect_func) {
 935              		.loc 7 5 64 is_stmt 1 view -0
 936              		.cfi_startproc
 937              		@ args = 0, pretend = 0, frame = 8
 938              		@ frame_needed = 0, uses_anonymous_args = 0
   6:quantum/rgb_matrix_runners/effect_runner_i.h ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
 939              		.loc 7 6 5 view .LVU237
   5:quantum/rgb_matrix_runners/effect_runner_i.h ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
 940              		.loc 7 5 64 is_stmt 0 view .LVU238
 941 0000 2DE9F74F 		push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 942              		.cfi_def_cfa_offset 48
 943              		.cfi_offset 4, -36
 944              		.cfi_offset 5, -32
 945              		.cfi_offset 6, -28
 946              		.cfi_offset 7, -24
 947              		.cfi_offset 8, -20
 948              		.cfi_offset 9, -16
 949              		.cfi_offset 10, -12
 950              		.cfi_offset 11, -8
 951              		.cfi_offset 14, -4
 952              		.loc 7 6 5 view .LVU239
 953 0004 0478     		ldrb	r4, [r0]	@ zero_extendqisi2
   7:quantum/rgb_matrix_runners/effect_runner_i.h **** 
   8:quantum/rgb_matrix_runners/effect_runner_i.h ****     uint8_t time = scale16by8(g_rgb_timer, rgb_matrix_config.speed / 4);
 954              		.loc 7 8 61 view .LVU240
 955 0006 254E     		ldr	r6, .L65
 956              	.LBB69:
 957              	.LBB70:
 253:./lib/lib8tion/scale8.h **** #endif
 958              		.loc 5 253 17 view .LVU241
 959 0008 254B     		ldr	r3, .L65+4
 960              	.LBE70:
 961              	.LBE69:
 962              		.loc 7 8 20 view .LVU242
 963 000a 3579     		ldrb	r5, [r6, #4]	@ zero_extendqisi2
 964              	.LBB74:
 965              	.LBB71:
 253:./lib/lib8tion/scale8.h **** #endif
 966              		.loc 5 253 17 view .LVU243
 967 000c 1B88     		ldrh	r3, [r3]
 968              	.LBE71:
 969              	.LBE74:
 970              	.LBB75:
 971              	.LBB76:
   9:quantum/rgb_matrix_runners/effect_runner_i.h ****     for (uint8_t i = led_min; i < led_max; i++) {
  10:quantum/rgb_matrix_runners/effect_runner_i.h ****         RGB_MATRIX_TEST_LED_FLAGS();
 972              		.loc 7 10 9 view .LVU244
 973 000e DFF894B0 		ldr	fp, .L65+8
 974              	.LBE76:
 975              	.LBE75:
   6:quantum/rgb_matrix_runners/effect_runner_i.h **** 
 976              		.loc 7 6 5 view .LVU245
 977 0012 C4EB0414 		rsb	r4, r4, r4, lsl #4
 978 0016 E4B2     		uxtb	r4, r4
 979              	.LVL68:
   6:quantum/rgb_matrix_runners/effect_runner_i.h **** 
 980              		.loc 7 6 5 is_stmt 1 view .LVU246
 981 0018 04F10F09 		add	r9, r4, #15
 982 001c 5FFA89F9 		uxtb	r9, r9
 983              	.LVL69:
   6:quantum/rgb_matrix_runners/effect_runner_i.h **** 
 984              		.loc 7 6 5 view .LVU247
 985              	.LBB78:
 986              	.LBB72:
 253:./lib/lib8tion/scale8.h **** #endif
 987              		.loc 5 253 17 is_stmt 0 view .LVU248
 988 0020 AD08     		lsrs	r5, r5, #2
 989 0022 B9F1770F 		cmp	r9, #119
 990 0026 05FB03F5 		mul	r5, r5, r3
 991 002a CA46     		mov	r10, r9
 992              	.LBE72:
 993              	.LBE78:
   5:quantum/rgb_matrix_runners/effect_runner_i.h ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
 994              		.loc 7 5 64 view .LVU249
 995 002c 0746     		mov	r7, r0
 996 002e 8846     		mov	r8, r1
 997 0030 28BF     		it	cs
 998 0032 4FF0770A 		movcs	r10, #119
 999              	.LVL70:
   6:quantum/rgb_matrix_runners/effect_runner_i.h **** 
 1000              		.loc 7 6 44 is_stmt 1 view .LVU250
   8:quantum/rgb_matrix_runners/effect_runner_i.h ****     for (uint8_t i = led_min; i < led_max; i++) {
 1001              		.loc 7 8 5 view .LVU251
 1002              	.LBB79:
 1003              	.LBI69:
 246:./lib/lib8tion/scale8.h **** {
 1004              		.loc 5 246 35 view .LVU252
 1005              	.LBB73:
 249:./lib/lib8tion/scale8.h **** #if FASTLED_SCALE8_FIXED == 1
 1006              		.loc 5 249 5 view .LVU253
 253:./lib/lib8tion/scale8.h **** #endif
 1007              		.loc 5 253 5 view .LVU254
 1008              		.loc 5 255 5 view .LVU255
 1009              		.loc 5 255 5 is_stmt 0 view .LVU256
 1010              	.LBE73:
 1011              	.LBE79:
   8:quantum/rgb_matrix_runners/effect_runner_i.h ****     for (uint8_t i = led_min; i < led_max; i++) {
 1012              		.loc 7 8 13 view .LVU257
 1013 0036 C5F30725 		ubfx	r5, r5, #8, #8
 1014              	.LVL71:
   9:quantum/rgb_matrix_runners/effect_runner_i.h ****         RGB_MATRIX_TEST_LED_FLAGS();
 1015              		.loc 7 9 5 is_stmt 1 view .LVU258
 1016              	.LBB80:
   9:quantum/rgb_matrix_runners/effect_runner_i.h ****         RGB_MATRIX_TEST_LED_FLAGS();
 1017              		.loc 7 9 10 view .LVU259
 1018              	.L61:
   9:quantum/rgb_matrix_runners/effect_runner_i.h ****         RGB_MATRIX_TEST_LED_FLAGS();
 1019              		.loc 7 9 10 is_stmt 0 view .LVU260
 1020 003a E1B2     		uxtb	r1, r4
 1021              	.LVL72:
   9:quantum/rgb_matrix_runners/effect_runner_i.h ****         RGB_MATRIX_TEST_LED_FLAGS();
 1022              		.loc 7 9 5 discriminator 1 view .LVU261
 1023 003c 8A45     		cmp	r10, r1
 1024 003e 07D8     		bhi	.L64
 1025              	.LBE80:
  11:quantum/rgb_matrix_runners/effect_runner_i.h ****         RGB rgb = hsv_to_rgb(effect_func(rgb_matrix_config.hsv, i, time));
  12:quantum/rgb_matrix_runners/effect_runner_i.h ****         rgb_matrix_set_color(i, rgb.r, rgb.g, rgb.b);
  13:quantum/rgb_matrix_runners/effect_runner_i.h ****     }
  14:quantum/rgb_matrix_runners/effect_runner_i.h ****     return led_max < DRIVER_LED_TOTAL;
 1026              		.loc 7 14 5 is_stmt 1 view .LVU262
  15:quantum/rgb_matrix_runners/effect_runner_i.h **** }
 1027              		.loc 7 15 1 is_stmt 0 view .LVU263
 1028 0040 B9F1760F 		cmp	r9, #118
 1029 0044 8CBF     		ite	hi
 1030 0046 0020     		movhi	r0, #0
 1031 0048 0120     		movls	r0, #1
 1032 004a 03B0     		add	sp, sp, #12
 1033              		.cfi_remember_state
 1034              		.cfi_def_cfa_offset 36
 1035              		@ sp needed
 1036 004c BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1037              	.LVL73:
 1038              	.L64:
 1039              		.cfi_restore_state
 1040              	.LBB81:
 1041              	.LBB77:
  10:quantum/rgb_matrix_runners/effect_runner_i.h ****         RGB rgb = hsv_to_rgb(effect_func(rgb_matrix_config.hsv, i, time));
 1042              		.loc 7 10 9 is_stmt 1 view .LVU264
 1043 0050 14F80B20 		ldrb	r2, [r4, fp]	@ zero_extendqisi2
 1044 0054 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 1045 0056 1A42     		tst	r2, r3
 1046 0058 1DD0     		beq	.L63
  11:quantum/rgb_matrix_runners/effect_runner_i.h ****         RGB rgb = hsv_to_rgb(effect_func(rgb_matrix_config.hsv, i, time));
 1047              		.loc 7 11 9 view .LVU265
  11:quantum/rgb_matrix_runners/effect_runner_i.h ****         RGB rgb = hsv_to_rgb(effect_func(rgb_matrix_config.hsv, i, time));
 1048              		.loc 7 11 19 is_stmt 0 view .LVU266
 1049 005a B078     		ldrb	r0, [r6, #2]	@ zero_extendqisi2
 1050 005c 7378     		ldrb	r3, [r6, #1]	@ zero_extendqisi2
 1051 005e 43EA0023 		orr	r3, r3, r0, lsl #8
 1052 0062 F078     		ldrb	r0, [r6, #3]	@ zero_extendqisi2
 1053 0064 2A46     		mov	r2, r5
 1054 0066 43EA0040 		orr	r0, r3, r0, lsl #16
 1055 006a C047     		blx	r8
 1056              	.LVL74:
  11:quantum/rgb_matrix_runners/effect_runner_i.h ****         RGB rgb = hsv_to_rgb(effect_func(rgb_matrix_config.hsv, i, time));
 1057              		.loc 7 11 19 view .LVU267
 1058 006c C0F30723 		ubfx	r3, r0, #8, #8
 1059 0070 8DF80400 		strb	r0, [sp, #4]
 1060 0074 C0F30740 		ubfx	r0, r0, #16, #8
 1061 0078 8DF80530 		strb	r3, [sp, #5]
 1062 007c 8DF80600 		strb	r0, [sp, #6]
 1063 0080 0198     		ldr	r0, [sp, #4]
 1064 0082 FFF7FEFF 		bl	hsv_to_rgb
 1065              	.LVL75:
  12:quantum/rgb_matrix_runners/effect_runner_i.h ****     }
 1066              		.loc 7 12 9 is_stmt 1 view .LVU268
 1067 0086 C0F30743 		ubfx	r3, r0, #16, #8
 1068 008a C2B2     		uxtb	r2, r0
 1069 008c C0F30721 		ubfx	r1, r0, #8, #8
 1070 0090 2046     		mov	r0, r4
 1071 0092 FFF7FEFF 		bl	rgb_matrix_set_color
 1072              	.LVL76:
 1073              	.L63:
  12:quantum/rgb_matrix_runners/effect_runner_i.h ****     }
 1074              		.loc 7 12 9 is_stmt 0 view .LVU269
 1075 0096 0134     		adds	r4, r4, #1
 1076              	.LVL77:
  12:quantum/rgb_matrix_runners/effect_runner_i.h ****     }
 1077              		.loc 7 12 9 view .LVU270
 1078 0098 CFE7     		b	.L61
 1079              	.L66:
 1080 009a 00BF     		.align	2
 1081              	.L65:
 1082 009c 00000000 		.word	rgb_matrix_config
 1083 00a0 00000000 		.word	g_rgb_timer
 1084 00a4 46010000 		.word	g_led_config+326
 1085              	.LBE77:
 1086              	.LBE81:
 1087              		.cfi_endproc
 1088              	.LFE82:
 1090              		.section	.text.effect_runner_sin_cos_i,"ax",%progbits
 1091              		.align	1
 1092              		.global	effect_runner_sin_cos_i
 1093              		.syntax unified
 1094              		.thumb
 1095              		.thumb_func
 1096              		.fpu fpv4-sp-d16
 1098              	effect_runner_sin_cos_i:
 1099              	.LVL78:
 1100              	.LFB83:
 1101              		.file 8 "quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h"
   1:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h **** #pragma once
   2:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h **** 
   3:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h **** typedef HSV (*sin_cos_i_f)(HSV hsv, int8_t sin, int8_t cos, uint8_t i, uint8_t time);
   4:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h **** 
   5:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h **** bool effect_runner_sin_cos_i(effect_params_t* params, sin_cos_i_f effect_func) {
 1102              		.loc 8 5 80 is_stmt 1 view -0
 1103              		.cfi_startproc
 1104              		@ args = 0, pretend = 0, frame = 16
 1105              		@ frame_needed = 0, uses_anonymous_args = 0
   6:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
 1106              		.loc 8 6 5 view .LVU272
   5:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
 1107              		.loc 8 5 80 is_stmt 0 view .LVU273
 1108 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1109              		.cfi_def_cfa_offset 36
 1110              		.cfi_offset 4, -36
 1111              		.cfi_offset 5, -32
 1112              		.cfi_offset 6, -28
 1113              		.cfi_offset 7, -24
 1114              		.cfi_offset 8, -20
 1115              		.cfi_offset 9, -16
 1116              		.cfi_offset 10, -12
 1117              		.cfi_offset 11, -8
 1118              		.cfi_offset 14, -4
   7:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h **** 
   8:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h ****     uint16_t time      = scale16by8(g_rgb_timer, rgb_matrix_config.speed / 4);
 1119              		.loc 8 8 67 view .LVU274
 1120 0004 2D4E     		ldr	r6, .L72
 1121              	.LBB88:
 1122              	.LBB89:
 253:./lib/lib8tion/scale8.h **** #endif
 1123              		.loc 5 253 17 view .LVU275
 1124 0006 2E4A     		ldr	r2, .L72+4
 1125              	.LBE89:
 1126              	.LBE88:
 1127              		.loc 8 8 26 view .LVU276
 1128 0008 3579     		ldrb	r5, [r6, #4]	@ zero_extendqisi2
   6:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h **** 
 1129              		.loc 8 6 5 view .LVU277
 1130 000a 0478     		ldrb	r4, [r0]	@ zero_extendqisi2
 1131              	.LBB93:
 1132              	.LBB90:
 253:./lib/lib8tion/scale8.h **** #endif
 1133              		.loc 5 253 17 view .LVU278
 1134 000c AB08     		lsrs	r3, r5, #2
 1135 000e 1588     		ldrh	r5, [r2]
 1136              	.LBE90:
 1137              	.LBE93:
   6:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h **** 
 1138              		.loc 8 6 5 view .LVU279
 1139 0010 C4EB0414 		rsb	r4, r4, r4, lsl #4
 1140              	.LBB94:
 1141              	.LBB91:
 253:./lib/lib8tion/scale8.h **** #endif
 1142              		.loc 5 253 17 view .LVU280
 1143 0014 5D43     		muls	r5, r3, r5
 1144              	.LBE91:
 1145              	.LBE94:
   6:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h **** 
 1146              		.loc 8 6 5 view .LVU281
 1147 0016 E4B2     		uxtb	r4, r4
 1148              	.LVL79:
   6:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h **** 
 1149              		.loc 8 6 5 is_stmt 1 view .LVU282
   9:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h ****     int8_t   cos_value = cos8(time) - 128;
 1150              		.loc 8 9 26 is_stmt 0 view .LVU283
 1151 0018 C5F30725 		ubfx	r5, r5, #8, #8
   6:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h **** 
 1152              		.loc 8 6 5 view .LVU284
 1153 001c 04F10F07 		add	r7, r4, #15
   5:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
 1154              		.loc 8 5 80 view .LVU285
 1155 0020 87B0     		sub	sp, sp, #28
 1156              		.cfi_def_cfa_offset 64
   6:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h **** 
 1157              		.loc 8 6 5 view .LVU286
 1158 0022 FFB2     		uxtb	r7, r7
 1159              	.LVL80:
   6:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h **** 
 1160              		.loc 8 6 5 is_stmt 1 view .LVU287
   5:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
 1161              		.loc 8 5 80 is_stmt 0 view .LVU288
 1162 0024 8146     		mov	r9, r0
 1163              	.LBB95:
 1164              	.LBB96:
 245:./lib/lib8tion/trig8.h **** 
 246:./lib/lib8tion/trig8.h **** /// Fast 8-bit approximation of cos(x). This approximation never varies more than
 247:./lib/lib8tion/trig8.h **** /// 2% from the floating point value you'd get by doing
 248:./lib/lib8tion/trig8.h **** ///
 249:./lib/lib8tion/trig8.h **** ///     float s = (cos(x) * 128.0) + 128;
 250:./lib/lib8tion/trig8.h **** ///
 251:./lib/lib8tion/trig8.h **** /// @param theta input angle from 0-255
 252:./lib/lib8tion/trig8.h **** /// @returns sin of theta, value between 0 and 255
 253:./lib/lib8tion/trig8.h **** LIB8STATIC uint8_t cos8( uint8_t theta)
 254:./lib/lib8tion/trig8.h **** {
 255:./lib/lib8tion/trig8.h ****     return sin8( theta + 64);
 1165              		.loc 2 255 12 view .LVU289
 1166 0026 05F14000 		add	r0, r5, #64
 1167              	.LVL81:
 1168              		.loc 2 255 12 view .LVU290
 1169 002a 772F     		cmp	r7, #119
 1170 002c C0B2     		uxtb	r0, r0
 1171              	.LBE96:
 1172              	.LBE95:
   5:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
 1173              		.loc 8 5 80 view .LVU291
 1174 002e 0391     		str	r1, [sp, #12]
 1175 0030 BA46     		mov	r10, r7
 1176 0032 28BF     		it	cs
 1177 0034 4FF0770A 		movcs	r10, #119
 1178              	.LVL82:
   6:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h **** 
 1179              		.loc 8 6 44 is_stmt 1 view .LVU292
   8:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h ****     int8_t   cos_value = cos8(time) - 128;
 1180              		.loc 8 8 5 view .LVU293
 1181              	.LBB98:
 1182              	.LBI88:
 246:./lib/lib8tion/scale8.h **** {
 1183              		.loc 5 246 35 view .LVU294
 1184              	.LBB92:
 249:./lib/lib8tion/scale8.h **** #if FASTLED_SCALE8_FIXED == 1
 1185              		.loc 5 249 5 view .LVU295
 253:./lib/lib8tion/scale8.h **** #endif
 1186              		.loc 5 253 5 view .LVU296
 1187              		.loc 5 255 5 view .LVU297
 1188              		.loc 5 255 5 is_stmt 0 view .LVU298
 1189              	.LBE92:
 1190              	.LBE98:
 1191              		.loc 8 9 5 is_stmt 1 view .LVU299
 1192              	.LBB99:
 1193              	.LBI95:
 253:./lib/lib8tion/trig8.h **** {
 1194              		.loc 2 253 20 view .LVU300
 1195              	.LBB97:
 1196              		.loc 2 255 5 view .LVU301
 1197              		.loc 2 255 12 is_stmt 0 view .LVU302
 1198 0038 FFF7FEFF 		bl	sin8_C
 1199              	.LVL83:
 1200              		.loc 2 255 12 view .LVU303
 1201              	.LBE97:
 1202              	.LBE99:
 1203              		.loc 8 9 37 view .LVU304
 1204 003c 8038     		subs	r0, r0, #128
 1205              		.loc 8 9 14 view .LVU305
 1206 003e 4FFA80FB 		sxtb	fp, r0
 1207              	.LVL84:
  10:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h ****     int8_t   sin_value = sin8(time) - 128;
 1208              		.loc 8 10 5 is_stmt 1 view .LVU306
 1209              		.loc 8 10 26 is_stmt 0 view .LVU307
 1210 0042 2846     		mov	r0, r5
 1211 0044 FFF7FEFF 		bl	sin8_C
 1212              	.LVL85:
 1213              		.loc 8 10 37 view .LVU308
 1214 0048 8038     		subs	r0, r0, #128
 1215              		.loc 8 10 14 view .LVU309
 1216 004a 4FFA80F8 		sxtb	r8, r0
 1217              	.LVL86:
  11:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h ****     for (uint8_t i = led_min; i < led_max; i++) {
 1218              		.loc 8 11 5 is_stmt 1 view .LVU310
 1219              	.LBB100:
 1220              		.loc 8 11 10 view .LVU311
 1221              		.loc 8 11 10 is_stmt 0 view .LVU312
 1222 004e 0296     		str	r6, [sp, #8]
 1223              	.LVL87:
 1224              	.L68:
 1225              		.loc 8 11 10 view .LVU313
 1226 0050 E3B2     		uxtb	r3, r4
 1227              	.LVL88:
 1228              		.loc 8 11 5 discriminator 1 view .LVU314
 1229 0052 9A45     		cmp	r10, r3
 1230 0054 06D8     		bhi	.L71
 1231              	.LBE100:
  12:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h ****         RGB_MATRIX_TEST_LED_FLAGS();
  13:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h ****         RGB rgb = hsv_to_rgb(effect_func(rgb_matrix_config.hsv, cos_value, sin_value, i, time));
  14:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h ****         rgb_matrix_set_color(i, rgb.r, rgb.g, rgb.b);
  15:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h ****     }
  16:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h ****     return led_max < DRIVER_LED_TOTAL;
 1232              		.loc 8 16 5 is_stmt 1 view .LVU315
  17:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h **** }
 1233              		.loc 8 17 1 is_stmt 0 view .LVU316
 1234 0056 762F     		cmp	r7, #118
 1235 0058 8CBF     		ite	hi
 1236 005a 0020     		movhi	r0, #0
 1237 005c 0120     		movls	r0, #1
 1238 005e 07B0     		add	sp, sp, #28
 1239              		.cfi_remember_state
 1240              		.cfi_def_cfa_offset 36
 1241              		@ sp needed
 1242 0060 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1243              	.LVL89:
 1244              	.L71:
 1245              		.cfi_restore_state
 1246              	.LBB102:
 1247              	.LBB101:
  12:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h ****         RGB_MATRIX_TEST_LED_FLAGS();
 1248              		.loc 8 12 9 is_stmt 1 view .LVU317
 1249 0064 174A     		ldr	r2, .L72+8
 1250 0066 A15C     		ldrb	r1, [r4, r2]	@ zero_extendqisi2
 1251 0068 99F80120 		ldrb	r2, [r9, #1]	@ zero_extendqisi2
 1252 006c 1142     		tst	r1, r2
 1253 006e 23D0     		beq	.L70
  13:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h ****         rgb_matrix_set_color(i, rgb.r, rgb.g, rgb.b);
 1254              		.loc 8 13 9 view .LVU318
  13:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h ****         rgb_matrix_set_color(i, rgb.r, rgb.g, rgb.b);
 1255              		.loc 8 13 19 is_stmt 0 view .LVU319
 1256 0070 029A     		ldr	r2, [sp, #8]
 1257 0072 0095     		str	r5, [sp]
 1258 0074 5078     		ldrb	r0, [r2, #1]	@ zero_extendqisi2
 1259 0076 9278     		ldrb	r2, [r2, #2]	@ zero_extendqisi2
 1260 0078 039E     		ldr	r6, [sp, #12]
 1261 007a 40EA0220 		orr	r0, r0, r2, lsl #8
 1262 007e 029A     		ldr	r2, [sp, #8]
 1263 0080 92F803C0 		ldrb	ip, [r2, #3]	@ zero_extendqisi2
 1264 0084 5946     		mov	r1, fp
 1265 0086 4246     		mov	r2, r8
 1266 0088 40EA0C40 		orr	r0, r0, ip, lsl #16
 1267 008c B047     		blx	r6
 1268              	.LVL90:
  13:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h ****         rgb_matrix_set_color(i, rgb.r, rgb.g, rgb.b);
 1269              		.loc 8 13 19 view .LVU320
 1270 008e C0F30723 		ubfx	r3, r0, #8, #8
 1271 0092 8DF81400 		strb	r0, [sp, #20]
 1272 0096 C0F30740 		ubfx	r0, r0, #16, #8
 1273 009a 8DF81530 		strb	r3, [sp, #21]
 1274 009e 8DF81600 		strb	r0, [sp, #22]
 1275 00a2 0598     		ldr	r0, [sp, #20]
 1276 00a4 FFF7FEFF 		bl	hsv_to_rgb
 1277              	.LVL91:
  14:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h ****     }
 1278              		.loc 8 14 9 is_stmt 1 view .LVU321
 1279 00a8 C0F30743 		ubfx	r3, r0, #16, #8
 1280 00ac C2B2     		uxtb	r2, r0
 1281 00ae C0F30721 		ubfx	r1, r0, #8, #8
 1282 00b2 2046     		mov	r0, r4
 1283 00b4 FFF7FEFF 		bl	rgb_matrix_set_color
 1284              	.LVL92:
 1285              	.L70:
  14:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h ****     }
 1286              		.loc 8 14 9 is_stmt 0 view .LVU322
 1287 00b8 0134     		adds	r4, r4, #1
 1288              	.LVL93:
  14:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h ****     }
 1289              		.loc 8 14 9 view .LVU323
 1290 00ba C9E7     		b	.L68
 1291              	.L73:
 1292              		.align	2
 1293              	.L72:
 1294 00bc 00000000 		.word	rgb_matrix_config
 1295 00c0 00000000 		.word	g_rgb_timer
 1296 00c4 46010000 		.word	g_led_config+326
 1297              	.LBE101:
 1298              	.LBE102:
 1299              		.cfi_endproc
 1300              	.LFE83:
 1302              		.section	.text.effect_runner_reactive,"ax",%progbits
 1303              		.align	1
 1304              		.global	effect_runner_reactive
 1305              		.syntax unified
 1306              		.thumb
 1307              		.thumb_func
 1308              		.fpu fpv4-sp-d16
 1310              	effect_runner_reactive:
 1311              	.LVL94:
 1312              	.LFB84:
 1313              		.file 9 "quantum/rgb_matrix_runners/effect_runner_reactive.h"
   1:quantum/rgb_matrix_runners/effect_runner_reactive.h **** #pragma once
   2:quantum/rgb_matrix_runners/effect_runner_reactive.h **** 
   3:quantum/rgb_matrix_runners/effect_runner_reactive.h **** #ifdef RGB_MATRIX_KEYREACTIVE_ENABLED
   4:quantum/rgb_matrix_runners/effect_runner_reactive.h **** 
   5:quantum/rgb_matrix_runners/effect_runner_reactive.h **** typedef HSV (*reactive_f)(HSV hsv, uint16_t offset);
   6:quantum/rgb_matrix_runners/effect_runner_reactive.h **** 
   7:quantum/rgb_matrix_runners/effect_runner_reactive.h **** bool effect_runner_reactive(effect_params_t* params, reactive_f effect_func) {
 1314              		.loc 9 7 78 is_stmt 1 view -0
 1315              		.cfi_startproc
 1316              		@ args = 0, pretend = 0, frame = 16
 1317              		@ frame_needed = 0, uses_anonymous_args = 0
   8:quantum/rgb_matrix_runners/effect_runner_reactive.h ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
 1318              		.loc 9 8 5 view .LVU325
   7:quantum/rgb_matrix_runners/effect_runner_reactive.h ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
 1319              		.loc 9 7 78 is_stmt 0 view .LVU326
 1320 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1321              		.cfi_def_cfa_offset 36
 1322              		.cfi_offset 4, -36
 1323              		.cfi_offset 5, -32
 1324              		.cfi_offset 6, -28
 1325              		.cfi_offset 7, -24
 1326              		.cfi_offset 8, -20
 1327              		.cfi_offset 9, -16
 1328              		.cfi_offset 10, -12
 1329              		.cfi_offset 11, -8
 1330              		.cfi_offset 14, -4
 1331              		.loc 9 8 5 view .LVU327
 1332 0004 0478     		ldrb	r4, [r0]	@ zero_extendqisi2
   9:quantum/rgb_matrix_runners/effect_runner_reactive.h **** 
  10:quantum/rgb_matrix_runners/effect_runner_reactive.h ****     uint16_t max_tick = 65535 / rgb_matrix_config.speed;
 1333              		.loc 9 10 50 view .LVU328
 1334 0006 314D     		ldr	r5, .L83
 1335              	.LBB103:
 1336              	.LBB104:
  11:quantum/rgb_matrix_runners/effect_runner_reactive.h ****     for (uint8_t i = led_min; i < led_max; i++) {
  12:quantum/rgb_matrix_runners/effect_runner_reactive.h ****         RGB_MATRIX_TEST_LED_FLAGS();
 1337              		.loc 9 12 9 view .LVU329
 1338 0008 DFF8C4B0 		ldr	fp, .L83+4
 1339              	.LBB105:
  13:quantum/rgb_matrix_runners/effect_runner_reactive.h ****         uint16_t tick = max_tick;
  14:quantum/rgb_matrix_runners/effect_runner_reactive.h ****         // Reverse search to find most recent key hit
  15:quantum/rgb_matrix_runners/effect_runner_reactive.h ****         for (int8_t j = g_last_hit_tracker.count - 1; j >= 0; j--) {
 1340              		.loc 9 15 43 view .LVU330
 1341 000c DFF8C490 		ldr	r9, .L83+8
 1342              	.LBE105:
 1343              	.LBE104:
 1344              	.LBE103:
  10:quantum/rgb_matrix_runners/effect_runner_reactive.h ****     for (uint8_t i = led_min; i < led_max; i++) {
 1345              		.loc 9 10 50 view .LVU331
 1346 0010 2B79     		ldrb	r3, [r5, #4]	@ zero_extendqisi2
   8:quantum/rgb_matrix_runners/effect_runner_reactive.h **** 
 1347              		.loc 9 8 5 view .LVU332
 1348 0012 C4EB0414 		rsb	r4, r4, r4, lsl #4
 1349 0016 E4B2     		uxtb	r4, r4
 1350              	.LVL95:
   8:quantum/rgb_matrix_runners/effect_runner_reactive.h **** 
 1351              		.loc 9 8 5 is_stmt 1 view .LVU333
 1352 0018 04F10F06 		add	r6, r4, #15
 1353 001c F6B2     		uxtb	r6, r6
 1354              	.LVL96:
   8:quantum/rgb_matrix_runners/effect_runner_reactive.h **** 
 1355              		.loc 9 8 5 view .LVU334
   7:quantum/rgb_matrix_runners/effect_runner_reactive.h ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
 1356              		.loc 9 7 78 is_stmt 0 view .LVU335
 1357 001e 85B0     		sub	sp, sp, #20
 1358              		.cfi_def_cfa_offset 56
 1359 0020 772E     		cmp	r6, #119
 1360 0022 B246     		mov	r10, r6
   7:quantum/rgb_matrix_runners/effect_runner_reactive.h ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
 1361              		.loc 9 7 78 view .LVU336
 1362 0024 8046     		mov	r8, r0
 1363 0026 0191     		str	r1, [sp, #4]
 1364 0028 28BF     		it	cs
 1365 002a 4FF0770A 		movcs	r10, #119
 1366              	.LVL97:
   8:quantum/rgb_matrix_runners/effect_runner_reactive.h **** 
 1367              		.loc 9 8 44 is_stmt 1 view .LVU337
  10:quantum/rgb_matrix_runners/effect_runner_reactive.h ****     for (uint8_t i = led_min; i < led_max; i++) {
 1368              		.loc 9 10 5 view .LVU338
  10:quantum/rgb_matrix_runners/effect_runner_reactive.h ****     for (uint8_t i = led_min; i < led_max; i++) {
 1369              		.loc 9 10 14 is_stmt 0 view .LVU339
 1370 002e 4FF6FF77 		movw	r7, #65535
 1371 0032 B7FBF3F7 		udiv	r7, r7, r3
 1372              	.LVL98:
  11:quantum/rgb_matrix_runners/effect_runner_reactive.h ****         RGB_MATRIX_TEST_LED_FLAGS();
 1373              		.loc 9 11 5 is_stmt 1 view .LVU340
 1374              	.LBB116:
  11:quantum/rgb_matrix_runners/effect_runner_reactive.h ****         RGB_MATRIX_TEST_LED_FLAGS();
 1375              		.loc 9 11 10 view .LVU341
 1376              	.L75:
  11:quantum/rgb_matrix_runners/effect_runner_reactive.h ****         RGB_MATRIX_TEST_LED_FLAGS();
 1377              		.loc 9 11 10 is_stmt 0 view .LVU342
 1378 0036 E0B2     		uxtb	r0, r4
  11:quantum/rgb_matrix_runners/effect_runner_reactive.h ****         RGB_MATRIX_TEST_LED_FLAGS();
 1379              		.loc 9 11 5 discriminator 1 view .LVU343
 1380 0038 8245     		cmp	r10, r0
 1381 003a 06D8     		bhi	.L82
 1382              	.LBE116:
  16:quantum/rgb_matrix_runners/effect_runner_reactive.h ****             if (g_last_hit_tracker.index[j] == i && g_last_hit_tracker.tick[j] < tick) {
  17:quantum/rgb_matrix_runners/effect_runner_reactive.h ****                 tick = g_last_hit_tracker.tick[j];
  18:quantum/rgb_matrix_runners/effect_runner_reactive.h ****                 break;
  19:quantum/rgb_matrix_runners/effect_runner_reactive.h ****             }
  20:quantum/rgb_matrix_runners/effect_runner_reactive.h ****         }
  21:quantum/rgb_matrix_runners/effect_runner_reactive.h **** 
  22:quantum/rgb_matrix_runners/effect_runner_reactive.h ****         uint16_t offset = scale16by8(tick, rgb_matrix_config.speed);
  23:quantum/rgb_matrix_runners/effect_runner_reactive.h ****         RGB      rgb    = hsv_to_rgb(effect_func(rgb_matrix_config.hsv, offset));
  24:quantum/rgb_matrix_runners/effect_runner_reactive.h ****         rgb_matrix_set_color(i, rgb.r, rgb.g, rgb.b);
  25:quantum/rgb_matrix_runners/effect_runner_reactive.h ****     }
  26:quantum/rgb_matrix_runners/effect_runner_reactive.h ****     return led_max < DRIVER_LED_TOTAL;
 1383              		.loc 9 26 5 is_stmt 1 view .LVU344
  27:quantum/rgb_matrix_runners/effect_runner_reactive.h **** }
 1384              		.loc 9 27 1 is_stmt 0 view .LVU345
 1385 003c 762E     		cmp	r6, #118
 1386 003e 8CBF     		ite	hi
 1387 0040 0020     		movhi	r0, #0
 1388 0042 0120     		movls	r0, #1
 1389 0044 05B0     		add	sp, sp, #20
 1390              		.cfi_remember_state
 1391              		.cfi_def_cfa_offset 36
 1392              		@ sp needed
 1393 0046 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1394              	.LVL99:
 1395              	.L82:
 1396              		.cfi_restore_state
 1397              	.LBB117:
 1398              	.LBB114:
  12:quantum/rgb_matrix_runners/effect_runner_reactive.h ****         uint16_t tick = max_tick;
 1399              		.loc 9 12 9 is_stmt 1 view .LVU346
 1400 004a 14F80B20 		ldrb	r2, [r4, fp]	@ zero_extendqisi2
 1401 004e 98F80130 		ldrb	r3, [r8, #1]	@ zero_extendqisi2
 1402 0052 1A42     		tst	r2, r3
 1403 0054 2AD0     		beq	.L77
  13:quantum/rgb_matrix_runners/effect_runner_reactive.h ****         // Reverse search to find most recent key hit
 1404              		.loc 9 13 9 view .LVU347
  15:quantum/rgb_matrix_runners/effect_runner_reactive.h ****             if (g_last_hit_tracker.index[j] == i && g_last_hit_tracker.tick[j] < tick) {
 1405              		.loc 9 15 9 view .LVU348
 1406              	.LBB106:
  15:quantum/rgb_matrix_runners/effect_runner_reactive.h ****             if (g_last_hit_tracker.index[j] == i && g_last_hit_tracker.tick[j] < tick) {
 1407              		.loc 9 15 14 view .LVU349
 1408              	.LVL100:
  15:quantum/rgb_matrix_runners/effect_runner_reactive.h ****             if (g_last_hit_tracker.index[j] == i && g_last_hit_tracker.tick[j] < tick) {
 1409              		.loc 9 15 50 is_stmt 0 view .LVU350
 1410 0056 99F80030 		ldrb	r3, [r9]	@ zero_extendqisi2
  16:quantum/rgb_matrix_runners/effect_runner_reactive.h ****                 tick = g_last_hit_tracker.tick[j];
 1411              		.loc 9 16 41 view .LVU351
 1412 005a DFF87CC0 		ldr	ip, .L83+12
  15:quantum/rgb_matrix_runners/effect_runner_reactive.h ****             if (g_last_hit_tracker.index[j] == i && g_last_hit_tracker.tick[j] < tick) {
 1413              		.loc 9 15 50 view .LVU352
 1414 005e 013B     		subs	r3, r3, #1
 1415 0060 5BB2     		sxtb	r3, r3
 1416              	.LVL101:
 1417              	.L78:
  15:quantum/rgb_matrix_runners/effect_runner_reactive.h ****             if (g_last_hit_tracker.index[j] == i && g_last_hit_tracker.tick[j] < tick) {
 1418              		.loc 9 15 9 discriminator 1 view .LVU353
 1419 0062 1A06     		lsls	r2, r3, #24
 1420 0064 24D5     		bpl	.L81
 1421              	.LBE106:
 1422              	.LBE114:
 1423              	.LBE117:
  10:quantum/rgb_matrix_runners/effect_runner_reactive.h ****     for (uint8_t i = led_min; i < led_max; i++) {
 1424              		.loc 9 10 14 view .LVU354
 1425 0066 3946     		mov	r1, r7
 1426              	.L80:
 1427              	.LVL102:
 1428              	.LBB118:
 1429              	.LBB115:
  22:quantum/rgb_matrix_runners/effect_runner_reactive.h ****         RGB      rgb    = hsv_to_rgb(effect_func(rgb_matrix_config.hsv, offset));
 1430              		.loc 9 22 9 is_stmt 1 view .LVU355
 1431              	.LBB107:
 1432              	.LBI107:
 246:./lib/lib8tion/scale8.h **** {
 1433              		.loc 5 246 35 view .LVU356
 1434              	.LBB108:
 249:./lib/lib8tion/scale8.h **** #if FASTLED_SCALE8_FIXED == 1
 1435              		.loc 5 249 5 view .LVU357
 253:./lib/lib8tion/scale8.h **** #endif
 1436              		.loc 5 253 5 view .LVU358
 1437              		.loc 5 255 5 view .LVU359
 1438              		.loc 5 255 5 is_stmt 0 view .LVU360
 1439              	.LBE108:
 1440              	.LBE107:
  23:quantum/rgb_matrix_runners/effect_runner_reactive.h ****         rgb_matrix_set_color(i, rgb.r, rgb.g, rgb.b);
 1441              		.loc 9 23 9 is_stmt 1 view .LVU361
 1442              	.LBB111:
 1443              	.LBB109:
 253:./lib/lib8tion/scale8.h **** #endif
 1444              		.loc 5 253 17 is_stmt 0 view .LVU362
 1445 0068 2B79     		ldrb	r3, [r5, #4]	@ zero_extendqisi2
 1446              	.LVL103:
 253:./lib/lib8tion/scale8.h **** #endif
 1447              		.loc 5 253 17 view .LVU363
 1448              	.LBE109:
 1449              	.LBE111:
  23:quantum/rgb_matrix_runners/effect_runner_reactive.h ****         rgb_matrix_set_color(i, rgb.r, rgb.g, rgb.b);
 1450              		.loc 9 23 27 view .LVU364
 1451 006a A878     		ldrb	r0, [r5, #2]	@ zero_extendqisi2
 1452              	.LBB112:
 1453              	.LBB110:
 253:./lib/lib8tion/scale8.h **** #endif
 1454              		.loc 5 253 17 view .LVU365
 1455 006c 5943     		muls	r1, r3, r1
 1456              	.LVL104:
 253:./lib/lib8tion/scale8.h **** #endif
 1457              		.loc 5 253 17 view .LVU366
 1458              	.LBE110:
 1459              	.LBE112:
  23:quantum/rgb_matrix_runners/effect_runner_reactive.h ****         rgb_matrix_set_color(i, rgb.r, rgb.g, rgb.b);
 1460              		.loc 9 23 27 view .LVU367
 1461 006e 6B78     		ldrb	r3, [r5, #1]	@ zero_extendqisi2
 1462 0070 43EA0023 		orr	r3, r3, r0, lsl #8
 1463 0074 E878     		ldrb	r0, [r5, #3]	@ zero_extendqisi2
 1464 0076 C1F30F21 		ubfx	r1, r1, #8, #16
 1465 007a 43EA0040 		orr	r0, r3, r0, lsl #16
 1466 007e 019B     		ldr	r3, [sp, #4]
 1467 0080 9847     		blx	r3
 1468              	.LVL105:
  23:quantum/rgb_matrix_runners/effect_runner_reactive.h ****         rgb_matrix_set_color(i, rgb.r, rgb.g, rgb.b);
 1469              		.loc 9 23 27 view .LVU368
 1470 0082 C0F30723 		ubfx	r3, r0, #8, #8
 1471 0086 8DF80C00 		strb	r0, [sp, #12]
 1472 008a C0F30740 		ubfx	r0, r0, #16, #8
 1473 008e 8DF80D30 		strb	r3, [sp, #13]
 1474 0092 8DF80E00 		strb	r0, [sp, #14]
 1475 0096 0398     		ldr	r0, [sp, #12]
 1476 0098 FFF7FEFF 		bl	hsv_to_rgb
 1477              	.LVL106:
  24:quantum/rgb_matrix_runners/effect_runner_reactive.h ****     }
 1478              		.loc 9 24 9 is_stmt 1 view .LVU369
 1479 009c C0F30743 		ubfx	r3, r0, #16, #8
 1480 00a0 C2B2     		uxtb	r2, r0
 1481 00a2 C0F30721 		ubfx	r1, r0, #8, #8
 1482 00a6 2046     		mov	r0, r4
 1483 00a8 FFF7FEFF 		bl	rgb_matrix_set_color
 1484              	.LVL107:
 1485              	.L77:
  24:quantum/rgb_matrix_runners/effect_runner_reactive.h ****     }
 1486              		.loc 9 24 9 is_stmt 0 view .LVU370
 1487 00ac 0134     		adds	r4, r4, #1
 1488              	.LVL108:
  24:quantum/rgb_matrix_runners/effect_runner_reactive.h ****     }
 1489              		.loc 9 24 9 view .LVU371
 1490 00ae C2E7     		b	.L75
 1491              	.LVL109:
 1492              	.L81:
 1493              	.LBB113:
  16:quantum/rgb_matrix_runners/effect_runner_reactive.h ****                 tick = g_last_hit_tracker.tick[j];
 1494              		.loc 9 16 13 is_stmt 1 view .LVU372
  16:quantum/rgb_matrix_runners/effect_runner_reactive.h ****                 tick = g_last_hit_tracker.tick[j];
 1495              		.loc 9 16 16 is_stmt 0 view .LVU373
 1496 00b0 13F80C20 		ldrb	r2, [r3, ip]	@ zero_extendqisi2
 1497 00b4 8242     		cmp	r2, r0
 1498 00b6 07D1     		bne	.L79
  16:quantum/rgb_matrix_runners/effect_runner_reactive.h ****                 tick = g_last_hit_tracker.tick[j];
 1499              		.loc 9 16 76 discriminator 1 view .LVU374
 1500 00b8 03F10C02 		add	r2, r3, #12
 1501 00bc 09EB4202 		add	r2, r9, r2, lsl #1
 1502 00c0 B2F80110 		ldrh	r1, [r2, #1]	@ unaligned
  16:quantum/rgb_matrix_runners/effect_runner_reactive.h ****                 tick = g_last_hit_tracker.tick[j];
 1503              		.loc 9 16 50 discriminator 1 view .LVU375
 1504 00c4 B942     		cmp	r1, r7
 1505 00c6 CFD3     		bcc	.L80
 1506              	.L79:
 1507              	.LVL110:
  16:quantum/rgb_matrix_runners/effect_runner_reactive.h ****                 tick = g_last_hit_tracker.tick[j];
 1508              		.loc 9 16 50 discriminator 1 view .LVU376
 1509 00c8 013B     		subs	r3, r3, #1
 1510              	.LVL111:
  16:quantum/rgb_matrix_runners/effect_runner_reactive.h ****                 tick = g_last_hit_tracker.tick[j];
 1511              		.loc 9 16 50 discriminator 1 view .LVU377
 1512 00ca CAE7     		b	.L78
 1513              	.L84:
 1514              		.align	2
 1515              	.L83:
 1516 00cc 00000000 		.word	rgb_matrix_config
 1517 00d0 46010000 		.word	g_led_config+326
 1518 00d4 00000000 		.word	g_last_hit_tracker
 1519 00d8 11000000 		.word	g_last_hit_tracker+17
 1520              	.LBE113:
 1521              	.LBE115:
 1522              	.LBE118:
 1523              		.cfi_endproc
 1524              	.LFE84:
 1526              		.section	.text.effect_runner_reactive_splash,"ax",%progbits
 1527              		.align	1
 1528              		.global	effect_runner_reactive_splash
 1529              		.syntax unified
 1530              		.thumb
 1531              		.thumb_func
 1532              		.fpu fpv4-sp-d16
 1534              	effect_runner_reactive_splash:
 1535              	.LVL112:
 1536              	.LFB85:
 1537              		.file 10 "quantum/rgb_matrix_runners/effect_runner_reactive_splash.h"
   1:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h **** #pragma once
   2:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h **** 
   3:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h **** #ifdef RGB_MATRIX_KEYREACTIVE_ENABLED
   4:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h **** 
   5:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h **** typedef HSV (*reactive_splash_f)(HSV hsv, int16_t dx, int16_t dy, uint8_t dist, uint16_t tick);
   6:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h **** 
   7:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h **** bool effect_runner_reactive_splash(uint8_t start, effect_params_t* params, reactive_splash_f effect
 1538              		.loc 10 7 107 is_stmt 1 view -0
 1539              		.cfi_startproc
 1540              		@ args = 0, pretend = 0, frame = 48
 1541              		@ frame_needed = 0, uses_anonymous_args = 0
   8:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
 1542              		.loc 10 8 5 view .LVU379
   7:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
 1543              		.loc 10 7 107 is_stmt 0 view .LVU380
 1544 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1545              		.cfi_def_cfa_offset 36
 1546              		.cfi_offset 4, -36
 1547              		.cfi_offset 5, -32
 1548              		.cfi_offset 6, -28
 1549              		.cfi_offset 7, -24
 1550              		.cfi_offset 8, -20
 1551              		.cfi_offset 9, -16
 1552              		.cfi_offset 10, -12
 1553              		.cfi_offset 11, -8
 1554              		.cfi_offset 14, -4
 1555              		.loc 10 8 5 view .LVU381
 1556 0004 0C78     		ldrb	r4, [r1]	@ zero_extendqisi2
 1557              	.LBB119:
 1558              	.LBB120:
 1559              	.LBB121:
 1560              	.LBB122:
   9:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h **** 
  10:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****     uint8_t count = g_last_hit_tracker.count;
  11:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****     for (uint8_t i = led_min; i < led_max; i++) {
  12:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****         RGB_MATRIX_TEST_LED_FLAGS();
  13:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****         HSV hsv = rgb_matrix_config.hsv;
  14:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****         hsv.v   = 0;
  15:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****         for (uint8_t j = start; j < count; j++) {
  16:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****             int16_t  dx   = g_led_config.point[i].x - g_last_hit_tracker.x[j];
  17:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****             int16_t  dy   = g_led_config.point[i].y - g_last_hit_tracker.y[j];
  18:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****             uint8_t  dist = sqrt16(dx * dx + dy * dy);
  19:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****             uint16_t tick = scale16by8(g_last_hit_tracker.tick[j], rgb_matrix_config.speed);
 1561              		.loc 10 19 29 view .LVU382
 1562 0006 DFF824B1 		ldr	fp, .L92+12
 1563              	.LBE122:
 1564              	.LBE121:
 1565              	.LBE120:
 1566              	.LBE119:
   8:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h **** 
 1567              		.loc 10 8 5 view .LVU383
 1568 000a C4EB0414 		rsb	r4, r4, r4, lsl #4
 1569 000e E4B2     		uxtb	r4, r4
 1570              	.LVL113:
   8:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h **** 
 1571              		.loc 10 8 5 is_stmt 1 view .LVU384
 1572 0010 04F10F06 		add	r6, r4, #15
 1573 0014 F6B2     		uxtb	r6, r6
 1574              	.LVL114:
   8:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h **** 
 1575              		.loc 10 8 5 view .LVU385
   7:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
 1576              		.loc 10 7 107 is_stmt 0 view .LVU386
 1577 0016 8FB0     		sub	sp, sp, #60
 1578              		.cfi_def_cfa_offset 96
 1579 0018 772E     		cmp	r6, #119
 1580 001a 3346     		mov	r3, r6
 1581 001c 28BF     		it	cs
 1582 001e 7723     		movcs	r3, #119
 1583 0020 0593     		str	r3, [sp, #20]
 1584              	.LVL115:
   8:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h **** 
 1585              		.loc 10 8 44 is_stmt 1 view .LVU387
  10:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****     for (uint8_t i = led_min; i < led_max; i++) {
 1586              		.loc 10 10 5 view .LVU388
  10:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****     for (uint8_t i = led_min; i < led_max; i++) {
 1587              		.loc 10 10 13 is_stmt 0 view .LVU389
 1588 0022 3F4B     		ldr	r3, .L92
   7:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
 1589              		.loc 10 7 107 view .LVU390
 1590 0024 0692     		str	r2, [sp, #24]
  10:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****     for (uint8_t i = led_min; i < led_max; i++) {
 1591              		.loc 10 10 13 view .LVU391
 1592 0026 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1593 0028 0493     		str	r3, [sp, #16]
 1594              	.LVL116:
  11:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****         RGB_MATRIX_TEST_LED_FLAGS();
 1595              		.loc 10 11 5 is_stmt 1 view .LVU392
 1596              	.LBB143:
  11:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****         RGB_MATRIX_TEST_LED_FLAGS();
 1597              		.loc 10 11 10 view .LVU393
  11:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****         RGB_MATRIX_TEST_LED_FLAGS();
 1598              		.loc 10 11 10 is_stmt 0 view .LVU394
 1599 002a 3E4B     		ldr	r3, .L92+4
 1600 002c 03EB4407 		add	r7, r3, r4, lsl #1
 1601              	.LBB140:
  12:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****         HSV hsv = rgb_matrix_config.hsv;
 1602              		.loc 10 12 9 view .LVU395
 1603 0030 03F5A373 		add	r3, r3, #326
 1604              	.LBE140:
 1605              	.LBE143:
   7:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
 1606              		.loc 10 7 107 view .LVU396
 1607 0034 8146     		mov	r9, r0
 1608 0036 8A46     		mov	r10, r1
 1609              	.LBB144:
 1610              	.LBB141:
  12:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****         HSV hsv = rgb_matrix_config.hsv;
 1611              		.loc 10 12 9 view .LVU397
 1612 0038 0893     		str	r3, [sp, #32]
 1613              	.LVL117:
 1614              	.L86:
  12:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****         HSV hsv = rgb_matrix_config.hsv;
 1615              		.loc 10 12 9 view .LVU398
 1616              	.LBE141:
  11:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****         RGB_MATRIX_TEST_LED_FLAGS();
 1617              		.loc 10 11 5 discriminator 1 view .LVU399
 1618 003a 059A     		ldr	r2, [sp, #20]
 1619 003c E3B2     		uxtb	r3, r4
 1620 003e 9A42     		cmp	r2, r3
 1621 0040 06D8     		bhi	.L91
 1622              	.LBE144:
  20:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****             hsv           = effect_func(hsv, dx, dy, dist, tick);
  21:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****         }
  22:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****         hsv.v   = scale8(hsv.v, rgb_matrix_config.hsv.v);
  23:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****         RGB rgb = hsv_to_rgb(hsv);
  24:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****         rgb_matrix_set_color(i, rgb.r, rgb.g, rgb.b);
  25:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****     }
  26:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****     return led_max < DRIVER_LED_TOTAL;
 1623              		.loc 10 26 5 is_stmt 1 view .LVU400
  27:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h **** }
 1624              		.loc 10 27 1 is_stmt 0 view .LVU401
 1625 0042 762E     		cmp	r6, #118
 1626 0044 8CBF     		ite	hi
 1627 0046 0020     		movhi	r0, #0
 1628 0048 0120     		movls	r0, #1
 1629 004a 0FB0     		add	sp, sp, #60
 1630              		.cfi_remember_state
 1631              		.cfi_def_cfa_offset 36
 1632              		@ sp needed
 1633 004c BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1634              	.LVL118:
 1635              	.L91:
 1636              		.cfi_restore_state
 1637              	.LBB145:
 1638              	.LBB142:
  12:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****         HSV hsv = rgb_matrix_config.hsv;
 1639              		.loc 10 12 9 is_stmt 1 view .LVU402
 1640 0050 089B     		ldr	r3, [sp, #32]
 1641 0052 E25C     		ldrb	r2, [r4, r3]	@ zero_extendqisi2
 1642 0054 9AF80130 		ldrb	r3, [r10, #1]	@ zero_extendqisi2
 1643 0058 1A42     		tst	r2, r3
 1644 005a 22D0     		beq	.L88
  13:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****         hsv.v   = 0;
 1645              		.loc 10 13 9 view .LVU403
  13:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****         hsv.v   = 0;
 1646              		.loc 10 13 13 is_stmt 0 view .LVU404
 1647 005c 324B     		ldr	r3, .L92+8
 1648 005e 304A     		ldr	r2, .L92
 1649 0060 1B88     		ldrh	r3, [r3]	@ unaligned
 1650 0062 ADF83030 		strh	r3, [sp, #48]	@ unaligned
 1651              	.LVL119:
  14:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****         for (uint8_t j = start; j < count; j++) {
 1652              		.loc 10 14 9 is_stmt 1 view .LVU405
  15:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****             int16_t  dx   = g_led_config.point[i].x - g_last_hit_tracker.x[j];
 1653              		.loc 10 15 9 view .LVU406
 1654              	.LBB133:
  15:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****             int16_t  dx   = g_led_config.point[i].x - g_last_hit_tracker.x[j];
 1655              		.loc 10 15 14 view .LVU407
  15:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****             int16_t  dx   = g_led_config.point[i].x - g_last_hit_tracker.x[j];
 1656              		.loc 10 15 14 is_stmt 0 view .LVU408
 1657 0066 09F10105 		add	r5, r9, #1
 1658 006a AB18     		adds	r3, r5, r2
 1659 006c 0393     		str	r3, [sp, #12]
 1660 006e C846     		mov	r8, r9
 1661              	.LBE133:
  14:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****         for (uint8_t j = start; j < count; j++) {
 1662              		.loc 10 14 17 view .LVU409
 1663 0070 0023     		movs	r3, #0
 1664              	.LBB134:
 1665              	.LBB131:
  19:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****             hsv           = effect_func(hsv, dx, dy, dist, tick);
 1666              		.loc 10 19 29 view .LVU410
 1667 0072 0792     		str	r2, [sp, #28]
 1668              	.LVL120:
 1669              	.L89:
  19:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****             hsv           = effect_func(hsv, dx, dy, dist, tick);
 1670              		.loc 10 19 29 view .LVU411
 1671              	.LBE131:
  15:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****             int16_t  dx   = g_led_config.point[i].x - g_last_hit_tracker.x[j];
 1672              		.loc 10 15 9 discriminator 1 view .LVU412
 1673 0074 0499     		ldr	r1, [sp, #16]
 1674 0076 5FFA88F2 		uxtb	r2, r8
 1675 007a 9142     		cmp	r1, r2
 1676 007c 14D8     		bhi	.L90
 1677              	.LBE134:
  22:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****         RGB rgb = hsv_to_rgb(hsv);
 1678              		.loc 10 22 9 is_stmt 1 view .LVU413
 1679              	.LVL121:
 1680              	.LBB135:
 1681              	.LBI135:
  20:./lib/lib8tion/scale8.h **** {
 1682              		.loc 5 20 34 view .LVU414
 1683              	.LBB136:
  26:./lib/lib8tion/scale8.h **** #endif
 1684              		.loc 5 26 5 view .LVU415
  26:./lib/lib8tion/scale8.h **** #endif
 1685              		.loc 5 26 5 is_stmt 0 view .LVU416
 1686              	.LBE136:
 1687              	.LBE135:
  23:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****         rgb_matrix_set_color(i, rgb.r, rgb.g, rgb.b);
 1688              		.loc 10 23 9 is_stmt 1 view .LVU417
 1689              	.LBB138:
 1690              	.LBB137:
  26:./lib/lib8tion/scale8.h **** #endif
 1691              		.loc 5 26 25 is_stmt 0 view .LVU418
 1692 007e 9BF80300 		ldrb	r0, [fp, #3]	@ zero_extendqisi2
 1693 0082 10FB03F3 		smulbb	r3, r0, r3
 1694              	.LVL122:
  26:./lib/lib8tion/scale8.h **** #endif
 1695              		.loc 5 26 47 view .LVU419
 1696 0086 1B12     		asrs	r3, r3, #8
 1697 0088 8DF83230 		strb	r3, [sp, #50]
 1698              	.LBE137:
 1699              	.LBE138:
  23:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****         rgb_matrix_set_color(i, rgb.r, rgb.g, rgb.b);
 1700              		.loc 10 23 19 view .LVU420
 1701 008c 0C98     		ldr	r0, [sp, #48]
 1702 008e FFF7FEFF 		bl	hsv_to_rgb
 1703              	.LVL123:
  24:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****     }
 1704              		.loc 10 24 9 is_stmt 1 view .LVU421
 1705 0092 C0F30743 		ubfx	r3, r0, #16, #8
 1706 0096 C2B2     		uxtb	r2, r0
 1707 0098 C0F30721 		ubfx	r1, r0, #8, #8
 1708 009c 2046     		mov	r0, r4
 1709 009e FFF7FEFF 		bl	rgb_matrix_set_color
 1710              	.LVL124:
 1711              	.L88:
  24:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****     }
 1712              		.loc 10 24 9 is_stmt 0 view .LVU422
 1713 00a2 0134     		adds	r4, r4, #1
 1714              	.LVL125:
  24:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****     }
 1715              		.loc 10 24 9 view .LVU423
 1716 00a4 0237     		adds	r7, r7, #2
 1717 00a6 C8E7     		b	.L86
 1718              	.LVL126:
 1719              	.L90:
  24:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****     }
 1720              		.loc 10 24 9 view .LVU424
 1721 00a8 0B93     		str	r3, [sp, #44]
 1722              	.LBB139:
 1723              	.LBB132:
  16:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****             int16_t  dy   = g_led_config.point[i].y - g_last_hit_tracker.y[j];
 1724              		.loc 10 16 13 is_stmt 1 discriminator 3 view .LVU425
  16:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****             int16_t  dy   = g_led_config.point[i].y - g_last_hit_tracker.y[j];
 1725              		.loc 10 16 75 is_stmt 0 discriminator 3 view .LVU426
 1726 00aa 039B     		ldr	r3, [sp, #12]
 1727              	.LVL127:
  16:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****             int16_t  dy   = g_led_config.point[i].y - g_last_hit_tracker.y[j];
 1728              		.loc 10 16 50 discriminator 3 view .LVU427
 1729 00ac 97F85810 		ldrb	r1, [r7, #88]	@ zero_extendqisi2
  16:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****             int16_t  dy   = g_led_config.point[i].y - g_last_hit_tracker.y[j];
 1730              		.loc 10 16 75 discriminator 3 view .LVU428
 1731 00b0 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 1732 00b4 0393     		str	r3, [sp, #12]
  17:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****             uint8_t  dist = sqrt16(dx * dx + dy * dy);
 1733              		.loc 10 17 75 discriminator 3 view .LVU429
 1734 00b6 D879     		ldrb	r0, [r3, #7]	@ zero_extendqisi2
  16:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****             int16_t  dy   = g_led_config.point[i].y - g_last_hit_tracker.y[j];
 1735              		.loc 10 16 53 discriminator 3 view .LVU430
 1736 00b8 891A     		subs	r1, r1, r2
  17:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****             uint8_t  dist = sqrt16(dx * dx + dy * dy);
 1737              		.loc 10 17 50 discriminator 3 view .LVU431
 1738 00ba 97F85920 		ldrb	r2, [r7, #89]	@ zero_extendqisi2
  17:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****             uint8_t  dist = sqrt16(dx * dx + dy * dy);
 1739              		.loc 10 17 53 discriminator 3 view .LVU432
 1740 00be 121A     		subs	r2, r2, r0
 1741 00c0 92B2     		uxth	r2, r2
  16:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****             int16_t  dy   = g_led_config.point[i].y - g_last_hit_tracker.y[j];
 1742              		.loc 10 16 53 discriminator 3 view .LVU433
 1743 00c2 89B2     		uxth	r1, r1
 1744              	.LVL128:
  17:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****             uint8_t  dist = sqrt16(dx * dx + dy * dy);
 1745              		.loc 10 17 13 is_stmt 1 discriminator 3 view .LVU434
  18:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****             uint16_t tick = scale16by8(g_last_hit_tracker.tick[j], rgb_matrix_config.speed);
 1746              		.loc 10 18 13 discriminator 3 view .LVU435
  18:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****             uint16_t tick = scale16by8(g_last_hit_tracker.tick[j], rgb_matrix_config.speed);
 1747              		.loc 10 18 49 is_stmt 0 discriminator 3 view .LVU436
 1748 00c4 12FB02F0 		smulbb	r0, r2, r2
  18:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****             uint16_t tick = scale16by8(g_last_hit_tracker.tick[j], rgb_matrix_config.speed);
 1749              		.loc 10 18 29 discriminator 3 view .LVU437
 1750 00c8 11FB0100 		smlabb	r0, r1, r1, r0
 1751 00cc 80B2     		uxth	r0, r0
  18:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****             uint16_t tick = scale16by8(g_last_hit_tracker.tick[j], rgb_matrix_config.speed);
 1752              		.loc 10 18 49 discriminator 3 view .LVU438
 1753 00ce 0A92     		str	r2, [sp, #40]
  18:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****             uint16_t tick = scale16by8(g_last_hit_tracker.tick[j], rgb_matrix_config.speed);
 1754              		.loc 10 18 29 discriminator 3 view .LVU439
 1755 00d0 0991     		str	r1, [sp, #36]
 1756 00d2 FFF7FEFF 		bl	sqrt16
 1757              	.LVL129:
  19:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****             hsv           = effect_func(hsv, dx, dy, dist, tick);
 1758              		.loc 10 19 13 is_stmt 1 discriminator 3 view .LVU440
 1759              	.LBB123:
 1760              	.LBI123:
 246:./lib/lib8tion/scale8.h **** {
 1761              		.loc 5 246 35 discriminator 3 view .LVU441
 1762              	.LBB124:
 249:./lib/lib8tion/scale8.h **** #if FASTLED_SCALE8_FIXED == 1
 1763              		.loc 5 249 5 discriminator 3 view .LVU442
 253:./lib/lib8tion/scale8.h **** #endif
 1764              		.loc 5 253 5 discriminator 3 view .LVU443
 1765              	.LBE124:
 1766              	.LBE123:
  19:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****             hsv           = effect_func(hsv, dx, dy, dist, tick);
 1767              		.loc 10 19 29 is_stmt 0 discriminator 3 view .LVU444
 1768 00d6 079B     		ldr	r3, [sp, #28]
 1769              	.LBB128:
 1770              	.LBB125:
 253:./lib/lib8tion/scale8.h **** #endif
 1771              		.loc 5 253 17 discriminator 3 view .LVU445
 1772 00d8 9BF804E0 		ldrb	lr, [fp, #4]	@ zero_extendqisi2
 1773              	.LBE125:
 1774              	.LBE128:
  20:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****         }
 1775              		.loc 10 20 29 discriminator 3 view .LVU446
 1776 00dc 0A9A     		ldr	r2, [sp, #40]
 1777 00de 0999     		ldr	r1, [sp, #36]
 1778 00e0 069D     		ldr	r5, [sp, #24]
  19:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****             hsv           = effect_func(hsv, dx, dy, dist, tick);
 1779              		.loc 10 19 29 discriminator 3 view .LVU447
 1780 00e2 08F10C0C 		add	ip, r8, #12
 1781 00e6 03EB4C0C 		add	ip, r3, ip, lsl #1
  20:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****         }
 1782              		.loc 10 20 29 discriminator 3 view .LVU448
 1783 00ea 0B9B     		ldr	r3, [sp, #44]
 1784              	.LBB129:
 1785              	.LBB126:
 253:./lib/lib8tion/scale8.h **** #endif
 1786              		.loc 5 253 17 discriminator 3 view .LVU449
 1787 00ec BCF801C0 		ldrh	ip, [ip, #1]	@ unaligned
 1788              	.LBE126:
 1789              	.LBE129:
  20:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****         }
 1790              		.loc 10 20 29 discriminator 3 view .LVU450
 1791 00f0 8DF83230 		strb	r3, [sp, #50]
 1792              	.LBB130:
 1793              	.LBB127:
 253:./lib/lib8tion/scale8.h **** #endif
 1794              		.loc 5 253 17 discriminator 3 view .LVU451
 1795 00f4 0CFB0EFC 		mul	ip, ip, lr
 253:./lib/lib8tion/scale8.h **** #endif
 1796              		.loc 5 253 12 discriminator 3 view .LVU452
 1797 00f8 4FEA1C2C 		lsr	ip, ip, #8
 1798              	.LVL130:
 1799              		.loc 5 255 5 is_stmt 1 discriminator 3 view .LVU453
 1800              		.loc 5 255 5 is_stmt 0 discriminator 3 view .LVU454
 1801              	.LBE127:
 1802              	.LBE130:
  20:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****         }
 1803              		.loc 10 20 13 is_stmt 1 discriminator 3 view .LVU455
  20:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****         }
 1804              		.loc 10 20 29 is_stmt 0 discriminator 3 view .LVU456
 1805 00fc 0346     		mov	r3, r0
 1806 00fe CDF800C0 		str	ip, [sp]
 1807 0102 12B2     		sxth	r2, r2
 1808 0104 09B2     		sxth	r1, r1
 1809 0106 0C98     		ldr	r0, [sp, #48]
 1810              	.LVL131:
  20:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****         }
 1811              		.loc 10 20 29 discriminator 3 view .LVU457
 1812 0108 A847     		blx	r5
 1813              	.LVL132:
  20:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****         }
 1814              		.loc 10 20 29 discriminator 3 view .LVU458
 1815 010a C0F30723 		ubfx	r3, r0, #8, #8
 1816 010e 8DF83130 		strb	r3, [sp, #49]
 1817 0112 8DF83000 		strb	r0, [sp, #48]
 1818 0116 08F10108 		add	r8, r8, #1
 1819              	.LVL133:
  20:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****         }
 1820              		.loc 10 20 29 discriminator 3 view .LVU459
 1821 011a C0F30743 		ubfx	r3, r0, #16, #8
 1822 011e A9E7     		b	.L89
 1823              	.L93:
 1824              		.align	2
 1825              	.L92:
 1826 0120 00000000 		.word	g_last_hit_tracker
 1827 0124 00000000 		.word	g_led_config
 1828 0128 01000000 		.word	rgb_matrix_config+1
 1829 012c 00000000 		.word	rgb_matrix_config
 1830              	.LBE132:
 1831              	.LBE139:
 1832              	.LBE142:
 1833              	.LBE145:
 1834              		.cfi_endproc
 1835              	.LFE85:
 1837              		.section	.text.SOLID_COLOR,"ax",%progbits
 1838              		.align	1
 1839              		.global	SOLID_COLOR
 1840              		.syntax unified
 1841              		.thumb
 1842              		.thumb_func
 1843              		.fpu fpv4-sp-d16
 1845              	SOLID_COLOR:
 1846              	.LVL134:
 1847              	.LFB86:
 1848              		.file 11 "quantum/rgb_matrix_animations/solid_color_anim.h"
   1:quantum/rgb_matrix_animations/solid_color_anim.h **** RGB_MATRIX_EFFECT(SOLID_COLOR)
   2:quantum/rgb_matrix_animations/solid_color_anim.h **** #ifdef RGB_MATRIX_CUSTOM_EFFECT_IMPLS
   3:quantum/rgb_matrix_animations/solid_color_anim.h **** 
   4:quantum/rgb_matrix_animations/solid_color_anim.h **** bool SOLID_COLOR(effect_params_t* params) {
 1849              		.loc 11 4 43 is_stmt 1 view -0
 1850              		.cfi_startproc
 1851              		@ args = 0, pretend = 0, frame = 8
 1852              		@ frame_needed = 0, uses_anonymous_args = 0
   5:quantum/rgb_matrix_animations/solid_color_anim.h ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
 1853              		.loc 11 5 5 view .LVU461
   4:quantum/rgb_matrix_animations/solid_color_anim.h ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
 1854              		.loc 11 4 43 is_stmt 0 view .LVU462
 1855 0000 2DE9F341 		push	{r0, r1, r4, r5, r6, r7, r8, lr}
 1856              		.cfi_def_cfa_offset 32
 1857              		.cfi_offset 4, -24
 1858              		.cfi_offset 5, -20
 1859              		.cfi_offset 6, -16
 1860              		.cfi_offset 7, -12
 1861              		.cfi_offset 8, -8
 1862              		.cfi_offset 14, -4
   6:quantum/rgb_matrix_animations/solid_color_anim.h **** 
   7:quantum/rgb_matrix_animations/solid_color_anim.h ****     RGB rgb = hsv_to_rgb(rgb_matrix_config.hsv);
 1863              		.loc 11 7 15 view .LVU463
 1864 0004 1D4A     		ldr	r2, .L101
   5:quantum/rgb_matrix_animations/solid_color_anim.h **** 
 1865              		.loc 11 5 5 view .LVU464
 1866 0006 0478     		ldrb	r4, [r0]	@ zero_extendqisi2
 1867              		.loc 11 7 15 view .LVU465
 1868 0008 5378     		ldrb	r3, [r2, #1]	@ zero_extendqisi2
 1869              	.LBB146:
   8:quantum/rgb_matrix_animations/solid_color_anim.h ****     for (uint8_t i = led_min; i < led_max; i++) {
   9:quantum/rgb_matrix_animations/solid_color_anim.h ****         RGB_MATRIX_TEST_LED_FLAGS();
 1870              		.loc 11 9 9 view .LVU466
 1871 000a DFF87480 		ldr	r8, .L101+4
 1872              	.LBE146:
   4:quantum/rgb_matrix_animations/solid_color_anim.h ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
 1873              		.loc 11 4 43 view .LVU467
 1874 000e 0646     		mov	r6, r0
   5:quantum/rgb_matrix_animations/solid_color_anim.h **** 
 1875              		.loc 11 5 5 view .LVU468
 1876 0010 C4EB0414 		rsb	r4, r4, r4, lsl #4
   7:quantum/rgb_matrix_animations/solid_color_anim.h ****     for (uint8_t i = led_min; i < led_max; i++) {
 1877              		.loc 11 7 15 view .LVU469
 1878 0014 9078     		ldrb	r0, [r2, #2]	@ zero_extendqisi2
 1879              	.LVL135:
   5:quantum/rgb_matrix_animations/solid_color_anim.h **** 
 1880              		.loc 11 5 5 view .LVU470
 1881 0016 E4B2     		uxtb	r4, r4
 1882              	.LVL136:
   5:quantum/rgb_matrix_animations/solid_color_anim.h **** 
 1883              		.loc 11 5 5 is_stmt 1 view .LVU471
   7:quantum/rgb_matrix_animations/solid_color_anim.h ****     for (uint8_t i = led_min; i < led_max; i++) {
 1884              		.loc 11 7 15 is_stmt 0 view .LVU472
 1885 0018 43EA0023 		orr	r3, r3, r0, lsl #8
   5:quantum/rgb_matrix_animations/solid_color_anim.h **** 
 1886              		.loc 11 5 5 view .LVU473
 1887 001c 04F10F05 		add	r5, r4, #15
   7:quantum/rgb_matrix_animations/solid_color_anim.h ****     for (uint8_t i = led_min; i < led_max; i++) {
 1888              		.loc 11 7 15 view .LVU474
 1889 0020 D078     		ldrb	r0, [r2, #3]	@ zero_extendqisi2
   5:quantum/rgb_matrix_animations/solid_color_anim.h **** 
 1890              		.loc 11 5 5 view .LVU475
 1891 0022 EDB2     		uxtb	r5, r5
 1892              	.LVL137:
   5:quantum/rgb_matrix_animations/solid_color_anim.h **** 
 1893              		.loc 11 5 5 is_stmt 1 view .LVU476
 1894 0024 772D     		cmp	r5, #119
   7:quantum/rgb_matrix_animations/solid_color_anim.h ****     for (uint8_t i = led_min; i < led_max; i++) {
 1895              		.loc 11 7 15 is_stmt 0 view .LVU477
 1896 0026 43EA0040 		orr	r0, r3, r0, lsl #16
 1897 002a 2F46     		mov	r7, r5
 1898 002c 28BF     		it	cs
 1899 002e 7727     		movcs	r7, #119
 1900              	.LVL138:
   5:quantum/rgb_matrix_animations/solid_color_anim.h **** 
 1901              		.loc 11 5 44 is_stmt 1 view .LVU478
   7:quantum/rgb_matrix_animations/solid_color_anim.h ****     for (uint8_t i = led_min; i < led_max; i++) {
 1902              		.loc 11 7 5 view .LVU479
   7:quantum/rgb_matrix_animations/solid_color_anim.h ****     for (uint8_t i = led_min; i < led_max; i++) {
 1903              		.loc 11 7 15 is_stmt 0 view .LVU480
 1904 0030 FFF7FEFF 		bl	hsv_to_rgb
 1905              	.LVL139:
 1906 0034 C0F30723 		ubfx	r3, r0, #8, #8
 1907 0038 8DF80400 		strb	r0, [sp, #4]
 1908 003c C0F30740 		ubfx	r0, r0, #16, #8
 1909 0040 8DF80530 		strb	r3, [sp, #5]
 1910 0044 8DF80600 		strb	r0, [sp, #6]
   8:quantum/rgb_matrix_animations/solid_color_anim.h ****         RGB_MATRIX_TEST_LED_FLAGS();
 1911              		.loc 11 8 5 is_stmt 1 view .LVU481
 1912              	.LBB147:
   8:quantum/rgb_matrix_animations/solid_color_anim.h ****         RGB_MATRIX_TEST_LED_FLAGS();
 1913              		.loc 11 8 10 view .LVU482
 1914              	.LVL140:
 1915              	.L95:
   8:quantum/rgb_matrix_animations/solid_color_anim.h ****         RGB_MATRIX_TEST_LED_FLAGS();
 1916              		.loc 11 8 5 is_stmt 0 discriminator 1 view .LVU483
 1917 0048 E3B2     		uxtb	r3, r4
 1918 004a 9F42     		cmp	r7, r3
 1919 004c 06D8     		bhi	.L97
 1920              	.LBE147:
  10:quantum/rgb_matrix_animations/solid_color_anim.h ****         rgb_matrix_set_color(i, rgb.r, rgb.g, rgb.b);
  11:quantum/rgb_matrix_animations/solid_color_anim.h ****     }
  12:quantum/rgb_matrix_animations/solid_color_anim.h ****     return led_max < DRIVER_LED_TOTAL;
 1921              		.loc 11 12 5 is_stmt 1 view .LVU484
  13:quantum/rgb_matrix_animations/solid_color_anim.h **** }
 1922              		.loc 11 13 1 is_stmt 0 view .LVU485
 1923 004e 762D     		cmp	r5, #118
 1924 0050 8CBF     		ite	hi
 1925 0052 0020     		movhi	r0, #0
 1926 0054 0120     		movls	r0, #1
 1927 0056 02B0     		add	sp, sp, #8
 1928              		.cfi_remember_state
 1929              		.cfi_def_cfa_offset 24
 1930              		@ sp needed
 1931 0058 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1932              	.LVL141:
 1933              	.L97:
 1934              		.cfi_restore_state
 1935              	.LBB148:
   9:quantum/rgb_matrix_animations/solid_color_anim.h ****         rgb_matrix_set_color(i, rgb.r, rgb.g, rgb.b);
 1936              		.loc 11 9 9 is_stmt 1 view .LVU486
 1937 005c 14F80820 		ldrb	r2, [r4, r8]	@ zero_extendqisi2
 1938 0060 7378     		ldrb	r3, [r6, #1]	@ zero_extendqisi2
 1939 0062 1A42     		tst	r2, r3
 1940 0064 08D0     		beq	.L96
  10:quantum/rgb_matrix_animations/solid_color_anim.h ****         rgb_matrix_set_color(i, rgb.r, rgb.g, rgb.b);
 1941              		.loc 11 10 9 view .LVU487
 1942 0066 9DF80630 		ldrb	r3, [sp, #6]	@ zero_extendqisi2
 1943 006a 9DF80420 		ldrb	r2, [sp, #4]	@ zero_extendqisi2
 1944 006e 9DF80510 		ldrb	r1, [sp, #5]	@ zero_extendqisi2
 1945 0072 2046     		mov	r0, r4
 1946 0074 FFF7FEFF 		bl	rgb_matrix_set_color
 1947              	.LVL142:
 1948              	.L96:
  10:quantum/rgb_matrix_animations/solid_color_anim.h ****         rgb_matrix_set_color(i, rgb.r, rgb.g, rgb.b);
 1949              		.loc 11 10 9 is_stmt 0 view .LVU488
 1950 0078 0134     		adds	r4, r4, #1
 1951              	.LVL143:
  10:quantum/rgb_matrix_animations/solid_color_anim.h ****         rgb_matrix_set_color(i, rgb.r, rgb.g, rgb.b);
 1952              		.loc 11 10 9 view .LVU489
 1953 007a E5E7     		b	.L95
 1954              	.L102:
 1955              		.align	2
 1956              	.L101:
 1957 007c 00000000 		.word	rgb_matrix_config
 1958 0080 46010000 		.word	g_led_config+326
 1959              	.LBE148:
 1960              		.cfi_endproc
 1961              	.LFE86:
 1963              		.section	.text.rgb_matrix_set_color_all,"ax",%progbits
 1964              		.align	1
 1965              		.global	rgb_matrix_set_color_all
 1966              		.syntax unified
 1967              		.thumb
 1968              		.thumb_func
 1969              		.fpu fpv4-sp-d16
 1971              	rgb_matrix_set_color_all:
 1972              	.LVL144:
 1973              	.LFB95:
 182:quantum/rgb_matrix.c **** 
 183:quantum/rgb_matrix.c **** void rgb_matrix_set_color_all(uint8_t red, uint8_t green, uint8_t blue) { rgb_matrix_driver.set_col
 1974              		.loc 3 183 73 is_stmt 1 view -0
 1975              		.cfi_startproc
 1976              		@ args = 0, pretend = 0, frame = 0
 1977              		@ frame_needed = 0, uses_anonymous_args = 0
 1978              		@ link register save eliminated.
 1979              		.loc 3 183 75 view .LVU491
 1980              		.loc 3 183 92 is_stmt 0 view .LVU492
 1981 0000 014B     		ldr	r3, .L104
 1982              		.loc 3 183 75 view .LVU493
 1983 0002 9B68     		ldr	r3, [r3, #8]
 1984 0004 1847     		bx	r3	@ indirect register sibling call
 1985              	.LVL145:
 1986              	.L105:
 1987              		.loc 3 183 75 view .LVU494
 1988 0006 00BF     		.align	2
 1989              	.L104:
 1990 0008 00000000 		.word	rgb_matrix_driver
 1991              		.cfi_endproc
 1992              	.LFE95:
 1994              		.section	.text.process_rgb_matrix,"ax",%progbits
 1995              		.align	1
 1996              		.global	process_rgb_matrix
 1997              		.syntax unified
 1998              		.thumb
 1999              		.thumb_func
 2000              		.fpu fpv4-sp-d16
 2002              	process_rgb_matrix:
 2003              	.LVL146:
 2004              	.LFB96:
 184:quantum/rgb_matrix.c **** 
 185:quantum/rgb_matrix.c **** bool process_rgb_matrix(uint16_t keycode, keyrecord_t *record) {
 2005              		.loc 3 185 64 is_stmt 1 view -0
 2006              		.cfi_startproc
 2007              		@ args = 0, pretend = 0, frame = 8
 2008              		@ frame_needed = 0, uses_anonymous_args = 0
 186:quantum/rgb_matrix.c **** #if RGB_DISABLE_TIMEOUT > 0
 187:quantum/rgb_matrix.c ****     if (record->event.pressed) {
 188:quantum/rgb_matrix.c ****         rgb_anykey_timer = 0;
 189:quantum/rgb_matrix.c ****     }
 190:quantum/rgb_matrix.c **** #endif  // RGB_DISABLE_TIMEOUT > 0
 191:quantum/rgb_matrix.c **** 
 192:quantum/rgb_matrix.c **** #ifdef RGB_MATRIX_KEYREACTIVE_ENABLED
 193:quantum/rgb_matrix.c ****     uint8_t led[LED_HITS_TO_REMEMBER];
 2009              		.loc 3 193 5 view .LVU496
 194:quantum/rgb_matrix.c ****     uint8_t led_count = 0;
 2010              		.loc 3 194 5 view .LVU497
 195:quantum/rgb_matrix.c **** 
 196:quantum/rgb_matrix.c **** #    if defined(RGB_MATRIX_KEYRELEASES)
 197:quantum/rgb_matrix.c ****     if (!record->event.pressed)
 198:quantum/rgb_matrix.c **** #    elif defined(RGB_MATRIX_KEYPRESSES)
 199:quantum/rgb_matrix.c ****     if (record->event.pressed)
 2011              		.loc 3 199 5 view .LVU498
 185:quantum/rgb_matrix.c **** #if RGB_DISABLE_TIMEOUT > 0
 2012              		.loc 3 185 64 is_stmt 0 view .LVU499
 2013 0000 2DE9F341 		push	{r0, r1, r4, r5, r6, r7, r8, lr}
 2014              		.cfi_def_cfa_offset 32
 2015              		.cfi_offset 4, -24
 2016              		.cfi_offset 5, -20
 2017              		.cfi_offset 6, -16
 2018              		.cfi_offset 7, -12
 2019              		.cfi_offset 8, -8
 2020              		.cfi_offset 14, -4
 2021              		.loc 3 199 8 view .LVU500
 2022 0004 8D78     		ldrb	r5, [r1, #2]	@ zero_extendqisi2
 185:quantum/rgb_matrix.c **** #if RGB_DISABLE_TIMEOUT > 0
 2023              		.loc 3 185 64 view .LVU501
 2024 0006 0B46     		mov	r3, r1
 2025              		.loc 3 199 8 view .LVU502
 2026 0008 2DB1     		cbz	r5, .L107
 200:quantum/rgb_matrix.c **** #    endif  // defined(RGB_MATRIX_KEYRELEASES)
 201:quantum/rgb_matrix.c ****     {
 202:quantum/rgb_matrix.c ****         led_count = rgb_matrix_map_row_column_to_led(record->event.key.row, record->event.key.col, 
 2027              		.loc 3 202 9 is_stmt 1 view .LVU503
 2028              		.loc 3 202 21 is_stmt 0 view .LVU504
 2029 000a 6A46     		mov	r2, sp
 2030 000c 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 2031              	.LVL147:
 2032              		.loc 3 202 21 view .LVU505
 2033 000e 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 2034              	.LVL148:
 2035              		.loc 3 202 21 view .LVU506
 2036 0010 FFF7FEFF 		bl	rgb_matrix_map_row_column_to_led
 2037              	.LVL149:
 2038              		.loc 3 202 21 view .LVU507
 2039 0014 0546     		mov	r5, r0
 2040              	.LVL150:
 2041              	.L107:
 203:quantum/rgb_matrix.c ****     }
 204:quantum/rgb_matrix.c **** 
 205:quantum/rgb_matrix.c ****     if (last_hit_buffer.count + led_count > LED_HITS_TO_REMEMBER) {
 2042              		.loc 3 205 5 is_stmt 1 view .LVU508
 2043              		.loc 3 205 24 is_stmt 0 view .LVU509
 2044 0016 294C     		ldr	r4, .L116
 2045 0018 2778     		ldrb	r7, [r4]	@ zero_extendqisi2
 2046              		.loc 3 205 31 view .LVU510
 2047 001a 7B19     		adds	r3, r7, r5
 2048              		.loc 3 205 8 view .LVU511
 2049 001c 082B     		cmp	r3, #8
 2050 001e 21DD     		ble	.L108
 206:quantum/rgb_matrix.c ****         memcpy(&last_hit_buffer.x[0], &last_hit_buffer.x[led_count], LED_HITS_TO_REMEMBER - led_cou
 2051              		.loc 3 206 9 is_stmt 1 view .LVU512
 2052              		.loc 3 206 91 is_stmt 0 view .LVU513
 2053 0020 C5F10806 		rsb	r6, r5, #8
 2054              		.loc 3 206 39 view .LVU514
 2055 0024 691C     		adds	r1, r5, #1
 2056              		.loc 3 206 9 view .LVU515
 2057 0026 3246     		mov	r2, r6
 2058 0028 2144     		add	r1, r1, r4
 2059 002a 601C     		adds	r0, r4, #1
 2060 002c FFF7FEFF 		bl	memcpy
 2061              	.LVL151:
 207:quantum/rgb_matrix.c ****         memcpy(&last_hit_buffer.y[0], &last_hit_buffer.y[led_count], LED_HITS_TO_REMEMBER - led_cou
 2062              		.loc 3 207 9 is_stmt 1 view .LVU516
 2063              		.loc 3 207 39 is_stmt 0 view .LVU517
 2064 0030 05F10901 		add	r1, r5, #9
 2065              		.loc 3 207 9 view .LVU518
 2066 0034 3246     		mov	r2, r6
 2067 0036 2144     		add	r1, r1, r4
 2068 0038 04F10900 		add	r0, r4, #9
 2069 003c FFF7FEFF 		bl	memcpy
 2070              	.LVL152:
 208:quantum/rgb_matrix.c ****         memcpy(&last_hit_buffer.tick[0], &last_hit_buffer.tick[led_count], (LED_HITS_TO_REMEMBER - 
 2071              		.loc 3 208 9 is_stmt 1 view .LVU519
 2072              		.loc 3 208 42 is_stmt 0 view .LVU520
 2073 0040 04EB4501 		add	r1, r4, r5, lsl #1
 2074              		.loc 3 208 9 view .LVU521
 2075 0044 7200     		lsls	r2, r6, #1
 2076 0046 1931     		adds	r1, r1, #25
 2077 0048 04F11900 		add	r0, r4, #25
 2078 004c FFF7FEFF 		bl	memcpy
 2079              	.LVL153:
 209:quantum/rgb_matrix.c ****         memcpy(&last_hit_buffer.index[0], &last_hit_buffer.index[led_count], LED_HITS_TO_REMEMBER -
 2080              		.loc 3 209 9 is_stmt 1 view .LVU522
 2081              		.loc 3 209 43 is_stmt 0 view .LVU523
 2082 0050 05F11101 		add	r1, r5, #17
 2083              		.loc 3 209 9 view .LVU524
 2084 0054 3246     		mov	r2, r6
 2085 0056 2144     		add	r1, r1, r4
 2086 0058 04F11100 		add	r0, r4, #17
 210:quantum/rgb_matrix.c ****         last_hit_buffer.count--;
 2087              		.loc 3 210 30 view .LVU525
 2088 005c 013F     		subs	r7, r7, #1
 209:quantum/rgb_matrix.c ****         memcpy(&last_hit_buffer.index[0], &last_hit_buffer.index[led_count], LED_HITS_TO_REMEMBER -
 2089              		.loc 3 209 9 view .LVU526
 2090 005e FFF7FEFF 		bl	memcpy
 2091              	.LVL154:
 2092              		.loc 3 210 9 is_stmt 1 view .LVU527
 2093              		.loc 3 210 30 is_stmt 0 view .LVU528
 2094 0062 2770     		strb	r7, [r4]
 2095              	.L108:
 194:quantum/rgb_matrix.c **** 
 2096              		.loc 3 194 13 discriminator 1 view .LVU529
 2097 0064 0022     		movs	r2, #0
 2098 0066 2678     		ldrb	r6, [r4]	@ zero_extendqisi2
 2099              	.LBB149:
 2100              	.LBB150:
 211:quantum/rgb_matrix.c ****     }
 212:quantum/rgb_matrix.c **** 
 213:quantum/rgb_matrix.c ****     for (uint8_t i = 0; i < led_count; i++) {
 214:quantum/rgb_matrix.c ****         uint8_t index                = last_hit_buffer.count;
 215:quantum/rgb_matrix.c ****         last_hit_buffer.x[index]     = g_led_config.point[led[i]].x;
 2101              		.loc 3 215 66 discriminator 1 view .LVU530
 2102 0068 154F     		ldr	r7, .L116+4
 2103              	.LBE150:
 2104              	.LBE149:
 194:quantum/rgb_matrix.c **** 
 2105              		.loc 3 194 13 discriminator 1 view .LVU531
 2106 006a 1146     		mov	r1, r2
 2107              	.LBB153:
 2108              	.LBB151:
 216:quantum/rgb_matrix.c ****         last_hit_buffer.y[index]     = g_led_config.point[led[i]].y;
 217:quantum/rgb_matrix.c ****         last_hit_buffer.index[index] = led[i];
 218:quantum/rgb_matrix.c ****         last_hit_buffer.tick[index]  = 0;
 2109              		.loc 3 218 38 discriminator 1 view .LVU532
 2110 006c 9446     		mov	ip, r2
 2111              	.L109:
 2112 006e D0B2     		uxtb	r0, r2
 2113 0070 8319     		adds	r3, r0, r6
 2114              	.LBE151:
 213:quantum/rgb_matrix.c ****         uint8_t index                = last_hit_buffer.count;
 2115              		.loc 3 213 5 discriminator 1 view .LVU533
 2116 0072 A842     		cmp	r0, r5
 2117 0074 DBB2     		uxtb	r3, r3
 2118              	.LVL155:
 213:quantum/rgb_matrix.c ****         uint8_t index                = last_hit_buffer.count;
 2119              		.loc 3 213 5 discriminator 1 view .LVU534
 2120 0076 07D3     		bcc	.L110
 2121 0078 3544     		add	r5, r5, r6
 2122              	.LVL156:
 213:quantum/rgb_matrix.c ****         uint8_t index                = last_hit_buffer.count;
 2123              		.loc 3 213 5 discriminator 1 view .LVU535
 2124 007a EDB2     		uxtb	r5, r5
 2125 007c 01B1     		cbz	r1, .L111
 2126 007e 2570     		strb	r5, [r4]
 2127              	.L111:
 2128              	.LBE153:
 219:quantum/rgb_matrix.c ****         last_hit_buffer.count++;
 220:quantum/rgb_matrix.c ****     }
 221:quantum/rgb_matrix.c **** #endif  // RGB_MATRIX_KEYREACTIVE_ENABLED
 222:quantum/rgb_matrix.c **** 
 223:quantum/rgb_matrix.c **** #if defined(RGB_MATRIX_FRAMEBUFFER_EFFECTS) && !defined(DISABLE_RGB_MATRIX_TYPING_HEATMAP)
 224:quantum/rgb_matrix.c ****     if (rgb_matrix_config.mode == RGB_MATRIX_TYPING_HEATMAP) {
 225:quantum/rgb_matrix.c ****         process_rgb_matrix_typing_heatmap(record);
 226:quantum/rgb_matrix.c ****     }
 227:quantum/rgb_matrix.c **** #endif  // defined(RGB_MATRIX_FRAMEBUFFER_EFFECTS) && !defined(DISABLE_RGB_MATRIX_TYPING_HEATMAP)
 228:quantum/rgb_matrix.c **** 
 229:quantum/rgb_matrix.c ****     return true;
 2129              		.loc 3 229 5 is_stmt 1 view .LVU536
 230:quantum/rgb_matrix.c **** }
 2130              		.loc 3 230 1 is_stmt 0 view .LVU537
 2131 0080 0120     		movs	r0, #1
 2132 0082 02B0     		add	sp, sp, #8
 2133              		.cfi_remember_state
 2134              		.cfi_def_cfa_offset 24
 2135              		@ sp needed
 2136 0084 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2137              	.LVL157:
 2138              	.L110:
 2139              		.cfi_restore_state
 2140              	.LBB154:
 2141              	.LBB152:
 214:quantum/rgb_matrix.c ****         last_hit_buffer.x[index]     = g_led_config.point[led[i]].x;
 2142              		.loc 3 214 9 is_stmt 1 discriminator 3 view .LVU538
 215:quantum/rgb_matrix.c ****         last_hit_buffer.y[index]     = g_led_config.point[led[i]].y;
 2143              		.loc 3 215 9 discriminator 3 view .LVU539
 215:quantum/rgb_matrix.c ****         last_hit_buffer.y[index]     = g_led_config.point[led[i]].y;
 2144              		.loc 3 215 62 is_stmt 0 discriminator 3 view .LVU540
 2145 0088 1DF802E0 		ldrb	lr, [sp, r2]	@ zero_extendqisi2
 215:quantum/rgb_matrix.c ****         last_hit_buffer.y[index]     = g_led_config.point[led[i]].y;
 2146              		.loc 3 215 66 discriminator 3 view .LVU541
 2147 008c 0EF12C01 		add	r1, lr, #44
 215:quantum/rgb_matrix.c ****         last_hit_buffer.y[index]     = g_led_config.point[led[i]].y;
 2148              		.loc 3 215 38 discriminator 3 view .LVU542
 2149 0090 E018     		adds	r0, r4, r3
 2150 0092 17F81180 		ldrb	r8, [r7, r1, lsl #1]	@ zero_extendqisi2
 2151 0096 80F80180 		strb	r8, [r0, #1]
 216:quantum/rgb_matrix.c ****         last_hit_buffer.index[index] = led[i];
 2152              		.loc 3 216 9 is_stmt 1 discriminator 3 view .LVU543
 216:quantum/rgb_matrix.c ****         last_hit_buffer.index[index] = led[i];
 2153              		.loc 3 216 66 is_stmt 0 discriminator 3 view .LVU544
 2154 009a 07EB4101 		add	r1, r7, r1, lsl #1
 218:quantum/rgb_matrix.c ****         last_hit_buffer.count++;
 2155              		.loc 3 218 38 discriminator 3 view .LVU545
 2156 009e 0C33     		adds	r3, r3, #12
 2157              	.LVL158:
 218:quantum/rgb_matrix.c ****         last_hit_buffer.count++;
 2158              		.loc 3 218 38 discriminator 3 view .LVU546
 2159 00a0 04EB4303 		add	r3, r4, r3, lsl #1
 216:quantum/rgb_matrix.c ****         last_hit_buffer.index[index] = led[i];
 2160              		.loc 3 216 38 discriminator 3 view .LVU547
 2161 00a4 4978     		ldrb	r1, [r1, #1]	@ zero_extendqisi2
 2162 00a6 4172     		strb	r1, [r0, #9]
 217:quantum/rgb_matrix.c ****         last_hit_buffer.tick[index]  = 0;
 2163              		.loc 3 217 9 is_stmt 1 discriminator 3 view .LVU548
 217:quantum/rgb_matrix.c ****         last_hit_buffer.tick[index]  = 0;
 2164              		.loc 3 217 38 is_stmt 0 discriminator 3 view .LVU549
 2165 00a8 80F811E0 		strb	lr, [r0, #17]
 218:quantum/rgb_matrix.c ****         last_hit_buffer.count++;
 2166              		.loc 3 218 9 is_stmt 1 discriminator 3 view .LVU550
 2167 00ac 0132     		adds	r2, r2, #1
 2168              	.LVL159:
 218:quantum/rgb_matrix.c ****         last_hit_buffer.count++;
 2169              		.loc 3 218 38 is_stmt 0 discriminator 3 view .LVU551
 2170 00ae 83F801C0 		strb	ip, [r3, #1]
 2171 00b2 83F802C0 		strb	ip, [r3, #2]
 219:quantum/rgb_matrix.c ****     }
 2172              		.loc 3 219 9 is_stmt 1 discriminator 3 view .LVU552
 219:quantum/rgb_matrix.c ****     }
 2173              		.loc 3 219 9 is_stmt 0 discriminator 3 view .LVU553
 2174 00b6 0121     		movs	r1, #1
 2175 00b8 D9E7     		b	.L109
 2176              	.L117:
 2177 00ba 00BF     		.align	2
 2178              	.L116:
 2179 00bc 00000000 		.word	.LANCHOR1
 2180 00c0 00000000 		.word	g_led_config
 2181              	.LBE152:
 2182              	.LBE154:
 2183              		.cfi_endproc
 2184              	.LFE96:
 2186              		.section	.text.rgb_matrix_test,"ax",%progbits
 2187              		.align	1
 2188              		.global	rgb_matrix_test
 2189              		.syntax unified
 2190              		.thumb
 2191              		.thumb_func
 2192              		.fpu fpv4-sp-d16
 2194              	rgb_matrix_test:
 2195              	.LFB97:
 231:quantum/rgb_matrix.c **** 
 232:quantum/rgb_matrix.c **** void rgb_matrix_test(void) {
 2196              		.loc 3 232 28 is_stmt 1 view -0
 2197              		.cfi_startproc
 2198              		@ args = 0, pretend = 0, frame = 0
 2199              		@ frame_needed = 0, uses_anonymous_args = 0
 2200              		@ link register save eliminated.
 233:quantum/rgb_matrix.c ****     // Mask out bits 4 and 5
 234:quantum/rgb_matrix.c ****     // Increase the factor to make the test animation slower (and reduce to make it faster)
 235:quantum/rgb_matrix.c ****     uint8_t factor = 10;
 2201              		.loc 3 235 5 view .LVU555
 2202              	.LVL160:
 236:quantum/rgb_matrix.c ****     switch ((g_rgb_timer & (0b11 << factor)) >> factor) {
 2203              		.loc 3 236 5 view .LVU556
 2204              		.loc 3 236 26 is_stmt 0 view .LVU557
 2205 0000 0C4B     		ldr	r3, .L124
 2206              		.loc 3 236 46 view .LVU558
 2207 0002 1B68     		ldr	r3, [r3]
 2208 0004 C3F38123 		ubfx	r3, r3, #10, #2
 2209              		.loc 3 236 5 view .LVU559
 2210 0008 022B     		cmp	r3, #2
 2211 000a 0CD0     		beq	.L119
 2212 000c 032B     		cmp	r3, #3
 2213 000e 0ED0     		beq	.L120
 2214 0010 012B     		cmp	r3, #1
 237:quantum/rgb_matrix.c ****         case 0: {
 238:quantum/rgb_matrix.c ****             rgb_matrix_set_color_all(20, 0, 0);
 2215              		.loc 3 238 13 view .LVU560
 2216 0012 4FF00002 		mov	r2, #0
 236:quantum/rgb_matrix.c ****     switch ((g_rgb_timer & (0b11 << factor)) >> factor) {
 2217              		.loc 3 236 5 view .LVU561
 2218 0016 03D0     		beq	.L121
 2219              	.L122:
 2220              		.loc 3 238 13 is_stmt 1 view .LVU562
 2221 0018 1146     		mov	r1, r2
 2222 001a 1420     		movs	r0, #20
 2223              	.L123:
 239:quantum/rgb_matrix.c ****             break;
 240:quantum/rgb_matrix.c ****         }
 241:quantum/rgb_matrix.c ****         case 1: {
 242:quantum/rgb_matrix.c ****             rgb_matrix_set_color_all(0, 20, 0);
 243:quantum/rgb_matrix.c ****             break;
 244:quantum/rgb_matrix.c ****         }
 245:quantum/rgb_matrix.c ****         case 2: {
 246:quantum/rgb_matrix.c ****             rgb_matrix_set_color_all(0, 0, 20);
 2224              		.loc 3 246 13 is_stmt 0 view .LVU563
 2225 001c FFF7FEBF 		b	rgb_matrix_set_color_all
 2226              	.LVL161:
 2227              	.L121:
 242:quantum/rgb_matrix.c ****             break;
 2228              		.loc 3 242 13 is_stmt 1 view .LVU564
 2229 0020 1421     		movs	r1, #20
 2230 0022 1046     		mov	r0, r2
 2231 0024 FAE7     		b	.L123
 2232              	.L119:
 2233              		.loc 3 246 13 view .LVU565
 2234 0026 0021     		movs	r1, #0
 2235 0028 1422     		movs	r2, #20
 2236 002a 0846     		mov	r0, r1
 2237 002c F6E7     		b	.L123
 2238              	.L120:
 247:quantum/rgb_matrix.c ****             break;
 248:quantum/rgb_matrix.c ****         }
 249:quantum/rgb_matrix.c ****         case 3: {
 250:quantum/rgb_matrix.c ****             rgb_matrix_set_color_all(20, 20, 20);
 2239              		.loc 3 250 13 view .LVU566
 2240 002e 1422     		movs	r2, #20
 2241 0030 F2E7     		b	.L122
 2242              	.L125:
 2243 0032 00BF     		.align	2
 2244              	.L124:
 2245 0034 00000000 		.word	g_rgb_timer
 2246              		.cfi_endproc
 2247              	.LFE97:
 2249              		.section	.text.rgb_matrix_indicators_kb,"ax",%progbits
 2250              		.align	1
 2251              		.weak	rgb_matrix_indicators_kb
 2252              		.syntax unified
 2253              		.thumb
 2254              		.thumb_func
 2255              		.fpu fpv4-sp-d16
 2257              	rgb_matrix_indicators_kb:
 2258              	.LFB106:
 251:quantum/rgb_matrix.c ****             break;
 252:quantum/rgb_matrix.c ****         }
 253:quantum/rgb_matrix.c ****     }
 254:quantum/rgb_matrix.c **** }
 255:quantum/rgb_matrix.c **** 
 256:quantum/rgb_matrix.c **** static bool rgb_matrix_none(effect_params_t *params) {
 257:quantum/rgb_matrix.c ****     if (!params->init) {
 258:quantum/rgb_matrix.c ****         return false;
 259:quantum/rgb_matrix.c ****     }
 260:quantum/rgb_matrix.c **** 
 261:quantum/rgb_matrix.c ****     rgb_matrix_set_color_all(0, 0, 0);
 262:quantum/rgb_matrix.c ****     return false;
 263:quantum/rgb_matrix.c **** }
 264:quantum/rgb_matrix.c **** 
 265:quantum/rgb_matrix.c **** static void rgb_task_timers(void) {
 266:quantum/rgb_matrix.c **** #if defined(RGB_MATRIX_KEYREACTIVE_ENABLED) || RGB_DISABLE_TIMEOUT > 0
 267:quantum/rgb_matrix.c ****     uint32_t deltaTime = timer_elapsed32(rgb_timer_buffer);
 268:quantum/rgb_matrix.c **** #endif  // defined(RGB_MATRIX_KEYREACTIVE_ENABLED) || RGB_DISABLE_TIMEOUT > 0
 269:quantum/rgb_matrix.c ****     rgb_timer_buffer = timer_read32();
 270:quantum/rgb_matrix.c **** 
 271:quantum/rgb_matrix.c ****     // Update double buffer timers
 272:quantum/rgb_matrix.c **** #if RGB_DISABLE_TIMEOUT > 0
 273:quantum/rgb_matrix.c ****     if (rgb_anykey_timer < UINT32_MAX) {
 274:quantum/rgb_matrix.c ****         if (UINT32_MAX - deltaTime < rgb_anykey_timer) {
 275:quantum/rgb_matrix.c ****             rgb_anykey_timer = UINT32_MAX;
 276:quantum/rgb_matrix.c ****         } else {
 277:quantum/rgb_matrix.c ****             rgb_anykey_timer += deltaTime;
 278:quantum/rgb_matrix.c ****         }
 279:quantum/rgb_matrix.c ****     }
 280:quantum/rgb_matrix.c **** #endif  // RGB_DISABLE_TIMEOUT > 0
 281:quantum/rgb_matrix.c **** 
 282:quantum/rgb_matrix.c ****     // Update double buffer last hit timers
 283:quantum/rgb_matrix.c **** #ifdef RGB_MATRIX_KEYREACTIVE_ENABLED
 284:quantum/rgb_matrix.c ****     uint8_t count = last_hit_buffer.count;
 285:quantum/rgb_matrix.c ****     for (uint8_t i = 0; i < count; ++i) {
 286:quantum/rgb_matrix.c ****         if (UINT16_MAX - deltaTime < last_hit_buffer.tick[i]) {
 287:quantum/rgb_matrix.c ****             last_hit_buffer.count--;
 288:quantum/rgb_matrix.c ****             continue;
 289:quantum/rgb_matrix.c ****         }
 290:quantum/rgb_matrix.c ****         last_hit_buffer.tick[i] += deltaTime;
 291:quantum/rgb_matrix.c ****     }
 292:quantum/rgb_matrix.c **** #endif  // RGB_MATRIX_KEYREACTIVE_ENABLED
 293:quantum/rgb_matrix.c **** }
 294:quantum/rgb_matrix.c **** 
 295:quantum/rgb_matrix.c **** static void rgb_task_sync(void) {
 296:quantum/rgb_matrix.c ****     // next task
 297:quantum/rgb_matrix.c ****     if (timer_elapsed32(g_rgb_timer) >= RGB_MATRIX_LED_FLUSH_LIMIT) rgb_task_state = STARTING;
 298:quantum/rgb_matrix.c **** }
 299:quantum/rgb_matrix.c **** 
 300:quantum/rgb_matrix.c **** static void rgb_task_start(void) {
 301:quantum/rgb_matrix.c ****     // reset iter
 302:quantum/rgb_matrix.c ****     rgb_effect_params.iter = 0;
 303:quantum/rgb_matrix.c **** 
 304:quantum/rgb_matrix.c ****     // update double buffers
 305:quantum/rgb_matrix.c ****     g_rgb_timer = rgb_timer_buffer;
 306:quantum/rgb_matrix.c **** #ifdef RGB_MATRIX_KEYREACTIVE_ENABLED
 307:quantum/rgb_matrix.c ****     g_last_hit_tracker = last_hit_buffer;
 308:quantum/rgb_matrix.c **** #endif  // RGB_MATRIX_KEYREACTIVE_ENABLED
 309:quantum/rgb_matrix.c **** 
 310:quantum/rgb_matrix.c ****     // next task
 311:quantum/rgb_matrix.c ****     rgb_task_state = RENDERING;
 312:quantum/rgb_matrix.c **** }
 313:quantum/rgb_matrix.c **** 
 314:quantum/rgb_matrix.c **** static void rgb_task_render(uint8_t effect) {
 315:quantum/rgb_matrix.c ****     bool rendering         = false;
 316:quantum/rgb_matrix.c ****     rgb_effect_params.init = (effect != rgb_last_effect) || (rgb_matrix_config.enable != rgb_last_e
 317:quantum/rgb_matrix.c **** 
 318:quantum/rgb_matrix.c ****     // each effect can opt to do calculations
 319:quantum/rgb_matrix.c ****     // and/or request PWM buffer updates.
 320:quantum/rgb_matrix.c ****     switch (effect) {
 321:quantum/rgb_matrix.c ****         case RGB_MATRIX_NONE:
 322:quantum/rgb_matrix.c ****             rendering = rgb_matrix_none(&rgb_effect_params);
 323:quantum/rgb_matrix.c ****             break;
 324:quantum/rgb_matrix.c **** 
 325:quantum/rgb_matrix.c **** // ---------------------------------------------
 326:quantum/rgb_matrix.c **** // -----Begin rgb effect switch case macros-----
 327:quantum/rgb_matrix.c **** #define RGB_MATRIX_EFFECT(name, ...)          \
 328:quantum/rgb_matrix.c ****     case RGB_MATRIX_##name:                   \
 329:quantum/rgb_matrix.c ****         rendering = name(&rgb_effect_params); \
 330:quantum/rgb_matrix.c ****         break;
 331:quantum/rgb_matrix.c **** #include "rgb_matrix_animations/rgb_matrix_effects.inc"
 332:quantum/rgb_matrix.c **** #undef RGB_MATRIX_EFFECT
 333:quantum/rgb_matrix.c **** 
 334:quantum/rgb_matrix.c **** #if defined(RGB_MATRIX_CUSTOM_KB) || defined(RGB_MATRIX_CUSTOM_USER)
 335:quantum/rgb_matrix.c **** #    define RGB_MATRIX_EFFECT(name, ...)          \
 336:quantum/rgb_matrix.c ****         case RGB_MATRIX_CUSTOM_##name:            \
 337:quantum/rgb_matrix.c ****             rendering = name(&rgb_effect_params); \
 338:quantum/rgb_matrix.c ****             break;
 339:quantum/rgb_matrix.c **** #    ifdef RGB_MATRIX_CUSTOM_KB
 340:quantum/rgb_matrix.c **** #        include "rgb_matrix_kb.inc"
 341:quantum/rgb_matrix.c **** #    endif
 342:quantum/rgb_matrix.c **** #    ifdef RGB_MATRIX_CUSTOM_USER
 343:quantum/rgb_matrix.c **** #        include "rgb_matrix_user.inc"
 344:quantum/rgb_matrix.c **** #    endif
 345:quantum/rgb_matrix.c **** #    undef RGB_MATRIX_EFFECT
 346:quantum/rgb_matrix.c **** #endif
 347:quantum/rgb_matrix.c ****             // -----End rgb effect switch case macros-------
 348:quantum/rgb_matrix.c ****             // ---------------------------------------------
 349:quantum/rgb_matrix.c **** 
 350:quantum/rgb_matrix.c ****         // Factory default magic value
 351:quantum/rgb_matrix.c ****         case UINT8_MAX: {
 352:quantum/rgb_matrix.c ****             rgb_matrix_test();
 353:quantum/rgb_matrix.c ****             rgb_task_state = FLUSHING;
 354:quantum/rgb_matrix.c ****         }
 355:quantum/rgb_matrix.c ****             return;
 356:quantum/rgb_matrix.c ****     }
 357:quantum/rgb_matrix.c **** 
 358:quantum/rgb_matrix.c ****     rgb_effect_params.iter++;
 359:quantum/rgb_matrix.c **** 
 360:quantum/rgb_matrix.c ****     // next task
 361:quantum/rgb_matrix.c ****     if (!rendering) {
 362:quantum/rgb_matrix.c ****         rgb_task_state = FLUSHING;
 363:quantum/rgb_matrix.c ****         if (!rgb_effect_params.init && effect == RGB_MATRIX_NONE) {
 364:quantum/rgb_matrix.c ****             // We only need to flush once if we are RGB_MATRIX_NONE
 365:quantum/rgb_matrix.c ****             rgb_task_state = SYNCING;
 366:quantum/rgb_matrix.c ****         }
 367:quantum/rgb_matrix.c ****     }
 368:quantum/rgb_matrix.c **** }
 369:quantum/rgb_matrix.c **** 
 370:quantum/rgb_matrix.c **** static void rgb_task_flush(uint8_t effect) {
 371:quantum/rgb_matrix.c ****     // update last trackers after the first full render so we can init over several frames
 372:quantum/rgb_matrix.c ****     rgb_last_effect = effect;
 373:quantum/rgb_matrix.c ****     rgb_last_enable = rgb_matrix_config.enable;
 374:quantum/rgb_matrix.c **** 
 375:quantum/rgb_matrix.c ****     // update pwm buffers
 376:quantum/rgb_matrix.c ****     rgb_matrix_update_pwm_buffers();
 377:quantum/rgb_matrix.c **** 
 378:quantum/rgb_matrix.c ****     // next task
 379:quantum/rgb_matrix.c ****     rgb_task_state = SYNCING;
 380:quantum/rgb_matrix.c **** }
 381:quantum/rgb_matrix.c **** 
 382:quantum/rgb_matrix.c **** void rgb_matrix_task(void) {
 383:quantum/rgb_matrix.c ****     rgb_task_timers();
 384:quantum/rgb_matrix.c **** 
 385:quantum/rgb_matrix.c ****     // Ideally we would also stop sending zeros to the LED driver PWM buffers
 386:quantum/rgb_matrix.c ****     // while suspended and just do a software shutdown. This is a cheap hack for now.
 387:quantum/rgb_matrix.c ****     bool suspend_backlight =
 388:quantum/rgb_matrix.c **** #if RGB_DISABLE_WHEN_USB_SUSPENDED == true
 389:quantum/rgb_matrix.c ****         g_suspend_state ||
 390:quantum/rgb_matrix.c **** #endif  // RGB_DISABLE_WHEN_USB_SUSPENDED == true
 391:quantum/rgb_matrix.c **** #if RGB_DISABLE_TIMEOUT > 0
 392:quantum/rgb_matrix.c ****         (rgb_anykey_timer > (uint32_t)RGB_DISABLE_TIMEOUT) ||
 393:quantum/rgb_matrix.c **** #endif  // RGB_DISABLE_TIMEOUT > 0
 394:quantum/rgb_matrix.c ****         false;
 395:quantum/rgb_matrix.c **** 
 396:quantum/rgb_matrix.c ****     uint8_t effect = suspend_backlight || !rgb_matrix_config.enable ? 0 : rgb_matrix_config.mode;
 397:quantum/rgb_matrix.c **** 
 398:quantum/rgb_matrix.c ****     switch (rgb_task_state) {
 399:quantum/rgb_matrix.c ****         case STARTING:
 400:quantum/rgb_matrix.c ****             rgb_task_start();
 401:quantum/rgb_matrix.c ****             break;
 402:quantum/rgb_matrix.c ****         case RENDERING:
 403:quantum/rgb_matrix.c ****             rgb_task_render(effect);
 404:quantum/rgb_matrix.c ****             break;
 405:quantum/rgb_matrix.c ****         case FLUSHING:
 406:quantum/rgb_matrix.c ****             rgb_task_flush(effect);
 407:quantum/rgb_matrix.c ****             break;
 408:quantum/rgb_matrix.c ****         case SYNCING:
 409:quantum/rgb_matrix.c ****             rgb_task_sync();
 410:quantum/rgb_matrix.c ****             break;
 411:quantum/rgb_matrix.c ****     }
 412:quantum/rgb_matrix.c **** 
 413:quantum/rgb_matrix.c ****     if (!suspend_backlight) {
 414:quantum/rgb_matrix.c ****         rgb_matrix_indicators();
 415:quantum/rgb_matrix.c ****     }
 416:quantum/rgb_matrix.c **** }
 417:quantum/rgb_matrix.c **** 
 418:quantum/rgb_matrix.c **** void rgb_matrix_indicators(void) {
 419:quantum/rgb_matrix.c ****     rgb_matrix_indicators_kb();
 420:quantum/rgb_matrix.c ****     rgb_matrix_indicators_user();
 421:quantum/rgb_matrix.c **** }
 422:quantum/rgb_matrix.c **** 
 423:quantum/rgb_matrix.c **** __attribute__((weak)) void rgb_matrix_indicators_kb(void) {}
 2259              		.loc 3 423 59 view -0
 2260              		.cfi_startproc
 2261              		@ args = 0, pretend = 0, frame = 0
 2262              		@ frame_needed = 0, uses_anonymous_args = 0
 2263              		@ link register save eliminated.
 2264              		.loc 3 423 60 view .LVU568
 2265              		.loc 3 423 1 is_stmt 0 view .LVU569
 2266 0000 7047     		bx	lr
 2267              		.cfi_endproc
 2268              	.LFE106:
 2270              		.thumb_set rgb_matrix_indicators_kb.localalias.1,rgb_matrix_indicators_kb
 2271              		.section	.text.rgb_matrix_indicators_user,"ax",%progbits
 2272              		.align	1
 2273              		.weak	rgb_matrix_indicators_user
 2274              		.syntax unified
 2275              		.thumb
 2276              		.thumb_func
 2277              		.fpu fpv4-sp-d16
 2279              	rgb_matrix_indicators_user:
 2280              	.LFB141:
 2281              		.cfi_startproc
 2282              		@ args = 0, pretend = 0, frame = 0
 2283              		@ frame_needed = 0, uses_anonymous_args = 0
 2284              		@ link register save eliminated.
 2285 0000 7047     		bx	lr
 2286              		.cfi_endproc
 2287              	.LFE141:
 2289              		.section	.text.rgb_matrix_indicators,"ax",%progbits
 2290              		.align	1
 2291              		.global	rgb_matrix_indicators
 2292              		.syntax unified
 2293              		.thumb
 2294              		.thumb_func
 2295              		.fpu fpv4-sp-d16
 2297              	rgb_matrix_indicators:
 2298              	.LFB105:
 418:quantum/rgb_matrix.c ****     rgb_matrix_indicators_kb();
 2299              		.loc 3 418 34 is_stmt 1 view -0
 2300              		.cfi_startproc
 2301              		@ args = 0, pretend = 0, frame = 0
 2302              		@ frame_needed = 0, uses_anonymous_args = 0
 419:quantum/rgb_matrix.c ****     rgb_matrix_indicators_user();
 2303              		.loc 3 419 5 view .LVU571
 418:quantum/rgb_matrix.c ****     rgb_matrix_indicators_kb();
 2304              		.loc 3 418 34 is_stmt 0 view .LVU572
 2305 0000 08B5     		push	{r3, lr}
 2306              		.cfi_def_cfa_offset 8
 2307              		.cfi_offset 3, -8
 2308              		.cfi_offset 14, -4
 419:quantum/rgb_matrix.c ****     rgb_matrix_indicators_user();
 2309              		.loc 3 419 5 view .LVU573
 2310 0002 FFF7FEFF 		bl	rgb_matrix_indicators_kb
 2311              	.LVL162:
 420:quantum/rgb_matrix.c **** }
 2312              		.loc 3 420 5 is_stmt 1 view .LVU574
 2313 0006 FFF7FEFF 		bl	rgb_matrix_indicators_user
 2314              	.LVL163:
 421:quantum/rgb_matrix.c **** 
 2315              		.loc 3 421 1 is_stmt 0 view .LVU575
 2316 000a 08BD     		pop	{r3, pc}
 2317              		.cfi_endproc
 2318              	.LFE105:
 2320              		.section	.text.rgb_matrix_task,"ax",%progbits
 2321              		.align	1
 2322              		.global	rgb_matrix_task
 2323              		.syntax unified
 2324              		.thumb
 2325              		.thumb_func
 2326              		.fpu fpv4-sp-d16
 2328              	rgb_matrix_task:
 2329              	.LFB104:
 382:quantum/rgb_matrix.c ****     rgb_task_timers();
 2330              		.loc 3 382 28 is_stmt 1 view -0
 2331              		.cfi_startproc
 2332              		@ args = 0, pretend = 0, frame = 0
 2333              		@ frame_needed = 0, uses_anonymous_args = 0
 383:quantum/rgb_matrix.c **** 
 2334              		.loc 3 383 5 view .LVU577
 2335              	.LBB168:
 2336              	.LBI168:
 265:quantum/rgb_matrix.c **** #if defined(RGB_MATRIX_KEYREACTIVE_ENABLED) || RGB_DISABLE_TIMEOUT > 0
 2337              		.loc 3 265 13 view .LVU578
 2338              	.LBB169:
 267:quantum/rgb_matrix.c **** #endif  // defined(RGB_MATRIX_KEYREACTIVE_ENABLED) || RGB_DISABLE_TIMEOUT > 0
 2339              		.loc 3 267 5 view .LVU579
 2340              	.LBE169:
 2341              	.LBE168:
 382:quantum/rgb_matrix.c ****     rgb_task_timers();
 2342              		.loc 3 382 28 is_stmt 0 view .LVU580
 2343 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2344              		.cfi_def_cfa_offset 24
 2345              		.cfi_offset 3, -24
 2346              		.cfi_offset 4, -20
 2347              		.cfi_offset 5, -16
 2348              		.cfi_offset 6, -12
 2349              		.cfi_offset 7, -8
 2350              		.cfi_offset 14, -4
 2351              	.LBB176:
 2352              	.LBB174:
 267:quantum/rgb_matrix.c **** #endif  // defined(RGB_MATRIX_KEYREACTIVE_ENABLED) || RGB_DISABLE_TIMEOUT > 0
 2353              		.loc 3 267 26 view .LVU581
 2354 0002 454C     		ldr	r4, .L161
 2355 0004 E06A     		ldr	r0, [r4, #44]
 2356 0006 FFF7FEFF 		bl	timer_elapsed32
 2357              	.LVL164:
 2358 000a 0646     		mov	r6, r0
 2359              	.LVL165:
 269:quantum/rgb_matrix.c **** 
 2360              		.loc 3 269 5 is_stmt 1 view .LVU582
 269:quantum/rgb_matrix.c **** 
 2361              		.loc 3 269 24 is_stmt 0 view .LVU583
 2362 000c FFF7FEFF 		bl	timer_read32
 2363              	.LVL166:
 284:quantum/rgb_matrix.c ****     for (uint8_t i = 0; i < count; ++i) {
 2364              		.loc 3 284 13 view .LVU584
 2365 0010 94F800E0 		ldrb	lr, [r4]	@ zero_extendqisi2
 269:quantum/rgb_matrix.c **** 
 2366              		.loc 3 269 22 view .LVU585
 2367 0014 E062     		str	r0, [r4, #44]
 284:quantum/rgb_matrix.c ****     for (uint8_t i = 0; i < count; ++i) {
 2368              		.loc 3 284 5 is_stmt 1 view .LVU586
 2369              	.LVL167:
 285:quantum/rgb_matrix.c ****         if (UINT16_MAX - deltaTime < last_hit_buffer.tick[i]) {
 2370              		.loc 3 285 5 view .LVU587
 2371              	.LBB170:
 285:quantum/rgb_matrix.c ****         if (UINT16_MAX - deltaTime < last_hit_buffer.tick[i]) {
 2372              		.loc 3 285 10 view .LVU588
 285:quantum/rgb_matrix.c ****         if (UINT16_MAX - deltaTime < last_hit_buffer.tick[i]) {
 2373              		.loc 3 285 10 is_stmt 0 view .LVU589
 2374              	.LBE170:
 284:quantum/rgb_matrix.c ****     for (uint8_t i = 0; i < count; ++i) {
 2375              		.loc 3 284 13 view .LVU590
 2376 0016 0022     		movs	r2, #0
 2377              	.LBB171:
 286:quantum/rgb_matrix.c ****             last_hit_buffer.count--;
 2378              		.loc 3 286 24 view .LVU591
 2379 0018 C6F57F47 		rsb	r7, r6, #65280
 2380              	.LBE171:
 284:quantum/rgb_matrix.c ****     for (uint8_t i = 0; i < count; ++i) {
 2381              		.loc 3 284 13 view .LVU592
 2382 001c 7346     		mov	r3, lr
 2383 001e 9446     		mov	ip, r2
 2384              	.LBB172:
 286:quantum/rgb_matrix.c ****             last_hit_buffer.count--;
 2385              		.loc 3 286 24 view .LVU593
 2386 0020 FF37     		adds	r7, r7, #255
 2387              	.LVL168:
 2388              	.L130:
 285:quantum/rgb_matrix.c ****         if (UINT16_MAX - deltaTime < last_hit_buffer.tick[i]) {
 2389              		.loc 3 285 5 view .LVU594
 2390 0022 D1B2     		uxtb	r1, r2
 2391 0024 7145     		cmp	r1, lr
 2392 0026 11D3     		bcc	.L133
 2393 0028 BCF1000F 		cmp	ip, #0
 2394 002c 00D0     		beq	.L134
 2395 002e 2370     		strb	r3, [r4]
 2396              	.L134:
 2397              	.LVL169:
 285:quantum/rgb_matrix.c ****         if (UINT16_MAX - deltaTime < last_hit_buffer.tick[i]) {
 2398              		.loc 3 285 5 view .LVU595
 2399              	.LBE172:
 2400              	.LBE174:
 2401              	.LBE176:
 387:quantum/rgb_matrix.c **** #if RGB_DISABLE_WHEN_USB_SUSPENDED == true
 2402              		.loc 3 387 5 is_stmt 1 view .LVU596
 396:quantum/rgb_matrix.c **** 
 2403              		.loc 3 396 5 view .LVU597
 396:quantum/rgb_matrix.c **** 
 2404              		.loc 3 396 43 is_stmt 0 view .LVU598
 2405 0030 3A4B     		ldr	r3, .L161+4
 398:quantum/rgb_matrix.c ****         case STARTING:
 2406              		.loc 3 398 5 view .LVU599
 2407 0032 3B4C     		ldr	r4, .L161+8
 396:quantum/rgb_matrix.c **** 
 2408              		.loc 3 396 43 view .LVU600
 2409 0034 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 396:quantum/rgb_matrix.c **** 
 2410              		.loc 3 396 40 view .LVU601
 2411 0036 12F00305 		ands	r5, r2, #3
 396:quantum/rgb_matrix.c **** 
 2412              		.loc 3 396 13 view .LVU602
 2413 003a 18BF     		it	ne
 2414 003c 9508     		lsrne	r5, r2, #2
 2415              	.LVL170:
 398:quantum/rgb_matrix.c ****         case STARTING:
 2416              		.loc 3 398 5 is_stmt 1 view .LVU603
 2417 003e 2278     		ldrb	r2, [r4]	@ zero_extendqisi2
 2418 0040 032A     		cmp	r2, #3
 2419 0042 28D8     		bhi	.L136
 2420 0044 DFE802F0 		tbb	[pc, r2]
 2421              	.L138:
 2422 0048 15       		.byte	(.L141-.L138)/2
 2423 0049 2B       		.byte	(.L140-.L138)/2
 2424 004a 57       		.byte	(.L139-.L138)/2
 2425 004b 5F       		.byte	(.L137-.L138)/2
 2426              	.LVL171:
 2427              		.p2align 1
 2428              	.L133:
 2429              	.LBB177:
 2430              	.LBB175:
 2431              	.LBB173:
 286:quantum/rgb_matrix.c ****             last_hit_buffer.count--;
 2432              		.loc 3 286 9 view .LVU604
 286:quantum/rgb_matrix.c ****             last_hit_buffer.count--;
 2433              		.loc 3 286 58 is_stmt 0 view .LVU605
 2434 004c 02F10C01 		add	r1, r2, #12
 2435 0050 04EB4101 		add	r1, r4, r1, lsl #1
 2436 0054 0132     		adds	r2, r2, #1
 2437              	.LVL172:
 286:quantum/rgb_matrix.c ****             last_hit_buffer.count--;
 2438              		.loc 3 286 58 view .LVU606
 2439 0056 B1F80150 		ldrh	r5, [r1, #1]	@ unaligned
 286:quantum/rgb_matrix.c ****             last_hit_buffer.count--;
 2440              		.loc 3 286 12 view .LVU607
 2441 005a AF42     		cmp	r7, r5
 287:quantum/rgb_matrix.c ****             continue;
 2442              		.loc 3 287 13 is_stmt 1 view .LVU608
 287:quantum/rgb_matrix.c ****             continue;
 2443              		.loc 3 287 34 is_stmt 0 view .LVU609
 2444 005c 37BF     		itett	cc
 2445 005e 03F1FF33 		addcc	r3, r3, #-1
 290:quantum/rgb_matrix.c ****     }
 2446              		.loc 3 290 33 view .LVU610
 2447 0062 AD19     		addcs	r5, r5, r6
 287:quantum/rgb_matrix.c ****             continue;
 2448              		.loc 3 287 34 view .LVU611
 2449 0064 DBB2     		uxtbcc	r3, r3
 288:quantum/rgb_matrix.c ****         }
 2450              		.loc 3 288 13 is_stmt 1 view .LVU612
 287:quantum/rgb_matrix.c ****             continue;
 2451              		.loc 3 287 34 is_stmt 0 view .LVU613
 2452 0066 4FF0010C 		movcc	ip, #1
 290:quantum/rgb_matrix.c ****     }
 2453              		.loc 3 290 9 is_stmt 1 view .LVU614
 290:quantum/rgb_matrix.c ****     }
 2454              		.loc 3 290 33 is_stmt 0 view .LVU615
 2455 006a 28BF     		it	cs
 2456 006c A1F80150 		strhcs	r5, [r1, #1]	@ unaligned
 290:quantum/rgb_matrix.c ****     }
 2457              		.loc 3 290 33 view .LVU616
 2458 0070 D7E7     		b	.L130
 2459              	.LVL173:
 2460              	.L141:
 290:quantum/rgb_matrix.c ****     }
 2461              		.loc 3 290 33 view .LVU617
 2462              	.LBE173:
 2463              	.LBE175:
 2464              	.LBE177:
 400:quantum/rgb_matrix.c ****             break;
 2465              		.loc 3 400 13 is_stmt 1 view .LVU618
 2466              	.LBB178:
 2467              	.LBI178:
 300:quantum/rgb_matrix.c ****     // reset iter
 2468              		.loc 3 300 13 view .LVU619
 2469              	.LBB179:
 302:quantum/rgb_matrix.c **** 
 2470              		.loc 3 302 5 view .LVU620
 302:quantum/rgb_matrix.c **** 
 2471              		.loc 3 302 28 is_stmt 0 view .LVU621
 2472 0072 0023     		movs	r3, #0
 2473 0074 6370     		strb	r3, [r4, #1]
 305:quantum/rgb_matrix.c **** #ifdef RGB_MATRIX_KEYREACTIVE_ENABLED
 2474              		.loc 3 305 5 is_stmt 1 view .LVU622
 305:quantum/rgb_matrix.c **** #ifdef RGB_MATRIX_KEYREACTIVE_ENABLED
 2475              		.loc 3 305 17 is_stmt 0 view .LVU623
 2476 0076 2B4B     		ldr	r3, .L161+12
 307:quantum/rgb_matrix.c **** #endif  // RGB_MATRIX_KEYREACTIVE_ENABLED
 2477              		.loc 3 307 24 view .LVU624
 2478 0078 2B4A     		ldr	r2, .L161+16
 305:quantum/rgb_matrix.c **** #ifdef RGB_MATRIX_KEYREACTIVE_ENABLED
 2479              		.loc 3 305 17 view .LVU625
 2480 007a 1860     		str	r0, [r3]
 307:quantum/rgb_matrix.c **** #endif  // RGB_MATRIX_KEYREACTIVE_ENABLED
 2481              		.loc 3 307 5 is_stmt 1 view .LVU626
 307:quantum/rgb_matrix.c **** #endif  // RGB_MATRIX_KEYREACTIVE_ENABLED
 2482              		.loc 3 307 24 is_stmt 0 view .LVU627
 2483 007c 264B     		ldr	r3, .L161
 2484 007e 03F12801 		add	r1, r3, #40
 2485              	.L142:
 2486 0082 53F8040B 		ldr	r0, [r3], #4	@ unaligned
 2487 0086 42F8040B 		str	r0, [r2], #4	@ unaligned
 2488 008a 8B42     		cmp	r3, r1
 2489 008c F9D1     		bne	.L142
 2490 008e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2491 0090 1370     		strb	r3, [r2]
 311:quantum/rgb_matrix.c **** }
 2492              		.loc 3 311 5 is_stmt 1 view .LVU628
 311:quantum/rgb_matrix.c **** }
 2493              		.loc 3 311 20 is_stmt 0 view .LVU629
 2494 0092 0123     		movs	r3, #1
 2495              	.L159:
 2496              	.LBE179:
 2497              	.LBE178:
 2498              	.LBB180:
 2499              	.LBB181:
 297:quantum/rgb_matrix.c **** }
 2500              		.loc 3 297 84 view .LVU630
 2501 0094 2370     		strb	r3, [r4]
 2502              	.L136:
 2503              	.LBE181:
 2504              	.LBE180:
 413:quantum/rgb_matrix.c ****         rgb_matrix_indicators();
 2505              		.loc 3 413 5 is_stmt 1 view .LVU631
 414:quantum/rgb_matrix.c ****     }
 2506              		.loc 3 414 9 view .LVU632
 416:quantum/rgb_matrix.c **** 
 2507              		.loc 3 416 1 is_stmt 0 view .LVU633
 2508 0096 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 2509              		.cfi_remember_state
 2510              		.cfi_restore 14
 2511              		.cfi_restore 7
 2512              		.cfi_restore 6
 2513              		.cfi_restore 5
 2514              		.cfi_restore 4
 2515              		.cfi_restore 3
 2516              		.cfi_def_cfa_offset 0
 2517              	.LVL174:
 414:quantum/rgb_matrix.c ****     }
 2518              		.loc 3 414 9 view .LVU634
 2519 009a FFF7FEBF 		b	rgb_matrix_indicators
 2520              	.LVL175:
 2521              	.L140:
 2522              		.cfi_restore_state
 403:quantum/rgb_matrix.c ****             break;
 2523              		.loc 3 403 13 is_stmt 1 view .LVU635
 2524              	.LBB183:
 2525              	.LBI183:
 314:quantum/rgb_matrix.c ****     bool rendering         = false;
 2526              		.loc 3 314 13 view .LVU636
 2527              	.LBB184:
 315:quantum/rgb_matrix.c ****     rgb_effect_params.init = (effect != rgb_last_effect) || (rgb_matrix_config.enable != rgb_last_e
 2528              		.loc 3 315 5 view .LVU637
 316:quantum/rgb_matrix.c **** 
 2529              		.loc 3 316 5 view .LVU638
 316:quantum/rgb_matrix.c **** 
 2530              		.loc 3 316 58 is_stmt 0 view .LVU639
 2531 009e 2279     		ldrb	r2, [r4, #4]	@ zero_extendqisi2
 2532 00a0 AA42     		cmp	r2, r5
 2533 00a2 19D1     		bne	.L149
 316:quantum/rgb_matrix.c **** 
 2534              		.loc 3 316 79 view .LVU640
 2535 00a4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 316:quantum/rgb_matrix.c **** 
 2536              		.loc 3 316 87 view .LVU641
 2537 00a6 6279     		ldrb	r2, [r4, #5]	@ zero_extendqisi2
 316:quantum/rgb_matrix.c **** 
 2538              		.loc 3 316 79 view .LVU642
 2539 00a8 03F00303 		and	r3, r3, #3
 316:quantum/rgb_matrix.c **** 
 2540              		.loc 3 316 58 view .LVU643
 2541 00ac 9B1A     		subs	r3, r3, r2
 2542 00ae 18BF     		it	ne
 2543 00b0 0123     		movne	r3, #1
 2544              	.L143:
 316:quantum/rgb_matrix.c **** 
 2545              		.loc 3 316 58 view .LVU644
 2546 00b2 E370     		strb	r3, [r4, #3]
 320:quantum/rgb_matrix.c ****         case RGB_MATRIX_NONE:
 2547              		.loc 3 320 5 is_stmt 1 view .LVU645
 2548 00b4 95B1     		cbz	r5, .L144
 2549 00b6 012D     		cmp	r5, #1
 2550 00b8 17D0     		beq	.L145
 2551              	.L158:
 315:quantum/rgb_matrix.c ****     rgb_effect_params.init = (effect != rgb_last_effect) || (rgb_matrix_config.enable != rgb_last_e
 2552              		.loc 3 315 10 is_stmt 0 view .LVU646
 2553 00ba 0020     		movs	r0, #0
 2554              	.LVL176:
 2555              	.L146:
 358:quantum/rgb_matrix.c **** 
 2556              		.loc 3 358 5 is_stmt 1 view .LVU647
 358:quantum/rgb_matrix.c **** 
 2557              		.loc 3 358 27 is_stmt 0 view .LVU648
 2558 00bc 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 2559 00be 0133     		adds	r3, r3, #1
 2560 00c0 6370     		strb	r3, [r4, #1]
 361:quantum/rgb_matrix.c ****         rgb_task_state = FLUSHING;
 2561              		.loc 3 361 5 is_stmt 1 view .LVU649
 361:quantum/rgb_matrix.c ****         rgb_task_state = FLUSHING;
 2562              		.loc 3 361 8 is_stmt 0 view .LVU650
 2563 00c2 0028     		cmp	r0, #0
 2564 00c4 E7D1     		bne	.L136
 2565              	.LVL177:
 362:quantum/rgb_matrix.c ****         if (!rgb_effect_params.init && effect == RGB_MATRIX_NONE) {
 2566              		.loc 3 362 9 is_stmt 1 view .LVU651
 362:quantum/rgb_matrix.c ****         if (!rgb_effect_params.init && effect == RGB_MATRIX_NONE) {
 2567              		.loc 3 362 24 is_stmt 0 view .LVU652
 2568 00c6 0223     		movs	r3, #2
 2569 00c8 2370     		strb	r3, [r4]
 363:quantum/rgb_matrix.c ****             // We only need to flush once if we are RGB_MATRIX_NONE
 2570              		.loc 3 363 9 is_stmt 1 view .LVU653
 363:quantum/rgb_matrix.c ****             // We only need to flush once if we are RGB_MATRIX_NONE
 2571              		.loc 3 363 12 is_stmt 0 view .LVU654
 2572 00ca E378     		ldrb	r3, [r4, #3]	@ zero_extendqisi2
 2573 00cc 002B     		cmp	r3, #0
 2574 00ce E2D1     		bne	.L136
 363:quantum/rgb_matrix.c ****             // We only need to flush once if we are RGB_MATRIX_NONE
 2575              		.loc 3 363 37 view .LVU655
 2576 00d0 002D     		cmp	r5, #0
 2577 00d2 E0D1     		bne	.L136
 2578              	.LVL178:
 2579              	.L160:
 363:quantum/rgb_matrix.c ****             // We only need to flush once if we are RGB_MATRIX_NONE
 2580              		.loc 3 363 37 view .LVU656
 2581              	.LBE184:
 2582              	.LBE183:
 2583              	.LBB188:
 2584              	.LBB189:
 379:quantum/rgb_matrix.c **** }
 2585              		.loc 3 379 5 is_stmt 1 view .LVU657
 379:quantum/rgb_matrix.c **** }
 2586              		.loc 3 379 20 is_stmt 0 view .LVU658
 2587 00d4 0323     		movs	r3, #3
 2588 00d6 DDE7     		b	.L159
 2589              	.LVL179:
 2590              	.L149:
 379:quantum/rgb_matrix.c **** }
 2591              		.loc 3 379 20 view .LVU659
 2592              	.LBE189:
 2593              	.LBE188:
 2594              	.LBB191:
 2595              	.LBB187:
 316:quantum/rgb_matrix.c **** 
 2596              		.loc 3 316 58 view .LVU660
 2597 00d8 0123     		movs	r3, #1
 2598 00da EAE7     		b	.L143
 2599              	.L144:
 322:quantum/rgb_matrix.c ****             break;
 2600              		.loc 3 322 13 is_stmt 1 view .LVU661
 2601              	.LBB185:
 2602              	.LBI185:
 256:quantum/rgb_matrix.c ****     if (!params->init) {
 2603              		.loc 3 256 13 view .LVU662
 2604              	.LVL180:
 2605              	.LBB186:
 257:quantum/rgb_matrix.c ****         return false;
 2606              		.loc 3 257 5 view .LVU663
 257:quantum/rgb_matrix.c ****         return false;
 2607              		.loc 3 257 8 is_stmt 0 view .LVU664
 2608 00dc 4BB1     		cbz	r3, .L150
 261:quantum/rgb_matrix.c ****     return false;
 2609              		.loc 3 261 5 is_stmt 1 view .LVU665
 2610 00de 2A46     		mov	r2, r5
 2611 00e0 2946     		mov	r1, r5
 2612 00e2 2846     		mov	r0, r5
 2613 00e4 FFF7FEFF 		bl	rgb_matrix_set_color_all
 2614              	.LVL181:
 262:quantum/rgb_matrix.c **** }
 2615              		.loc 3 262 5 view .LVU666
 2616 00e8 E7E7     		b	.L158
 2617              	.LVL182:
 2618              	.L145:
 262:quantum/rgb_matrix.c **** }
 2619              		.loc 3 262 5 is_stmt 0 view .LVU667
 2620              	.LBE186:
 2621              	.LBE185:
   1:quantum/rgb_matrix_animations/solid_color_anim.h **** #ifdef RGB_MATRIX_CUSTOM_EFFECT_IMPLS
 2622              		.loc 11 1 1 is_stmt 1 view .LVU668
 2623 00ea 1048     		ldr	r0, .L161+20
 2624 00ec FFF7FEFF 		bl	SOLID_COLOR
 2625              	.LVL183:
   1:quantum/rgb_matrix_animations/solid_color_anim.h **** #ifdef RGB_MATRIX_CUSTOM_EFFECT_IMPLS
 2626              		.loc 11 1 1 view .LVU669
 2627 00f0 E4E7     		b	.L146
 2628              	.LVL184:
 2629              	.L150:
 322:quantum/rgb_matrix.c ****             break;
 2630              		.loc 3 322 25 is_stmt 0 view .LVU670
 2631 00f2 2846     		mov	r0, r5
 2632 00f4 E2E7     		b	.L146
 2633              	.LVL185:
 2634              	.L139:
 322:quantum/rgb_matrix.c ****             break;
 2635              		.loc 3 322 25 view .LVU671
 2636              	.LBE187:
 2637              	.LBE191:
 406:quantum/rgb_matrix.c ****             break;
 2638              		.loc 3 406 13 is_stmt 1 view .LVU672
 2639              	.LBB192:
 2640              	.LBI188:
 370:quantum/rgb_matrix.c ****     // update last trackers after the first full render so we can init over several frames
 2641              		.loc 3 370 13 view .LVU673
 2642              	.LBB190:
 372:quantum/rgb_matrix.c ****     rgb_last_enable = rgb_matrix_config.enable;
 2643              		.loc 3 372 5 view .LVU674
 373:quantum/rgb_matrix.c **** 
 2644              		.loc 3 373 40 is_stmt 0 view .LVU675
 2645 00f6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 372:quantum/rgb_matrix.c ****     rgb_last_enable = rgb_matrix_config.enable;
 2646              		.loc 3 372 21 view .LVU676
 2647 00f8 2571     		strb	r5, [r4, #4]
 373:quantum/rgb_matrix.c **** 
 2648              		.loc 3 373 5 is_stmt 1 view .LVU677
 373:quantum/rgb_matrix.c **** 
 2649              		.loc 3 373 40 is_stmt 0 view .LVU678
 2650 00fa C3F30103 		ubfx	r3, r3, #0, #2
 373:quantum/rgb_matrix.c **** 
 2651              		.loc 3 373 21 view .LVU679
 2652 00fe 6371     		strb	r3, [r4, #5]
 376:quantum/rgb_matrix.c **** 
 2653              		.loc 3 376 5 is_stmt 1 view .LVU680
 2654 0100 FFF7FEFF 		bl	rgb_matrix_update_pwm_buffers
 2655              	.LVL186:
 2656 0104 E6E7     		b	.L160
 2657              	.LVL187:
 2658              	.L137:
 376:quantum/rgb_matrix.c **** 
 2659              		.loc 3 376 5 is_stmt 0 view .LVU681
 2660              	.LBE190:
 2661              	.LBE192:
 409:quantum/rgb_matrix.c ****             break;
 2662              		.loc 3 409 13 is_stmt 1 view .LVU682
 2663              	.LBB193:
 2664              	.LBI180:
 295:quantum/rgb_matrix.c ****     // next task
 2665              		.loc 3 295 13 view .LVU683
 2666              	.LBB182:
 297:quantum/rgb_matrix.c **** }
 2667              		.loc 3 297 5 view .LVU684
 297:quantum/rgb_matrix.c **** }
 2668              		.loc 3 297 9 is_stmt 0 view .LVU685
 2669 0106 074B     		ldr	r3, .L161+12
 2670 0108 1868     		ldr	r0, [r3]
 2671 010a FFF7FEFF 		bl	timer_elapsed32
 2672              	.LVL188:
 297:quantum/rgb_matrix.c **** }
 2673              		.loc 3 297 8 view .LVU686
 2674 010e 0928     		cmp	r0, #9
 2675 0110 C1D9     		bls	.L136
 297:quantum/rgb_matrix.c **** }
 2676              		.loc 3 297 69 is_stmt 1 view .LVU687
 297:quantum/rgb_matrix.c **** }
 2677              		.loc 3 297 84 is_stmt 0 view .LVU688
 2678 0112 0023     		movs	r3, #0
 2679 0114 BEE7     		b	.L159
 2680              	.L162:
 2681 0116 00BF     		.align	2
 2682              	.L161:
 2683 0118 00000000 		.word	.LANCHOR1
 2684 011c 00000000 		.word	rgb_matrix_config
 2685 0120 00000000 		.word	.LANCHOR2
 2686 0124 00000000 		.word	g_rgb_timer
 2687 0128 00000000 		.word	g_last_hit_tracker
 2688 012c 01000000 		.word	.LANCHOR2+1
 2689              	.LBE182:
 2690              	.LBE193:
 2691              		.cfi_endproc
 2692              	.LFE104:
 2694              		.section	.text.rgb_matrix_init,"ax",%progbits
 2695              		.align	1
 2696              		.global	rgb_matrix_init
 2697              		.syntax unified
 2698              		.thumb
 2699              		.thumb_func
 2700              		.fpu fpv4-sp-d16
 2702              	rgb_matrix_init:
 2703              	.LFB108:
 424:quantum/rgb_matrix.c **** 
 425:quantum/rgb_matrix.c **** __attribute__((weak)) void rgb_matrix_indicators_user(void) {}
 426:quantum/rgb_matrix.c **** 
 427:quantum/rgb_matrix.c **** void rgb_matrix_init(void) {
 2704              		.loc 3 427 28 is_stmt 1 view -0
 2705              		.cfi_startproc
 2706              		@ args = 0, pretend = 0, frame = 0
 2707              		@ frame_needed = 0, uses_anonymous_args = 0
 428:quantum/rgb_matrix.c ****     rgb_matrix_driver.init();
 2708              		.loc 3 428 5 view .LVU690
 427:quantum/rgb_matrix.c ****     rgb_matrix_driver.init();
 2709              		.loc 3 427 28 is_stmt 0 view .LVU691
 2710 0000 08B5     		push	{r3, lr}
 2711              		.cfi_def_cfa_offset 8
 2712              		.cfi_offset 3, -8
 2713              		.cfi_offset 14, -4
 2714              		.loc 3 428 22 view .LVU692
 2715 0002 274B     		ldr	r3, .L166
 2716              		.loc 3 428 5 view .LVU693
 2717 0004 1B68     		ldr	r3, [r3]
 2718 0006 9847     		blx	r3
 2719              	.LVL189:
 429:quantum/rgb_matrix.c **** 
 430:quantum/rgb_matrix.c **** #ifdef RGB_MATRIX_KEYREACTIVE_ENABLED
 431:quantum/rgb_matrix.c ****     g_last_hit_tracker.count = 0;
 2720              		.loc 3 431 5 is_stmt 1 view .LVU694
 2721              		.loc 3 431 30 is_stmt 0 view .LVU695
 2722 0008 264A     		ldr	r2, .L166+4
 2723              	.LBB194:
 432:quantum/rgb_matrix.c ****     for (uint8_t i = 0; i < LED_HITS_TO_REMEMBER; ++i) {
 433:quantum/rgb_matrix.c ****         g_last_hit_tracker.tick[i] = UINT16_MAX;
 2724              		.loc 3 433 36 view .LVU696
 2725 000a 4FF0FF33 		mov	r3, #-1
 2726              	.LBE194:
 431:quantum/rgb_matrix.c ****     for (uint8_t i = 0; i < LED_HITS_TO_REMEMBER; ++i) {
 2727              		.loc 3 431 30 view .LVU697
 2728 000e 0021     		movs	r1, #0
 2729 0010 1170     		strb	r1, [r2]
 432:quantum/rgb_matrix.c ****     for (uint8_t i = 0; i < LED_HITS_TO_REMEMBER; ++i) {
 2730              		.loc 3 432 5 is_stmt 1 view .LVU698
 2731              	.LBB195:
 432:quantum/rgb_matrix.c ****     for (uint8_t i = 0; i < LED_HITS_TO_REMEMBER; ++i) {
 2732              		.loc 3 432 10 view .LVU699
 2733              	.LVL190:
 2734              		.loc 3 433 9 view .LVU700
 2735              		.loc 3 433 36 is_stmt 0 view .LVU701
 2736 0012 5376     		strb	r3, [r2, #25]
 2737 0014 9376     		strb	r3, [r2, #26]
 2738              	.LVL191:
 2739              		.loc 3 433 9 is_stmt 1 view .LVU702
 2740              		.loc 3 433 36 is_stmt 0 view .LVU703
 2741 0016 D376     		strb	r3, [r2, #27]
 2742 0018 1377     		strb	r3, [r2, #28]
 2743              	.LVL192:
 2744              		.loc 3 433 9 is_stmt 1 view .LVU704
 2745              		.loc 3 433 36 is_stmt 0 view .LVU705
 2746 001a 5377     		strb	r3, [r2, #29]
 2747 001c 9377     		strb	r3, [r2, #30]
 2748              	.LVL193:
 2749              		.loc 3 433 9 is_stmt 1 view .LVU706
 2750              		.loc 3 433 36 is_stmt 0 view .LVU707
 2751 001e D377     		strb	r3, [r2, #31]
 2752 0020 82F82030 		strb	r3, [r2, #32]
 2753              	.LVL194:
 2754              		.loc 3 433 9 is_stmt 1 view .LVU708
 2755              		.loc 3 433 36 is_stmt 0 view .LVU709
 2756 0024 82F82130 		strb	r3, [r2, #33]
 2757 0028 82F82230 		strb	r3, [r2, #34]
 2758              	.LVL195:
 2759              		.loc 3 433 9 is_stmt 1 view .LVU710
 2760              		.loc 3 433 36 is_stmt 0 view .LVU711
 2761 002c 82F82330 		strb	r3, [r2, #35]
 2762 0030 82F82430 		strb	r3, [r2, #36]
 2763              	.LVL196:
 2764              		.loc 3 433 9 is_stmt 1 view .LVU712
 2765              		.loc 3 433 36 is_stmt 0 view .LVU713
 2766 0034 82F82530 		strb	r3, [r2, #37]
 2767 0038 82F82630 		strb	r3, [r2, #38]
 2768              	.LVL197:
 2769              		.loc 3 433 9 is_stmt 1 view .LVU714
 2770              		.loc 3 433 36 is_stmt 0 view .LVU715
 2771 003c 82F82730 		strb	r3, [r2, #39]
 2772 0040 82F82830 		strb	r3, [r2, #40]
 2773              	.LVL198:
 2774              		.loc 3 433 36 view .LVU716
 2775              	.LBE195:
 434:quantum/rgb_matrix.c ****     }
 435:quantum/rgb_matrix.c **** 
 436:quantum/rgb_matrix.c ****     last_hit_buffer.count = 0;
 2776              		.loc 3 436 5 is_stmt 1 view .LVU717
 2777              		.loc 3 436 27 is_stmt 0 view .LVU718
 2778 0044 184A     		ldr	r2, .L166+8
 2779 0046 1170     		strb	r1, [r2]
 437:quantum/rgb_matrix.c ****     for (uint8_t i = 0; i < LED_HITS_TO_REMEMBER; ++i) {
 2780              		.loc 3 437 5 is_stmt 1 view .LVU719
 2781              	.LBB196:
 2782              		.loc 3 437 10 view .LVU720
 2783              	.LVL199:
 438:quantum/rgb_matrix.c ****         last_hit_buffer.tick[i] = UINT16_MAX;
 2784              		.loc 3 438 9 view .LVU721
 2785              		.loc 3 438 33 is_stmt 0 view .LVU722
 2786 0048 5376     		strb	r3, [r2, #25]
 2787 004a 9376     		strb	r3, [r2, #26]
 2788              	.LVL200:
 2789              		.loc 3 438 9 is_stmt 1 view .LVU723
 2790              		.loc 3 438 33 is_stmt 0 view .LVU724
 2791 004c D376     		strb	r3, [r2, #27]
 2792 004e 1377     		strb	r3, [r2, #28]
 2793              	.LVL201:
 2794              		.loc 3 438 9 is_stmt 1 view .LVU725
 2795              		.loc 3 438 33 is_stmt 0 view .LVU726
 2796 0050 5377     		strb	r3, [r2, #29]
 2797 0052 9377     		strb	r3, [r2, #30]
 2798              	.LVL202:
 2799              		.loc 3 438 9 is_stmt 1 view .LVU727
 2800              		.loc 3 438 33 is_stmt 0 view .LVU728
 2801 0054 D377     		strb	r3, [r2, #31]
 2802 0056 82F82030 		strb	r3, [r2, #32]
 2803              	.LVL203:
 2804              		.loc 3 438 9 is_stmt 1 view .LVU729
 2805              		.loc 3 438 33 is_stmt 0 view .LVU730
 2806 005a 82F82130 		strb	r3, [r2, #33]
 2807 005e 82F82230 		strb	r3, [r2, #34]
 2808              	.LVL204:
 2809              		.loc 3 438 9 is_stmt 1 view .LVU731
 2810              		.loc 3 438 33 is_stmt 0 view .LVU732
 2811 0062 82F82330 		strb	r3, [r2, #35]
 2812 0066 82F82430 		strb	r3, [r2, #36]
 2813              	.LVL205:
 2814              		.loc 3 438 9 is_stmt 1 view .LVU733
 2815              		.loc 3 438 33 is_stmt 0 view .LVU734
 2816 006a 82F82530 		strb	r3, [r2, #37]
 2817 006e 82F82630 		strb	r3, [r2, #38]
 2818              	.LVL206:
 2819              		.loc 3 438 9 is_stmt 1 view .LVU735
 2820              		.loc 3 438 33 is_stmt 0 view .LVU736
 2821 0072 82F82730 		strb	r3, [r2, #39]
 2822 0076 82F82830 		strb	r3, [r2, #40]
 2823              	.LVL207:
 2824              		.loc 3 438 33 view .LVU737
 2825              	.LBE196:
 439:quantum/rgb_matrix.c ****     }
 440:quantum/rgb_matrix.c **** #endif  // RGB_MATRIX_KEYREACTIVE_ENABLED
 441:quantum/rgb_matrix.c **** 
 442:quantum/rgb_matrix.c ****     if (!eeconfig_is_enabled()) {
 2826              		.loc 3 442 5 is_stmt 1 view .LVU738
 2827              		.loc 3 442 10 is_stmt 0 view .LVU739
 2828 007a FFF7FEFF 		bl	eeconfig_is_enabled
 2829              	.LVL208:
 2830              		.loc 3 442 8 view .LVU740
 2831 007e 18B9     		cbnz	r0, .L164
 443:quantum/rgb_matrix.c ****         dprintf("rgb_matrix_init_drivers eeconfig is not enabled.\n");
 2832              		.loc 3 443 70 is_stmt 1 view .LVU741
 444:quantum/rgb_matrix.c ****         eeconfig_init();
 2833              		.loc 3 444 9 view .LVU742
 2834 0080 FFF7FEFF 		bl	eeconfig_init
 2835              	.LVL209:
 445:quantum/rgb_matrix.c ****         eeconfig_update_rgb_matrix_default();
 2836              		.loc 3 445 9 view .LVU743
 2837 0084 FFF7FEFF 		bl	eeconfig_update_rgb_matrix_default
 2838              	.LVL210:
 2839              	.L164:
 446:quantum/rgb_matrix.c ****     }
 447:quantum/rgb_matrix.c **** 
 448:quantum/rgb_matrix.c ****     eeconfig_read_rgb_matrix();
 2840              		.loc 3 448 5 view .LVU744
 2841 0088 FFF7FEFF 		bl	eeconfig_read_rgb_matrix
 2842              	.LVL211:
 449:quantum/rgb_matrix.c ****     if (!rgb_matrix_config.mode) {
 2843              		.loc 3 449 5 view .LVU745
 2844              		.loc 3 449 9 is_stmt 0 view .LVU746
 2845 008c 074B     		ldr	r3, .L166+12
 2846 008e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2847              		.loc 3 449 8 view .LVU747
 2848 0090 13F0FC0F 		tst	r3, #252
 2849 0094 03D1     		bne	.L163
 450:quantum/rgb_matrix.c ****         dprintf("rgb_matrix_init_drivers rgb_matrix_config.mode = 0. Write default values to EEPROM
 2850              		.loc 3 450 105 is_stmt 1 view .LVU748
 451:quantum/rgb_matrix.c ****         eeconfig_update_rgb_matrix_default();
 2851              		.loc 3 451 9 view .LVU749
 452:quantum/rgb_matrix.c ****     }
 453:quantum/rgb_matrix.c ****     eeconfig_debug_rgb_matrix();  // display current eeprom values
 454:quantum/rgb_matrix.c **** }
 2852              		.loc 3 454 1 is_stmt 0 view .LVU750
 2853 0096 BDE80840 		pop	{r3, lr}
 2854              		.cfi_remember_state
 2855              		.cfi_restore 14
 2856              		.cfi_restore 3
 2857              		.cfi_def_cfa_offset 0
 451:quantum/rgb_matrix.c ****         eeconfig_update_rgb_matrix_default();
 2858              		.loc 3 451 9 view .LVU751
 2859 009a FFF7FEBF 		b	eeconfig_update_rgb_matrix_default
 2860              	.LVL212:
 2861              	.L163:
 2862              		.cfi_restore_state
 2863              		.loc 3 454 1 view .LVU752
 2864 009e 08BD     		pop	{r3, pc}
 2865              	.L167:
 2866              		.align	2
 2867              	.L166:
 2868 00a0 00000000 		.word	rgb_matrix_driver
 2869 00a4 00000000 		.word	g_last_hit_tracker
 2870 00a8 00000000 		.word	.LANCHOR1
 2871 00ac 00000000 		.word	rgb_matrix_config
 2872              		.cfi_endproc
 2873              	.LFE108:
 2875              		.section	.text.rgb_matrix_set_suspend_state,"ax",%progbits
 2876              		.align	1
 2877              		.global	rgb_matrix_set_suspend_state
 2878              		.syntax unified
 2879              		.thumb
 2880              		.thumb_func
 2881              		.fpu fpv4-sp-d16
 2883              	rgb_matrix_set_suspend_state:
 2884              	.LVL213:
 2885              	.LFB109:
 455:quantum/rgb_matrix.c **** 
 456:quantum/rgb_matrix.c **** void rgb_matrix_set_suspend_state(bool state) {
 2886              		.loc 3 456 47 is_stmt 1 view -0
 2887              		.cfi_startproc
 2888              		@ args = 0, pretend = 0, frame = 0
 2889              		@ frame_needed = 0, uses_anonymous_args = 0
 2890              		@ link register save eliminated.
 457:quantum/rgb_matrix.c ****     if (RGB_DISABLE_WHEN_USB_SUSPENDED && state) {
 2891              		.loc 3 457 5 view .LVU754
 458:quantum/rgb_matrix.c ****         rgb_matrix_set_color_all(0, 0, 0);  // turn off all LEDs when suspending
 459:quantum/rgb_matrix.c ****     }
 460:quantum/rgb_matrix.c ****     g_suspend_state = state;
 2892              		.loc 3 460 5 view .LVU755
 2893              		.loc 3 460 21 is_stmt 0 view .LVU756
 2894 0000 014B     		ldr	r3, .L169
 2895 0002 83F83000 		strb	r0, [r3, #48]
 461:quantum/rgb_matrix.c **** }
 2896              		.loc 3 461 1 view .LVU757
 2897 0006 7047     		bx	lr
 2898              	.L170:
 2899              		.align	2
 2900              	.L169:
 2901 0008 00000000 		.word	.LANCHOR1
 2902              		.cfi_endproc
 2903              	.LFE109:
 2905              		.section	.text.rgb_matrix_get_suspend_state,"ax",%progbits
 2906              		.align	1
 2907              		.global	rgb_matrix_get_suspend_state
 2908              		.syntax unified
 2909              		.thumb
 2910              		.thumb_func
 2911              		.fpu fpv4-sp-d16
 2913              	rgb_matrix_get_suspend_state:
 2914              	.LFB110:
 462:quantum/rgb_matrix.c **** 
 463:quantum/rgb_matrix.c **** bool rgb_matrix_get_suspend_state(void) { return g_suspend_state; }
 2915              		.loc 3 463 41 is_stmt 1 view -0
 2916              		.cfi_startproc
 2917              		@ args = 0, pretend = 0, frame = 0
 2918              		@ frame_needed = 0, uses_anonymous_args = 0
 2919              		@ link register save eliminated.
 2920              		.loc 3 463 43 view .LVU759
 2921              		.loc 3 463 1 is_stmt 0 view .LVU760
 2922 0000 014B     		ldr	r3, .L172
 2923 0002 93F83000 		ldrb	r0, [r3, #48]	@ zero_extendqisi2
 2924 0006 7047     		bx	lr
 2925              	.L173:
 2926              		.align	2
 2927              	.L172:
 2928 0008 00000000 		.word	.LANCHOR1
 2929              		.cfi_endproc
 2930              	.LFE110:
 2932              		.section	.text.rgb_matrix_toggle,"ax",%progbits
 2933              		.align	1
 2934              		.global	rgb_matrix_toggle
 2935              		.syntax unified
 2936              		.thumb
 2937              		.thumb_func
 2938              		.fpu fpv4-sp-d16
 2940              	rgb_matrix_toggle:
 2941              	.LFB111:
 464:quantum/rgb_matrix.c **** 
 465:quantum/rgb_matrix.c **** void rgb_matrix_toggle(void) {
 2942              		.loc 3 465 30 is_stmt 1 view -0
 2943              		.cfi_startproc
 2944              		@ args = 0, pretend = 0, frame = 0
 2945              		@ frame_needed = 0, uses_anonymous_args = 0
 2946              		@ link register save eliminated.
 466:quantum/rgb_matrix.c ****     rgb_matrix_config.enable ^= 1;
 2947              		.loc 3 466 5 view .LVU762
 2948              		.loc 3 466 30 is_stmt 0 view .LVU763
 2949 0000 044A     		ldr	r2, .L175
 2950 0002 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 2951 0004 83F00103 		eor	r3, r3, #1
 2952 0008 1370     		strb	r3, [r2]
 467:quantum/rgb_matrix.c ****     rgb_task_state = STARTING;
 2953              		.loc 3 467 5 is_stmt 1 view .LVU764
 2954              		.loc 3 467 20 is_stmt 0 view .LVU765
 2955 000a 034B     		ldr	r3, .L175+4
 2956 000c 0022     		movs	r2, #0
 2957 000e 1A70     		strb	r2, [r3]
 468:quantum/rgb_matrix.c ****     eeconfig_update_rgb_matrix();
 2958              		.loc 3 468 5 is_stmt 1 view .LVU766
 2959 0010 FFF7FEBF 		b	eeconfig_update_rgb_matrix
 2960              	.LVL214:
 2961              	.L176:
 2962              		.align	2
 2963              	.L175:
 2964 0014 00000000 		.word	rgb_matrix_config
 2965 0018 00000000 		.word	.LANCHOR2
 2966              		.cfi_endproc
 2967              	.LFE111:
 2969              		.section	.text.rgb_matrix_enable_noeeprom,"ax",%progbits
 2970              		.align	1
 2971              		.global	rgb_matrix_enable_noeeprom
 2972              		.syntax unified
 2973              		.thumb
 2974              		.thumb_func
 2975              		.fpu fpv4-sp-d16
 2977              	rgb_matrix_enable_noeeprom:
 2978              	.LFB113:
 469:quantum/rgb_matrix.c **** }
 470:quantum/rgb_matrix.c **** 
 471:quantum/rgb_matrix.c **** void rgb_matrix_enable(void) {
 472:quantum/rgb_matrix.c ****     rgb_matrix_enable_noeeprom();
 473:quantum/rgb_matrix.c ****     eeconfig_update_rgb_matrix();
 474:quantum/rgb_matrix.c **** }
 475:quantum/rgb_matrix.c **** 
 476:quantum/rgb_matrix.c **** void rgb_matrix_enable_noeeprom(void) {
 2979              		.loc 3 476 39 view -0
 2980              		.cfi_startproc
 2981              		@ args = 0, pretend = 0, frame = 0
 2982              		@ frame_needed = 0, uses_anonymous_args = 0
 2983              		@ link register save eliminated.
 477:quantum/rgb_matrix.c ****     if (!rgb_matrix_config.enable) rgb_task_state = STARTING;
 2984              		.loc 3 477 5 view .LVU768
 2985              		.loc 3 477 9 is_stmt 0 view .LVU769
 2986 0000 064B     		ldr	r3, .L179
 2987 0002 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2988              		.loc 3 477 8 view .LVU770
 2989 0004 12F00302 		ands	r2, r2, #3
 2990              		.loc 3 477 36 is_stmt 1 view .LVU771
 2991              		.loc 3 477 51 is_stmt 0 view .LVU772
 2992 0008 04BF     		itt	eq
 2993 000a 0549     		ldreq	r1, .L179+4
 2994 000c 0A70     		strbeq	r2, [r1]
 478:quantum/rgb_matrix.c ****     rgb_matrix_config.enable = 1;
 2995              		.loc 3 478 5 is_stmt 1 view .LVU773
 2996              		.loc 3 478 30 is_stmt 0 view .LVU774
 2997 000e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2998 0010 0121     		movs	r1, #1
 2999 0012 61F30102 		bfi	r2, r1, #0, #2
 3000 0016 1A70     		strb	r2, [r3]
 479:quantum/rgb_matrix.c **** }
 3001              		.loc 3 479 1 view .LVU775
 3002 0018 7047     		bx	lr
 3003              	.L180:
 3004 001a 00BF     		.align	2
 3005              	.L179:
 3006 001c 00000000 		.word	rgb_matrix_config
 3007 0020 00000000 		.word	.LANCHOR2
 3008              		.cfi_endproc
 3009              	.LFE113:
 3011              		.section	.text.rgb_matrix_enable,"ax",%progbits
 3012              		.align	1
 3013              		.global	rgb_matrix_enable
 3014              		.syntax unified
 3015              		.thumb
 3016              		.thumb_func
 3017              		.fpu fpv4-sp-d16
 3019              	rgb_matrix_enable:
 3020              	.LFB112:
 471:quantum/rgb_matrix.c ****     rgb_matrix_enable_noeeprom();
 3021              		.loc 3 471 30 is_stmt 1 view -0
 3022              		.cfi_startproc
 3023              		@ args = 0, pretend = 0, frame = 0
 3024              		@ frame_needed = 0, uses_anonymous_args = 0
 472:quantum/rgb_matrix.c ****     eeconfig_update_rgb_matrix();
 3025              		.loc 3 472 5 view .LVU777
 471:quantum/rgb_matrix.c ****     rgb_matrix_enable_noeeprom();
 3026              		.loc 3 471 30 is_stmt 0 view .LVU778
 3027 0000 08B5     		push	{r3, lr}
 3028              		.cfi_def_cfa_offset 8
 3029              		.cfi_offset 3, -8
 3030              		.cfi_offset 14, -4
 472:quantum/rgb_matrix.c ****     eeconfig_update_rgb_matrix();
 3031              		.loc 3 472 5 view .LVU779
 3032 0002 FFF7FEFF 		bl	rgb_matrix_enable_noeeprom
 3033              	.LVL215:
 473:quantum/rgb_matrix.c **** }
 3034              		.loc 3 473 5 is_stmt 1 view .LVU780
 474:quantum/rgb_matrix.c **** 
 3035              		.loc 3 474 1 is_stmt 0 view .LVU781
 3036 0006 BDE80840 		pop	{r3, lr}
 3037              		.cfi_restore 14
 3038              		.cfi_restore 3
 3039              		.cfi_def_cfa_offset 0
 473:quantum/rgb_matrix.c **** }
 3040              		.loc 3 473 5 view .LVU782
 3041 000a FFF7FEBF 		b	eeconfig_update_rgb_matrix
 3042              	.LVL216:
 3043              		.cfi_endproc
 3044              	.LFE112:
 3046              		.section	.text.rgb_matrix_disable_noeeprom,"ax",%progbits
 3047              		.align	1
 3048              		.global	rgb_matrix_disable_noeeprom
 3049              		.syntax unified
 3050              		.thumb
 3051              		.thumb_func
 3052              		.fpu fpv4-sp-d16
 3054              	rgb_matrix_disable_noeeprom:
 3055              	.LFB115:
 480:quantum/rgb_matrix.c **** 
 481:quantum/rgb_matrix.c **** void rgb_matrix_disable(void) {
 482:quantum/rgb_matrix.c ****     rgb_matrix_disable_noeeprom();
 483:quantum/rgb_matrix.c ****     eeconfig_update_rgb_matrix();
 484:quantum/rgb_matrix.c **** }
 485:quantum/rgb_matrix.c **** 
 486:quantum/rgb_matrix.c **** void rgb_matrix_disable_noeeprom(void) {
 3056              		.loc 3 486 40 is_stmt 1 view -0
 3057              		.cfi_startproc
 3058              		@ args = 0, pretend = 0, frame = 0
 3059              		@ frame_needed = 0, uses_anonymous_args = 0
 3060              		@ link register save eliminated.
 487:quantum/rgb_matrix.c ****     if (rgb_matrix_config.enable) rgb_task_state = STARTING;
 3061              		.loc 3 487 5 view .LVU784
 3062              		.loc 3 487 9 is_stmt 0 view .LVU785
 3063 0000 054B     		ldr	r3, .L187
 3064 0002 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3065              		.loc 3 487 8 view .LVU786
 3066 0004 9207     		lsls	r2, r2, #30
 3067              		.loc 3 487 35 is_stmt 1 view .LVU787
 3068              		.loc 3 487 50 is_stmt 0 view .LVU788
 3069 0006 1EBF     		ittt	ne
 3070 0008 044A     		ldrne	r2, .L187+4
 3071 000a 0021     		movne	r1, #0
 3072 000c 1170     		strbne	r1, [r2]
 488:quantum/rgb_matrix.c ****     rgb_matrix_config.enable = 0;
 3073              		.loc 3 488 5 is_stmt 1 view .LVU789
 3074              		.loc 3 488 30 is_stmt 0 view .LVU790
 3075 000e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3076 0010 6FF30102 		bfc	r2, #0, #2
 3077 0014 1A70     		strb	r2, [r3]
 489:quantum/rgb_matrix.c **** }
 3078              		.loc 3 489 1 view .LVU791
 3079 0016 7047     		bx	lr
 3080              	.L188:
 3081              		.align	2
 3082              	.L187:
 3083 0018 00000000 		.word	rgb_matrix_config
 3084 001c 00000000 		.word	.LANCHOR2
 3085              		.cfi_endproc
 3086              	.LFE115:
 3088              		.section	.text.rgb_matrix_disable,"ax",%progbits
 3089              		.align	1
 3090              		.global	rgb_matrix_disable
 3091              		.syntax unified
 3092              		.thumb
 3093              		.thumb_func
 3094              		.fpu fpv4-sp-d16
 3096              	rgb_matrix_disable:
 3097              	.LFB114:
 481:quantum/rgb_matrix.c ****     rgb_matrix_disable_noeeprom();
 3098              		.loc 3 481 31 is_stmt 1 view -0
 3099              		.cfi_startproc
 3100              		@ args = 0, pretend = 0, frame = 0
 3101              		@ frame_needed = 0, uses_anonymous_args = 0
 482:quantum/rgb_matrix.c ****     eeconfig_update_rgb_matrix();
 3102              		.loc 3 482 5 view .LVU793
 481:quantum/rgb_matrix.c ****     rgb_matrix_disable_noeeprom();
 3103              		.loc 3 481 31 is_stmt 0 view .LVU794
 3104 0000 08B5     		push	{r3, lr}
 3105              		.cfi_def_cfa_offset 8
 3106              		.cfi_offset 3, -8
 3107              		.cfi_offset 14, -4
 482:quantum/rgb_matrix.c ****     eeconfig_update_rgb_matrix();
 3108              		.loc 3 482 5 view .LVU795
 3109 0002 FFF7FEFF 		bl	rgb_matrix_disable_noeeprom
 3110              	.LVL217:
 483:quantum/rgb_matrix.c **** }
 3111              		.loc 3 483 5 is_stmt 1 view .LVU796
 484:quantum/rgb_matrix.c **** 
 3112              		.loc 3 484 1 is_stmt 0 view .LVU797
 3113 0006 BDE80840 		pop	{r3, lr}
 3114              		.cfi_restore 14
 3115              		.cfi_restore 3
 3116              		.cfi_def_cfa_offset 0
 483:quantum/rgb_matrix.c **** }
 3117              		.loc 3 483 5 view .LVU798
 3118 000a FFF7FEBF 		b	eeconfig_update_rgb_matrix
 3119              	.LVL218:
 3120              		.cfi_endproc
 3121              	.LFE114:
 3123              		.section	.text.rgb_matrix_is_enabled,"ax",%progbits
 3124              		.align	1
 3125              		.global	rgb_matrix_is_enabled
 3126              		.syntax unified
 3127              		.thumb
 3128              		.thumb_func
 3129              		.fpu fpv4-sp-d16
 3131              	rgb_matrix_is_enabled:
 3132              	.LFB116:
 490:quantum/rgb_matrix.c **** 
 491:quantum/rgb_matrix.c **** uint8_t rgb_matrix_is_enabled(void) { return rgb_matrix_config.enable; }
 3133              		.loc 3 491 37 is_stmt 1 view -0
 3134              		.cfi_startproc
 3135              		@ args = 0, pretend = 0, frame = 0
 3136              		@ frame_needed = 0, uses_anonymous_args = 0
 3137              		@ link register save eliminated.
 3138              		.loc 3 491 39 view .LVU800
 3139              		.loc 3 491 63 is_stmt 0 view .LVU801
 3140 0000 024B     		ldr	r3, .L191
 3141 0002 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 3142              		.loc 3 491 1 view .LVU802
 3143 0004 00F00300 		and	r0, r0, #3
 3144 0008 7047     		bx	lr
 3145              	.L192:
 3146 000a 00BF     		.align	2
 3147              	.L191:
 3148 000c 00000000 		.word	rgb_matrix_config
 3149              		.cfi_endproc
 3150              	.LFE116:
 3152              		.section	.text.rgb_matrix_step,"ax",%progbits
 3153              		.align	1
 3154              		.global	rgb_matrix_step
 3155              		.syntax unified
 3156              		.thumb
 3157              		.thumb_func
 3158              		.fpu fpv4-sp-d16
 3160              	rgb_matrix_step:
 3161              	.LFB117:
 492:quantum/rgb_matrix.c **** 
 493:quantum/rgb_matrix.c **** void rgb_matrix_step(void) {
 3162              		.loc 3 493 28 is_stmt 1 view -0
 3163              		.cfi_startproc
 3164              		@ args = 0, pretend = 0, frame = 0
 3165              		@ frame_needed = 0, uses_anonymous_args = 0
 3166              		@ link register save eliminated.
 494:quantum/rgb_matrix.c ****     rgb_matrix_config.mode++;
 3167              		.loc 3 494 5 view .LVU804
 3168              		.loc 3 494 22 is_stmt 0 view .LVU805
 3169 0000 0849     		ldr	r1, .L197
 3170 0002 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
 3171 0004 C3F38502 		ubfx	r2, r3, #2, #6
 3172              		.loc 3 494 27 view .LVU806
 3173 0008 0132     		adds	r2, r2, #1
 3174 000a 02F03F02 		and	r2, r2, #63
 495:quantum/rgb_matrix.c ****     if (rgb_matrix_config.mode >= RGB_MATRIX_EFFECT_MAX) rgb_matrix_config.mode = 1;
 3175              		.loc 3 495 5 is_stmt 1 view .LVU807
 3176              		.loc 3 495 8 is_stmt 0 view .LVU808
 3177 000e 012A     		cmp	r2, #1
 3178              		.loc 3 495 58 is_stmt 1 view .LVU809
 3179              		.loc 3 495 81 is_stmt 0 view .LVU810
 3180 0010 88BF     		it	hi
 3181 0012 0122     		movhi	r2, #1
 3182 0014 62F38703 		bfi	r3, r2, #2, #6
 3183 0018 0B70     		strb	r3, [r1]
 496:quantum/rgb_matrix.c ****     rgb_task_state = STARTING;
 3184              		.loc 3 496 5 is_stmt 1 view .LVU811
 3185              		.loc 3 496 20 is_stmt 0 view .LVU812
 3186 001a 034B     		ldr	r3, .L197+4
 3187 001c 0022     		movs	r2, #0
 3188 001e 1A70     		strb	r2, [r3]
 497:quantum/rgb_matrix.c ****     eeconfig_update_rgb_matrix();
 3189              		.loc 3 497 5 is_stmt 1 view .LVU813
 3190 0020 FFF7FEBF 		b	eeconfig_update_rgb_matrix
 3191              	.LVL219:
 3192              	.L198:
 3193              		.align	2
 3194              	.L197:
 3195 0024 00000000 		.word	rgb_matrix_config
 3196 0028 00000000 		.word	.LANCHOR2
 3197              		.cfi_endproc
 3198              	.LFE117:
 3200              		.section	.text.rgb_matrix_step_reverse,"ax",%progbits
 3201              		.align	1
 3202              		.global	rgb_matrix_step_reverse
 3203              		.syntax unified
 3204              		.thumb
 3205              		.thumb_func
 3206              		.fpu fpv4-sp-d16
 3208              	rgb_matrix_step_reverse:
 3209              	.LFB118:
 498:quantum/rgb_matrix.c **** }
 499:quantum/rgb_matrix.c **** 
 500:quantum/rgb_matrix.c **** void rgb_matrix_step_reverse(void) {
 3210              		.loc 3 500 36 view -0
 3211              		.cfi_startproc
 3212              		@ args = 0, pretend = 0, frame = 0
 3213              		@ frame_needed = 0, uses_anonymous_args = 0
 3214              		@ link register save eliminated.
 501:quantum/rgb_matrix.c ****     rgb_matrix_config.mode--;
 3215              		.loc 3 501 5 view .LVU815
 3216              		.loc 3 501 27 is_stmt 0 view .LVU816
 3217 0000 084A     		ldr	r2, .L201
 3218 0002 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 3219 0004 FC33     		adds	r3, r3, #252
 3220 0006 1370     		strb	r3, [r2]
 502:quantum/rgb_matrix.c ****     if (rgb_matrix_config.mode < 1) rgb_matrix_config.mode = RGB_MATRIX_EFFECT_MAX - 1;
 3221              		.loc 3 502 5 is_stmt 1 view .LVU817
 3222              		.loc 3 502 32 is_stmt 0 view .LVU818
 3223 0008 DBB2     		uxtb	r3, r3
 3224              		.loc 3 502 8 view .LVU819
 3225 000a 13F0FC0F 		tst	r3, #252
 3226              		.loc 3 502 37 is_stmt 1 view .LVU820
 3227              		.loc 3 502 60 is_stmt 0 view .LVU821
 3228 000e 02BF     		ittt	eq
 3229 0010 0121     		moveq	r1, #1
 3230 0012 61F38703 		bfieq	r3, r1, #2, #6
 3231 0016 1370     		strbeq	r3, [r2]
 503:quantum/rgb_matrix.c ****     rgb_task_state = STARTING;
 3232              		.loc 3 503 5 is_stmt 1 view .LVU822
 3233              		.loc 3 503 20 is_stmt 0 view .LVU823
 3234 0018 034B     		ldr	r3, .L201+4
 3235 001a 0022     		movs	r2, #0
 3236 001c 1A70     		strb	r2, [r3]
 504:quantum/rgb_matrix.c ****     eeconfig_update_rgb_matrix();
 3237              		.loc 3 504 5 is_stmt 1 view .LVU824
 3238 001e FFF7FEBF 		b	eeconfig_update_rgb_matrix
 3239              	.LVL220:
 3240              	.L202:
 3241 0022 00BF     		.align	2
 3242              	.L201:
 3243 0024 00000000 		.word	rgb_matrix_config
 3244 0028 00000000 		.word	.LANCHOR2
 3245              		.cfi_endproc
 3246              	.LFE118:
 3248              		.section	.text.rgb_matrix_increase_hue,"ax",%progbits
 3249              		.align	1
 3250              		.global	rgb_matrix_increase_hue
 3251              		.syntax unified
 3252              		.thumb
 3253              		.thumb_func
 3254              		.fpu fpv4-sp-d16
 3256              	rgb_matrix_increase_hue:
 3257              	.LFB119:
 505:quantum/rgb_matrix.c **** }
 506:quantum/rgb_matrix.c **** 
 507:quantum/rgb_matrix.c **** void rgb_matrix_increase_hue(void) {
 3258              		.loc 3 507 36 view -0
 3259              		.cfi_startproc
 3260              		@ args = 0, pretend = 0, frame = 0
 3261              		@ frame_needed = 0, uses_anonymous_args = 0
 3262              		@ link register save eliminated.
 508:quantum/rgb_matrix.c ****     rgb_matrix_config.hsv.h += RGB_MATRIX_HUE_STEP;
 3263              		.loc 3 508 5 view .LVU826
 3264              		.loc 3 508 29 is_stmt 0 view .LVU827
 3265 0000 024A     		ldr	r2, .L204
 3266 0002 5378     		ldrb	r3, [r2, #1]	@ zero_extendqisi2
 3267 0004 0833     		adds	r3, r3, #8
 3268 0006 5370     		strb	r3, [r2, #1]
 509:quantum/rgb_matrix.c ****     eeconfig_update_rgb_matrix();
 3269              		.loc 3 509 5 is_stmt 1 view .LVU828
 3270 0008 FFF7FEBF 		b	eeconfig_update_rgb_matrix
 3271              	.LVL221:
 3272              	.L205:
 3273              		.align	2
 3274              	.L204:
 3275 000c 00000000 		.word	rgb_matrix_config
 3276              		.cfi_endproc
 3277              	.LFE119:
 3279              		.section	.text.rgb_matrix_decrease_hue,"ax",%progbits
 3280              		.align	1
 3281              		.global	rgb_matrix_decrease_hue
 3282              		.syntax unified
 3283              		.thumb
 3284              		.thumb_func
 3285              		.fpu fpv4-sp-d16
 3287              	rgb_matrix_decrease_hue:
 3288              	.LFB120:
 510:quantum/rgb_matrix.c **** }
 511:quantum/rgb_matrix.c **** 
 512:quantum/rgb_matrix.c **** void rgb_matrix_decrease_hue(void) {
 3289              		.loc 3 512 36 view -0
 3290              		.cfi_startproc
 3291              		@ args = 0, pretend = 0, frame = 0
 3292              		@ frame_needed = 0, uses_anonymous_args = 0
 3293              		@ link register save eliminated.
 513:quantum/rgb_matrix.c ****     rgb_matrix_config.hsv.h -= RGB_MATRIX_HUE_STEP;
 3294              		.loc 3 513 5 view .LVU830
 3295              		.loc 3 513 29 is_stmt 0 view .LVU831
 3296 0000 024A     		ldr	r2, .L207
 3297 0002 5378     		ldrb	r3, [r2, #1]	@ zero_extendqisi2
 3298 0004 083B     		subs	r3, r3, #8
 3299 0006 5370     		strb	r3, [r2, #1]
 514:quantum/rgb_matrix.c ****     eeconfig_update_rgb_matrix();
 3300              		.loc 3 514 5 is_stmt 1 view .LVU832
 3301 0008 FFF7FEBF 		b	eeconfig_update_rgb_matrix
 3302              	.LVL222:
 3303              	.L208:
 3304              		.align	2
 3305              	.L207:
 3306 000c 00000000 		.word	rgb_matrix_config
 3307              		.cfi_endproc
 3308              	.LFE120:
 3310              		.section	.text.rgb_matrix_increase_sat,"ax",%progbits
 3311              		.align	1
 3312              		.global	rgb_matrix_increase_sat
 3313              		.syntax unified
 3314              		.thumb
 3315              		.thumb_func
 3316              		.fpu fpv4-sp-d16
 3318              	rgb_matrix_increase_sat:
 3319              	.LFB121:
 515:quantum/rgb_matrix.c **** }
 516:quantum/rgb_matrix.c **** 
 517:quantum/rgb_matrix.c **** void rgb_matrix_increase_sat(void) {
 3320              		.loc 3 517 36 view -0
 3321              		.cfi_startproc
 3322              		@ args = 0, pretend = 0, frame = 0
 3323              		@ frame_needed = 0, uses_anonymous_args = 0
 3324              		@ link register save eliminated.
 518:quantum/rgb_matrix.c ****     rgb_matrix_config.hsv.s = qadd8(rgb_matrix_config.hsv.s, RGB_MATRIX_SAT_STEP);
 3325              		.loc 3 518 5 view .LVU834
 3326              	.LVL223:
 3327              	.LBB197:
 3328              	.LBI197:
  23:./lib/lib8tion/math8.h **** {
 3329              		.loc 1 23 34 view .LVU835
 3330              	.LBB198:
  26:./lib/lib8tion/math8.h ****     if (t > 255) t = 255;
 3331              		.loc 1 26 5 view .LVU836
 3332              	.LBE198:
 3333              	.LBE197:
 3334              		.loc 3 518 31 is_stmt 0 view .LVU837
 3335 0000 044A     		ldr	r2, .L210
 3336              	.LBB200:
 3337              	.LBB199:
  26:./lib/lib8tion/math8.h ****     if (t > 255) t = 255;
 3338              		.loc 1 26 20 view .LVU838
 3339 0002 9378     		ldrb	r3, [r2, #2]	@ zero_extendqisi2
  26:./lib/lib8tion/math8.h ****     if (t > 255) t = 255;
 3340              		.loc 1 26 14 view .LVU839
 3341 0004 1033     		adds	r3, r3, #16
 3342              	.LVL224:
  27:./lib/lib8tion/math8.h ****     return t;
 3343              		.loc 1 27 5 is_stmt 1 view .LVU840
  28:./lib/lib8tion/math8.h **** #elif QADD8_AVRASM == 1
 3344              		.loc 1 28 5 view .LVU841
  28:./lib/lib8tion/math8.h **** #elif QADD8_AVRASM == 1
 3345              		.loc 1 28 12 is_stmt 0 view .LVU842
 3346 0006 FF2B     		cmp	r3, #255
 3347 0008 28BF     		it	cs
 3348 000a FF23     		movcs	r3, #255
 3349 000c 9370     		strb	r3, [r2, #2]
 3350              	.LBE199:
 3351              	.LBE200:
 519:quantum/rgb_matrix.c ****     eeconfig_update_rgb_matrix();
 3352              		.loc 3 519 5 is_stmt 1 view .LVU843
 3353 000e FFF7FEBF 		b	eeconfig_update_rgb_matrix
 3354              	.LVL225:
 3355              	.L211:
 3356 0012 00BF     		.align	2
 3357              	.L210:
 3358 0014 00000000 		.word	rgb_matrix_config
 3359              		.cfi_endproc
 3360              	.LFE121:
 3362              		.section	.text.rgb_matrix_decrease_sat,"ax",%progbits
 3363              		.align	1
 3364              		.global	rgb_matrix_decrease_sat
 3365              		.syntax unified
 3366              		.thumb
 3367              		.thumb_func
 3368              		.fpu fpv4-sp-d16
 3370              	rgb_matrix_decrease_sat:
 3371              	.LFB122:
 520:quantum/rgb_matrix.c **** }
 521:quantum/rgb_matrix.c **** 
 522:quantum/rgb_matrix.c **** void rgb_matrix_decrease_sat(void) {
 3372              		.loc 3 522 36 view -0
 3373              		.cfi_startproc
 3374              		@ args = 0, pretend = 0, frame = 0
 3375              		@ frame_needed = 0, uses_anonymous_args = 0
 3376              		@ link register save eliminated.
 523:quantum/rgb_matrix.c ****     rgb_matrix_config.hsv.s = qsub8(rgb_matrix_config.hsv.s, RGB_MATRIX_SAT_STEP);
 3377              		.loc 3 523 5 view .LVU845
 3378              	.LVL226:
 3379              	.LBB201:
 3380              	.LBI201:
  88:./lib/lib8tion/math8.h **** {
 3381              		.loc 1 88 34 view .LVU846
 3382              	.LBB202:
  91:./lib/lib8tion/math8.h ****     if (t < 0) t = 0;
 3383              		.loc 1 91 5 view .LVU847
 3384              	.LBE202:
 3385              	.LBE201:
 3386              		.loc 3 523 31 is_stmt 0 view .LVU848
 3387 0000 034A     		ldr	r2, .L213
 3388              	.LBB204:
 3389              	.LBB203:
  91:./lib/lib8tion/math8.h ****     if (t < 0) t = 0;
 3390              		.loc 1 91 19 view .LVU849
 3391 0002 9378     		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 3392 0004 103B     		subs	r3, r3, #16
 3393              	.LVL227:
  92:./lib/lib8tion/math8.h ****     return t;
 3394              		.loc 1 92 5 is_stmt 1 view .LVU850
  93:./lib/lib8tion/math8.h **** #elif QSUB8_AVRASM == 1
 3395              		.loc 1 93 5 view .LVU851
  93:./lib/lib8tion/math8.h **** #elif QSUB8_AVRASM == 1
 3396              		.loc 1 93 12 is_stmt 0 view .LVU852
 3397 0006 23EAE373 		bic	r3, r3, r3, asr #31
 3398 000a 9370     		strb	r3, [r2, #2]
 3399              	.LBE203:
 3400              	.LBE204:
 524:quantum/rgb_matrix.c ****     eeconfig_update_rgb_matrix();
 3401              		.loc 3 524 5 is_stmt 1 view .LVU853
 3402 000c FFF7FEBF 		b	eeconfig_update_rgb_matrix
 3403              	.LVL228:
 3404              	.L214:
 3405              		.align	2
 3406              	.L213:
 3407 0010 00000000 		.word	rgb_matrix_config
 3408              		.cfi_endproc
 3409              	.LFE122:
 3411              		.section	.text.rgb_matrix_increase_val,"ax",%progbits
 3412              		.align	1
 3413              		.global	rgb_matrix_increase_val
 3414              		.syntax unified
 3415              		.thumb
 3416              		.thumb_func
 3417              		.fpu fpv4-sp-d16
 3419              	rgb_matrix_increase_val:
 3420              	.LFB123:
 525:quantum/rgb_matrix.c **** }
 526:quantum/rgb_matrix.c **** 
 527:quantum/rgb_matrix.c **** void rgb_matrix_increase_val(void) {
 3421              		.loc 3 527 36 view -0
 3422              		.cfi_startproc
 3423              		@ args = 0, pretend = 0, frame = 0
 3424              		@ frame_needed = 0, uses_anonymous_args = 0
 3425              		@ link register save eliminated.
 528:quantum/rgb_matrix.c ****     rgb_matrix_config.hsv.v = qadd8(rgb_matrix_config.hsv.v, RGB_MATRIX_VAL_STEP);
 3426              		.loc 3 528 5 view .LVU855
 3427              	.LVL229:
 3428              	.LBB205:
 3429              	.LBI205:
  23:./lib/lib8tion/math8.h **** {
 3430              		.loc 1 23 34 view .LVU856
 3431              	.LBB206:
  26:./lib/lib8tion/math8.h ****     if (t > 255) t = 255;
 3432              		.loc 1 26 5 view .LVU857
 3433              	.LBE206:
 3434              	.LBE205:
 3435              		.loc 3 528 31 is_stmt 0 view .LVU858
 3436 0000 044A     		ldr	r2, .L216
 3437              	.LBB208:
 3438              	.LBB207:
  26:./lib/lib8tion/math8.h ****     if (t > 255) t = 255;
 3439              		.loc 1 26 20 view .LVU859
 3440 0002 D378     		ldrb	r3, [r2, #3]	@ zero_extendqisi2
  26:./lib/lib8tion/math8.h ****     if (t > 255) t = 255;
 3441              		.loc 1 26 14 view .LVU860
 3442 0004 1033     		adds	r3, r3, #16
 3443              	.LVL230:
  27:./lib/lib8tion/math8.h ****     return t;
 3444              		.loc 1 27 5 is_stmt 1 view .LVU861
  28:./lib/lib8tion/math8.h **** #elif QADD8_AVRASM == 1
 3445              		.loc 1 28 5 view .LVU862
  28:./lib/lib8tion/math8.h **** #elif QADD8_AVRASM == 1
 3446              		.loc 1 28 12 is_stmt 0 view .LVU863
 3447 0006 FF2B     		cmp	r3, #255
 3448 0008 28BF     		it	cs
 3449 000a FF23     		movcs	r3, #255
 3450 000c D370     		strb	r3, [r2, #3]
 3451              	.LBE207:
 3452              	.LBE208:
 529:quantum/rgb_matrix.c ****     if (rgb_matrix_config.hsv.v > RGB_MATRIX_MAXIMUM_BRIGHTNESS) rgb_matrix_config.hsv.v = RGB_MATR
 3453              		.loc 3 529 5 is_stmt 1 view .LVU864
 530:quantum/rgb_matrix.c ****     eeconfig_update_rgb_matrix();
 3454              		.loc 3 530 5 view .LVU865
 3455 000e FFF7FEBF 		b	eeconfig_update_rgb_matrix
 3456              	.LVL231:
 3457              	.L217:
 3458 0012 00BF     		.align	2
 3459              	.L216:
 3460 0014 00000000 		.word	rgb_matrix_config
 3461              		.cfi_endproc
 3462              	.LFE123:
 3464              		.section	.text.rgb_matrix_decrease_val,"ax",%progbits
 3465              		.align	1
 3466              		.global	rgb_matrix_decrease_val
 3467              		.syntax unified
 3468              		.thumb
 3469              		.thumb_func
 3470              		.fpu fpv4-sp-d16
 3472              	rgb_matrix_decrease_val:
 3473              	.LFB124:
 531:quantum/rgb_matrix.c **** }
 532:quantum/rgb_matrix.c **** 
 533:quantum/rgb_matrix.c **** void rgb_matrix_decrease_val(void) {
 3474              		.loc 3 533 36 view -0
 3475              		.cfi_startproc
 3476              		@ args = 0, pretend = 0, frame = 0
 3477              		@ frame_needed = 0, uses_anonymous_args = 0
 3478              		@ link register save eliminated.
 534:quantum/rgb_matrix.c ****     rgb_matrix_config.hsv.v = qsub8(rgb_matrix_config.hsv.v, RGB_MATRIX_VAL_STEP);
 3479              		.loc 3 534 5 view .LVU867
 3480              	.LVL232:
 3481              	.LBB209:
 3482              	.LBI209:
  88:./lib/lib8tion/math8.h **** {
 3483              		.loc 1 88 34 view .LVU868
 3484              	.LBB210:
  91:./lib/lib8tion/math8.h ****     if (t < 0) t = 0;
 3485              		.loc 1 91 5 view .LVU869
 3486              	.LBE210:
 3487              	.LBE209:
 3488              		.loc 3 534 31 is_stmt 0 view .LVU870
 3489 0000 034A     		ldr	r2, .L219
 3490              	.LBB212:
 3491              	.LBB211:
  91:./lib/lib8tion/math8.h ****     if (t < 0) t = 0;
 3492              		.loc 1 91 19 view .LVU871
 3493 0002 D378     		ldrb	r3, [r2, #3]	@ zero_extendqisi2
 3494 0004 103B     		subs	r3, r3, #16
 3495              	.LVL233:
  92:./lib/lib8tion/math8.h ****     return t;
 3496              		.loc 1 92 5 is_stmt 1 view .LVU872
  93:./lib/lib8tion/math8.h **** #elif QSUB8_AVRASM == 1
 3497              		.loc 1 93 5 view .LVU873
  93:./lib/lib8tion/math8.h **** #elif QSUB8_AVRASM == 1
 3498              		.loc 1 93 12 is_stmt 0 view .LVU874
 3499 0006 23EAE373 		bic	r3, r3, r3, asr #31
 3500 000a D370     		strb	r3, [r2, #3]
 3501              	.LBE211:
 3502              	.LBE212:
 535:quantum/rgb_matrix.c ****     eeconfig_update_rgb_matrix();
 3503              		.loc 3 535 5 is_stmt 1 view .LVU875
 3504 000c FFF7FEBF 		b	eeconfig_update_rgb_matrix
 3505              	.LVL234:
 3506              	.L220:
 3507              		.align	2
 3508              	.L219:
 3509 0010 00000000 		.word	rgb_matrix_config
 3510              		.cfi_endproc
 3511              	.LFE124:
 3513              		.section	.text.rgb_matrix_increase_speed,"ax",%progbits
 3514              		.align	1
 3515              		.global	rgb_matrix_increase_speed
 3516              		.syntax unified
 3517              		.thumb
 3518              		.thumb_func
 3519              		.fpu fpv4-sp-d16
 3521              	rgb_matrix_increase_speed:
 3522              	.LFB125:
 536:quantum/rgb_matrix.c **** }
 537:quantum/rgb_matrix.c **** 
 538:quantum/rgb_matrix.c **** void rgb_matrix_increase_speed(void) {
 3523              		.loc 3 538 38 view -0
 3524              		.cfi_startproc
 3525              		@ args = 0, pretend = 0, frame = 0
 3526              		@ frame_needed = 0, uses_anonymous_args = 0
 3527              		@ link register save eliminated.
 539:quantum/rgb_matrix.c ****     rgb_matrix_config.speed = qadd8(rgb_matrix_config.speed, RGB_MATRIX_SPD_STEP);
 3528              		.loc 3 539 5 view .LVU877
 3529              	.LVL235:
 3530              	.LBB213:
 3531              	.LBI213:
  23:./lib/lib8tion/math8.h **** {
 3532              		.loc 1 23 34 view .LVU878
 3533              	.LBB214:
  26:./lib/lib8tion/math8.h ****     if (t > 255) t = 255;
 3534              		.loc 1 26 5 view .LVU879
 3535              	.LBE214:
 3536              	.LBE213:
 3537              		.loc 3 539 31 is_stmt 0 view .LVU880
 3538 0000 044A     		ldr	r2, .L222
 3539              	.LBB216:
 3540              	.LBB215:
  26:./lib/lib8tion/math8.h ****     if (t > 255) t = 255;
 3541              		.loc 1 26 20 view .LVU881
 3542 0002 1379     		ldrb	r3, [r2, #4]	@ zero_extendqisi2
  26:./lib/lib8tion/math8.h ****     if (t > 255) t = 255;
 3543              		.loc 1 26 14 view .LVU882
 3544 0004 1033     		adds	r3, r3, #16
 3545              	.LVL236:
  27:./lib/lib8tion/math8.h ****     return t;
 3546              		.loc 1 27 5 is_stmt 1 view .LVU883
  28:./lib/lib8tion/math8.h **** #elif QADD8_AVRASM == 1
 3547              		.loc 1 28 5 view .LVU884
  28:./lib/lib8tion/math8.h **** #elif QADD8_AVRASM == 1
 3548              		.loc 1 28 12 is_stmt 0 view .LVU885
 3549 0006 FF2B     		cmp	r3, #255
 3550 0008 28BF     		it	cs
 3551 000a FF23     		movcs	r3, #255
 3552 000c 1371     		strb	r3, [r2, #4]
 3553              	.LBE215:
 3554              	.LBE216:
 540:quantum/rgb_matrix.c ****     eeconfig_update_rgb_matrix();
 3555              		.loc 3 540 5 is_stmt 1 view .LVU886
 3556 000e FFF7FEBF 		b	eeconfig_update_rgb_matrix
 3557              	.LVL237:
 3558              	.L223:
 3559 0012 00BF     		.align	2
 3560              	.L222:
 3561 0014 00000000 		.word	rgb_matrix_config
 3562              		.cfi_endproc
 3563              	.LFE125:
 3565              		.section	.text.rgb_matrix_decrease_speed,"ax",%progbits
 3566              		.align	1
 3567              		.global	rgb_matrix_decrease_speed
 3568              		.syntax unified
 3569              		.thumb
 3570              		.thumb_func
 3571              		.fpu fpv4-sp-d16
 3573              	rgb_matrix_decrease_speed:
 3574              	.LFB126:
 541:quantum/rgb_matrix.c **** }
 542:quantum/rgb_matrix.c **** 
 543:quantum/rgb_matrix.c **** void rgb_matrix_decrease_speed(void) {
 3575              		.loc 3 543 38 view -0
 3576              		.cfi_startproc
 3577              		@ args = 0, pretend = 0, frame = 0
 3578              		@ frame_needed = 0, uses_anonymous_args = 0
 3579              		@ link register save eliminated.
 544:quantum/rgb_matrix.c ****     rgb_matrix_config.speed = qsub8(rgb_matrix_config.speed, RGB_MATRIX_SPD_STEP);
 3580              		.loc 3 544 5 view .LVU888
 3581              	.LVL238:
 3582              	.LBB217:
 3583              	.LBI217:
  88:./lib/lib8tion/math8.h **** {
 3584              		.loc 1 88 34 view .LVU889
 3585              	.LBB218:
  91:./lib/lib8tion/math8.h ****     if (t < 0) t = 0;
 3586              		.loc 1 91 5 view .LVU890
 3587              	.LBE218:
 3588              	.LBE217:
 3589              		.loc 3 544 31 is_stmt 0 view .LVU891
 3590 0000 034A     		ldr	r2, .L225
 3591              	.LBB220:
 3592              	.LBB219:
  91:./lib/lib8tion/math8.h ****     if (t < 0) t = 0;
 3593              		.loc 1 91 19 view .LVU892
 3594 0002 1379     		ldrb	r3, [r2, #4]	@ zero_extendqisi2
 3595 0004 103B     		subs	r3, r3, #16
 3596              	.LVL239:
  92:./lib/lib8tion/math8.h ****     return t;
 3597              		.loc 1 92 5 is_stmt 1 view .LVU893
  93:./lib/lib8tion/math8.h **** #elif QSUB8_AVRASM == 1
 3598              		.loc 1 93 5 view .LVU894
  93:./lib/lib8tion/math8.h **** #elif QSUB8_AVRASM == 1
 3599              		.loc 1 93 12 is_stmt 0 view .LVU895
 3600 0006 23EAE373 		bic	r3, r3, r3, asr #31
 3601 000a 1371     		strb	r3, [r2, #4]
 3602              	.LBE219:
 3603              	.LBE220:
 545:quantum/rgb_matrix.c ****     eeconfig_update_rgb_matrix();
 3604              		.loc 3 545 5 is_stmt 1 view .LVU896
 3605 000c FFF7FEBF 		b	eeconfig_update_rgb_matrix
 3606              	.LVL240:
 3607              	.L226:
 3608              		.align	2
 3609              	.L225:
 3610 0010 00000000 		.word	rgb_matrix_config
 3611              		.cfi_endproc
 3612              	.LFE126:
 3614              		.section	.text.rgb_matrix_get_speed,"ax",%progbits
 3615              		.align	1
 3616              		.global	rgb_matrix_get_speed
 3617              		.syntax unified
 3618              		.thumb
 3619              		.thumb_func
 3620              		.fpu fpv4-sp-d16
 3622              	rgb_matrix_get_speed:
 3623              	.LFB127:
 546:quantum/rgb_matrix.c **** }
 547:quantum/rgb_matrix.c **** 
 548:quantum/rgb_matrix.c **** uint8_t rgb_matrix_get_speed(void) { return rgb_matrix_config.speed; }
 3624              		.loc 3 548 36 view -0
 3625              		.cfi_startproc
 3626              		@ args = 0, pretend = 0, frame = 0
 3627              		@ frame_needed = 0, uses_anonymous_args = 0
 3628              		@ link register save eliminated.
 3629              		.loc 3 548 38 view .LVU898
 3630              		.loc 3 548 1 is_stmt 0 view .LVU899
 3631 0000 014B     		ldr	r3, .L228
 3632 0002 1879     		ldrb	r0, [r3, #4]	@ zero_extendqisi2
 3633 0004 7047     		bx	lr
 3634              	.L229:
 3635 0006 00BF     		.align	2
 3636              	.L228:
 3637 0008 00000000 		.word	rgb_matrix_config
 3638              		.cfi_endproc
 3639              	.LFE127:
 3641              		.section	.text.rgb_matrix_get_flags,"ax",%progbits
 3642              		.align	1
 3643              		.global	rgb_matrix_get_flags
 3644              		.syntax unified
 3645              		.thumb
 3646              		.thumb_func
 3647              		.fpu fpv4-sp-d16
 3649              	rgb_matrix_get_flags:
 3650              	.LFB128:
 549:quantum/rgb_matrix.c **** 
 550:quantum/rgb_matrix.c **** led_flags_t rgb_matrix_get_flags(void) { return rgb_effect_params.flags; }
 3651              		.loc 3 550 40 is_stmt 1 view -0
 3652              		.cfi_startproc
 3653              		@ args = 0, pretend = 0, frame = 0
 3654              		@ frame_needed = 0, uses_anonymous_args = 0
 3655              		@ link register save eliminated.
 3656              		.loc 3 550 42 view .LVU901
 3657              		.loc 3 550 1 is_stmt 0 view .LVU902
 3658 0000 014B     		ldr	r3, .L231
 3659 0002 9878     		ldrb	r0, [r3, #2]	@ zero_extendqisi2
 3660 0004 7047     		bx	lr
 3661              	.L232:
 3662 0006 00BF     		.align	2
 3663              	.L231:
 3664 0008 00000000 		.word	.LANCHOR2
 3665              		.cfi_endproc
 3666              	.LFE128:
 3668              		.section	.text.rgb_matrix_set_flags,"ax",%progbits
 3669              		.align	1
 3670              		.global	rgb_matrix_set_flags
 3671              		.syntax unified
 3672              		.thumb
 3673              		.thumb_func
 3674              		.fpu fpv4-sp-d16
 3676              	rgb_matrix_set_flags:
 3677              	.LVL241:
 3678              	.LFB129:
 551:quantum/rgb_matrix.c **** 
 552:quantum/rgb_matrix.c **** void rgb_matrix_set_flags(led_flags_t flags) { rgb_effect_params.flags = flags; }
 3679              		.loc 3 552 46 is_stmt 1 view -0
 3680              		.cfi_startproc
 3681              		@ args = 0, pretend = 0, frame = 0
 3682              		@ frame_needed = 0, uses_anonymous_args = 0
 3683              		@ link register save eliminated.
 3684              		.loc 3 552 48 view .LVU904
 3685              		.loc 3 552 72 is_stmt 0 view .LVU905
 3686 0000 014B     		ldr	r3, .L234
 3687 0002 9870     		strb	r0, [r3, #2]
 3688              		.loc 3 552 1 view .LVU906
 3689 0004 7047     		bx	lr
 3690              	.L235:
 3691 0006 00BF     		.align	2
 3692              	.L234:
 3693 0008 00000000 		.word	.LANCHOR2
 3694              		.cfi_endproc
 3695              	.LFE129:
 3697              		.section	.text.rgb_matrix_mode,"ax",%progbits
 3698              		.align	1
 3699              		.global	rgb_matrix_mode
 3700              		.syntax unified
 3701              		.thumb
 3702              		.thumb_func
 3703              		.fpu fpv4-sp-d16
 3705              	rgb_matrix_mode:
 3706              	.LVL242:
 3707              	.LFB130:
 553:quantum/rgb_matrix.c **** 
 554:quantum/rgb_matrix.c **** void rgb_matrix_mode(uint8_t mode) {
 3708              		.loc 3 554 36 is_stmt 1 view -0
 3709              		.cfi_startproc
 3710              		@ args = 0, pretend = 0, frame = 0
 3711              		@ frame_needed = 0, uses_anonymous_args = 0
 3712              		@ link register save eliminated.
 555:quantum/rgb_matrix.c ****     rgb_matrix_config.mode = mode;
 3713              		.loc 3 555 5 view .LVU908
 3714              		.loc 3 555 28 is_stmt 0 view .LVU909
 3715 0000 044B     		ldr	r3, .L237
 3716 0002 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3717 0004 60F38702 		bfi	r2, r0, #2, #6
 3718 0008 1A70     		strb	r2, [r3]
 556:quantum/rgb_matrix.c ****     rgb_task_state         = STARTING;
 3719              		.loc 3 556 5 is_stmt 1 view .LVU910
 3720              		.loc 3 556 28 is_stmt 0 view .LVU911
 3721 000a 034B     		ldr	r3, .L237+4
 3722 000c 0022     		movs	r2, #0
 3723 000e 1A70     		strb	r2, [r3]
 557:quantum/rgb_matrix.c ****     eeconfig_update_rgb_matrix();
 3724              		.loc 3 557 5 is_stmt 1 view .LVU912
 3725 0010 FFF7FEBF 		b	eeconfig_update_rgb_matrix
 3726              	.LVL243:
 3727              	.L238:
 3728              		.loc 3 557 5 is_stmt 0 view .LVU913
 3729              		.align	2
 3730              	.L237:
 3731 0014 00000000 		.word	rgb_matrix_config
 3732 0018 00000000 		.word	.LANCHOR2
 3733              		.cfi_endproc
 3734              	.LFE130:
 3736              		.section	.text.rgb_matrix_mode_noeeprom,"ax",%progbits
 3737              		.align	1
 3738              		.global	rgb_matrix_mode_noeeprom
 3739              		.syntax unified
 3740              		.thumb
 3741              		.thumb_func
 3742              		.fpu fpv4-sp-d16
 3744              	rgb_matrix_mode_noeeprom:
 3745              	.LVL244:
 3746              	.LFB131:
 558:quantum/rgb_matrix.c **** }
 559:quantum/rgb_matrix.c **** 
 560:quantum/rgb_matrix.c **** void rgb_matrix_mode_noeeprom(uint8_t mode) { rgb_matrix_config.mode = mode; }
 3747              		.loc 3 560 45 is_stmt 1 view -0
 3748              		.cfi_startproc
 3749              		@ args = 0, pretend = 0, frame = 0
 3750              		@ frame_needed = 0, uses_anonymous_args = 0
 3751              		@ link register save eliminated.
 3752              		.loc 3 560 47 view .LVU915
 3753              		.loc 3 560 70 is_stmt 0 view .LVU916
 3754 0000 024B     		ldr	r3, .L240
 3755 0002 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3756 0004 60F38702 		bfi	r2, r0, #2, #6
 3757 0008 1A70     		strb	r2, [r3]
 3758              		.loc 3 560 1 view .LVU917
 3759 000a 7047     		bx	lr
 3760              	.L241:
 3761              		.align	2
 3762              	.L240:
 3763 000c 00000000 		.word	rgb_matrix_config
 3764              		.cfi_endproc
 3765              	.LFE131:
 3767              		.section	.text.rgb_matrix_get_mode,"ax",%progbits
 3768              		.align	1
 3769              		.global	rgb_matrix_get_mode
 3770              		.syntax unified
 3771              		.thumb
 3772              		.thumb_func
 3773              		.fpu fpv4-sp-d16
 3775              	rgb_matrix_get_mode:
 3776              	.LFB132:
 561:quantum/rgb_matrix.c **** 
 562:quantum/rgb_matrix.c **** uint8_t rgb_matrix_get_mode(void) { return rgb_matrix_config.mode; }
 3777              		.loc 3 562 35 is_stmt 1 view -0
 3778              		.cfi_startproc
 3779              		@ args = 0, pretend = 0, frame = 0
 3780              		@ frame_needed = 0, uses_anonymous_args = 0
 3781              		@ link register save eliminated.
 3782              		.loc 3 562 37 view .LVU919
 3783              		.loc 3 562 61 is_stmt 0 view .LVU920
 3784 0000 014B     		ldr	r3, .L243
 3785 0002 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 3786              		.loc 3 562 1 view .LVU921
 3787 0004 8008     		lsrs	r0, r0, #2
 3788 0006 7047     		bx	lr
 3789              	.L244:
 3790              		.align	2
 3791              	.L243:
 3792 0008 00000000 		.word	rgb_matrix_config
 3793              		.cfi_endproc
 3794              	.LFE132:
 3796              		.section	.text.rgb_matrix_sethsv,"ax",%progbits
 3797              		.align	1
 3798              		.global	rgb_matrix_sethsv
 3799              		.syntax unified
 3800              		.thumb
 3801              		.thumb_func
 3802              		.fpu fpv4-sp-d16
 3804              	rgb_matrix_sethsv:
 3805              	.LVL245:
 3806              	.LFB133:
 563:quantum/rgb_matrix.c **** 
 564:quantum/rgb_matrix.c **** void rgb_matrix_sethsv(uint16_t hue, uint8_t sat, uint8_t val) {
 3807              		.loc 3 564 64 is_stmt 1 view -0
 3808              		.cfi_startproc
 3809              		@ args = 0, pretend = 0, frame = 0
 3810              		@ frame_needed = 0, uses_anonymous_args = 0
 3811              		@ link register save eliminated.
 565:quantum/rgb_matrix.c ****     rgb_matrix_sethsv_noeeprom(hue, sat, val);
 3812              		.loc 3 565 5 view .LVU923
 3813              	.LBB223:
 3814              	.LBI223:
 566:quantum/rgb_matrix.c ****     eeconfig_update_rgb_matrix();
 567:quantum/rgb_matrix.c **** }
 568:quantum/rgb_matrix.c **** 
 569:quantum/rgb_matrix.c **** void rgb_matrix_sethsv_noeeprom(uint16_t hue, uint8_t sat, uint8_t val) {
 3815              		.loc 3 569 6 view .LVU924
 3816              	.LBB224:
 570:quantum/rgb_matrix.c ****     rgb_matrix_config.hsv.h = hue;
 3817              		.loc 3 570 5 view .LVU925
 3818              		.loc 3 570 29 is_stmt 0 view .LVU926
 3819 0000 024B     		ldr	r3, .L246
 3820 0002 5870     		strb	r0, [r3, #1]
 571:quantum/rgb_matrix.c ****     rgb_matrix_config.hsv.s = sat;
 3821              		.loc 3 571 5 is_stmt 1 view .LVU927
 3822              		.loc 3 571 29 is_stmt 0 view .LVU928
 3823 0004 9970     		strb	r1, [r3, #2]
 572:quantum/rgb_matrix.c ****     rgb_matrix_config.hsv.v = val;
 3824              		.loc 3 572 5 is_stmt 1 view .LVU929
 3825              		.loc 3 572 29 is_stmt 0 view .LVU930
 3826 0006 DA70     		strb	r2, [r3, #3]
 573:quantum/rgb_matrix.c ****     if (rgb_matrix_config.hsv.v > RGB_MATRIX_MAXIMUM_BRIGHTNESS) rgb_matrix_config.hsv.v = RGB_MATR
 3827              		.loc 3 573 5 is_stmt 1 view .LVU931
 3828              	.LVL246:
 3829              		.loc 3 573 5 is_stmt 0 view .LVU932
 3830              	.LBE224:
 3831              	.LBE223:
 566:quantum/rgb_matrix.c **** }
 3832              		.loc 3 566 5 is_stmt 1 view .LVU933
 3833 0008 FFF7FEBF 		b	eeconfig_update_rgb_matrix
 3834              	.LVL247:
 3835              	.L247:
 566:quantum/rgb_matrix.c **** }
 3836              		.loc 3 566 5 is_stmt 0 view .LVU934
 3837              		.align	2
 3838              	.L246:
 3839 000c 00000000 		.word	rgb_matrix_config
 3840              		.cfi_endproc
 3841              	.LFE133:
 3843              		.section	.text.rgb_matrix_sethsv_noeeprom,"ax",%progbits
 3844              		.align	1
 3845              		.global	rgb_matrix_sethsv_noeeprom
 3846              		.syntax unified
 3847              		.thumb
 3848              		.thumb_func
 3849              		.fpu fpv4-sp-d16
 3851              	rgb_matrix_sethsv_noeeprom:
 3852              	.LVL248:
 3853              	.LFB134:
 569:quantum/rgb_matrix.c ****     rgb_matrix_config.hsv.h = hue;
 3854              		.loc 3 569 73 is_stmt 1 view -0
 3855              		.cfi_startproc
 3856              		@ args = 0, pretend = 0, frame = 0
 3857              		@ frame_needed = 0, uses_anonymous_args = 0
 3858              		@ link register save eliminated.
 570:quantum/rgb_matrix.c ****     rgb_matrix_config.hsv.s = sat;
 3859              		.loc 3 570 5 view .LVU936
 570:quantum/rgb_matrix.c ****     rgb_matrix_config.hsv.s = sat;
 3860              		.loc 3 570 29 is_stmt 0 view .LVU937
 3861 0000 024B     		ldr	r3, .L249
 3862 0002 5870     		strb	r0, [r3, #1]
 571:quantum/rgb_matrix.c ****     rgb_matrix_config.hsv.v = val;
 3863              		.loc 3 571 5 is_stmt 1 view .LVU938
 571:quantum/rgb_matrix.c ****     rgb_matrix_config.hsv.v = val;
 3864              		.loc 3 571 29 is_stmt 0 view .LVU939
 3865 0004 9970     		strb	r1, [r3, #2]
 572:quantum/rgb_matrix.c ****     if (rgb_matrix_config.hsv.v > RGB_MATRIX_MAXIMUM_BRIGHTNESS) rgb_matrix_config.hsv.v = RGB_MATR
 3866              		.loc 3 572 5 is_stmt 1 view .LVU940
 572:quantum/rgb_matrix.c ****     if (rgb_matrix_config.hsv.v > RGB_MATRIX_MAXIMUM_BRIGHTNESS) rgb_matrix_config.hsv.v = RGB_MATR
 3867              		.loc 3 572 29 is_stmt 0 view .LVU941
 3868 0006 DA70     		strb	r2, [r3, #3]
 3869              		.loc 3 573 5 is_stmt 1 view .LVU942
 574:quantum/rgb_matrix.c **** }
 3870              		.loc 3 574 1 is_stmt 0 view .LVU943
 3871 0008 7047     		bx	lr
 3872              	.L250:
 3873 000a 00BF     		.align	2
 3874              	.L249:
 3875 000c 00000000 		.word	rgb_matrix_config
 3876              		.cfi_endproc
 3877              	.LFE134:
 3879              		.section	.text.rgb_matrix_get_hsv,"ax",%progbits
 3880              		.align	1
 3881              		.global	rgb_matrix_get_hsv
 3882              		.syntax unified
 3883              		.thumb
 3884              		.thumb_func
 3885              		.fpu fpv4-sp-d16
 3887              	rgb_matrix_get_hsv:
 3888              	.LFB135:
 575:quantum/rgb_matrix.c **** 
 576:quantum/rgb_matrix.c **** HSV     rgb_matrix_get_hsv(void) { return rgb_matrix_config.hsv; }
 3889              		.loc 3 576 34 is_stmt 1 view -0
 3890              		.cfi_startproc
 3891              		@ args = 0, pretend = 0, frame = 8
 3892              		@ frame_needed = 0, uses_anonymous_args = 0
 3893              		@ link register save eliminated.
 3894              		.loc 3 576 36 view .LVU945
 3895              		.loc 3 576 60 is_stmt 0 view .LVU946
 3896 0000 094B     		ldr	r3, .L252
 3897              		.loc 3 576 34 view .LVU947
 3898 0002 82B0     		sub	sp, sp, #8
 3899              		.cfi_def_cfa_offset 8
 3900              		.loc 3 576 60 view .LVU948
 3901 0004 33F8012F 		ldrh	r2, [r3, #1]!	@ unaligned
 3902 0008 ADF80420 		strh	r2, [sp, #4]	@ unaligned
 3903 000c 9DF80420 		ldrb	r2, [sp, #4]	@ zero_extendqisi2
 3904 0010 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 3905 0012 0020     		movs	r0, #0
 3906 0014 62F30700 		bfi	r0, r2, #0, #8
 3907 0018 9DF80520 		ldrb	r2, [sp, #5]	@ zero_extendqisi2
 3908 001c 62F30F20 		bfi	r0, r2, #8, #8
 3909 0020 63F31740 		bfi	r0, r3, #16, #8
 3910              		.loc 3 576 1 view .LVU949
 3911 0024 02B0     		add	sp, sp, #8
 3912              		.cfi_def_cfa_offset 0
 3913              		@ sp needed
 3914 0026 7047     		bx	lr
 3915              	.L253:
 3916              		.align	2
 3917              	.L252:
 3918 0028 00000000 		.word	rgb_matrix_config
 3919              		.cfi_endproc
 3920              	.LFE135:
 3922              		.section	.text.rgb_matrix_get_hue,"ax",%progbits
 3923              		.align	1
 3924              		.global	rgb_matrix_get_hue
 3925              		.syntax unified
 3926              		.thumb
 3927              		.thumb_func
 3928              		.fpu fpv4-sp-d16
 3930              	rgb_matrix_get_hue:
 3931              	.LFB136:
 577:quantum/rgb_matrix.c **** uint8_t rgb_matrix_get_hue(void) { return rgb_matrix_config.hsv.h; }
 3932              		.loc 3 577 34 is_stmt 1 view -0
 3933              		.cfi_startproc
 3934              		@ args = 0, pretend = 0, frame = 0
 3935              		@ frame_needed = 0, uses_anonymous_args = 0
 3936              		@ link register save eliminated.
 3937              		.loc 3 577 36 view .LVU951
 3938              		.loc 3 577 1 is_stmt 0 view .LVU952
 3939 0000 014B     		ldr	r3, .L255
 3940 0002 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 3941 0004 7047     		bx	lr
 3942              	.L256:
 3943 0006 00BF     		.align	2
 3944              	.L255:
 3945 0008 00000000 		.word	rgb_matrix_config
 3946              		.cfi_endproc
 3947              	.LFE136:
 3949              		.section	.text.rgb_matrix_get_sat,"ax",%progbits
 3950              		.align	1
 3951              		.global	rgb_matrix_get_sat
 3952              		.syntax unified
 3953              		.thumb
 3954              		.thumb_func
 3955              		.fpu fpv4-sp-d16
 3957              	rgb_matrix_get_sat:
 3958              	.LFB137:
 578:quantum/rgb_matrix.c **** uint8_t rgb_matrix_get_sat(void) { return rgb_matrix_config.hsv.s; }
 3959              		.loc 3 578 34 is_stmt 1 view -0
 3960              		.cfi_startproc
 3961              		@ args = 0, pretend = 0, frame = 0
 3962              		@ frame_needed = 0, uses_anonymous_args = 0
 3963              		@ link register save eliminated.
 3964              		.loc 3 578 36 view .LVU954
 3965              		.loc 3 578 1 is_stmt 0 view .LVU955
 3966 0000 014B     		ldr	r3, .L258
 3967 0002 9878     		ldrb	r0, [r3, #2]	@ zero_extendqisi2
 3968 0004 7047     		bx	lr
 3969              	.L259:
 3970 0006 00BF     		.align	2
 3971              	.L258:
 3972 0008 00000000 		.word	rgb_matrix_config
 3973              		.cfi_endproc
 3974              	.LFE137:
 3976              		.section	.text.rgb_matrix_get_val,"ax",%progbits
 3977              		.align	1
 3978              		.global	rgb_matrix_get_val
 3979              		.syntax unified
 3980              		.thumb
 3981              		.thumb_func
 3982              		.fpu fpv4-sp-d16
 3984              	rgb_matrix_get_val:
 3985              	.LFB138:
 579:quantum/rgb_matrix.c **** uint8_t rgb_matrix_get_val(void) { return rgb_matrix_config.hsv.v; }
 3986              		.loc 3 579 34 is_stmt 1 view -0
 3987              		.cfi_startproc
 3988              		@ args = 0, pretend = 0, frame = 0
 3989              		@ frame_needed = 0, uses_anonymous_args = 0
 3990              		@ link register save eliminated.
 3991              		.loc 3 579 36 view .LVU957
 3992              		.loc 3 579 1 is_stmt 0 view .LVU958
 3993 0000 014B     		ldr	r3, .L261
 3994 0002 D878     		ldrb	r0, [r3, #3]	@ zero_extendqisi2
 3995 0004 7047     		bx	lr
 3996              	.L262:
 3997 0006 00BF     		.align	2
 3998              	.L261:
 3999 0008 00000000 		.word	rgb_matrix_config
 4000              		.cfi_endproc
 4001              	.LFE138:
 4003              		.comm	g_last_hit_tracker,41,1
 4004              		.comm	g_rgb_timer,4,4
 4005              		.comm	rgb_matrix_config,8,4
 4006              		.global	g_suspend_state
 4007              		.global	k_rgb_matrix_center
 4008              		.section	.rodata
 4009              		.set	.LANCHOR0,. + 0
 4012              	b_m16_interleave:
 4013 0000 00       		.byte	0
 4014 0001 31       		.byte	49
 4015 0002 31       		.byte	49
 4016 0003 29       		.byte	41
 4017 0004 5A       		.byte	90
 4018 0005 1B       		.byte	27
 4019 0006 75       		.byte	117
 4020 0007 0A       		.byte	10
 4021              	.LC0:
 4022 0008 84       		.byte	-124
 4023 0009 FF       		.byte	-1
 4024 000a 80       		.byte	-128
 4027              	k_rgb_matrix_center:
 4028 000b 70       		.byte	112
 4029 000c 20       		.byte	32
 4030              		.data
 4031              		.set	.LANCHOR2,. + 0
 4034              	rgb_task_state:
 4035 0000 03       		.byte	3
 4038              	rgb_effect_params:
 4039 0001 00       		.byte	0
 4040 0002 FF       		.byte	-1
 4041 0003 00       		.space	1
 4044              	rgb_last_effect:
 4045 0004 FF       		.byte	-1
 4048              	rgb_last_enable:
 4049 0005 FF       		.byte	-1
 4050              		.bss
 4051              		.align	2
 4052              		.set	.LANCHOR1,. + 0
 4055              	last_hit_buffer:
 4056 0000 00000000 		.space	41
 4056      00000000 
 4056      00000000 
 4056      00000000 
 4056      00000000 
 4057 0029 000000   		.space	3
 4060              	rgb_timer_buffer:
 4061 002c 00000000 		.space	4
 4064              	g_suspend_state:
 4065 0030 00       		.space	1
 4066              		.text
 4067              	.Letext0:
 4068              		.file 12 "/usr/local/Cellar/arm-gcc-bin@8/8-2019-q3-update/arm-none-eabi/include/machine/_default_
 4069              		.file 13 "/usr/local/Cellar/arm-gcc-bin@8/8-2019-q3-update/arm-none-eabi/include/sys/_stdint.h"
 4070              		.file 14 "quantum/color.h"
 4071              		.file 15 "quantum/rgb_matrix_types.h"
 4072              		.file 16 "tmk_core/protocol/arm_atsam/clks.h"
 4073              		.file 17 "tmk_core/common/keyboard.h"
 4074              		.file 18 "tmk_core/common/action.h"
 4075              		.file 19 "tmk_core/common/report.h"
 4076              		.file 20 "tmk_core/common/host.h"
 4077              		.file 21 "tmk_core/common/debug.h"
 4078              		.file 22 "quantum/keycode_config.h"
 4079              		.file 23 "quantum/keymap.h"
 4080              		.file 24 "tmk_core/common/action_layer.h"
 4081              		.file 25 "tmk_core/common/timer.h"
 4082              		.file 26 "tmk_core/common/action_util.h"
 4083              		.file 27 "/usr/local/Cellar/arm-gcc-bin@8/8-2019-q3-update/lib/gcc/arm-none-eabi/8.3.1/include/std
 4084              		.file 28 "/usr/local/Cellar/arm-gcc-bin@8/8-2019-q3-update/arm-none-eabi/include/sys/_types.h"
 4085              		.file 29 "/usr/local/Cellar/arm-gcc-bin@8/8-2019-q3-update/arm-none-eabi/include/sys/reent.h"
 4086              		.file 30 "/usr/local/Cellar/arm-gcc-bin@8/8-2019-q3-update/arm-none-eabi/include/sys/lock.h"
 4087              		.file 31 "/usr/local/Cellar/arm-gcc-bin@8/8-2019-q3-update/arm-none-eabi/include/stdlib.h"
 4088              		.file 32 "quantum/quantum.h"
 4089              		.file 33 "quantum/rgb_matrix.h"
 4090              		.file 34 "/usr/local/Cellar/arm-gcc-bin@8/8-2019-q3-update/arm-none-eabi/include/math.h"
 4091              		.file 35 "./lib/lib8tion/lib8tion.h"
 4092              		.file 36 "./lib/lib8tion/random8.h"
 4093              		.file 37 "tmk_core/common/eeconfig.h"
 4094              		.file 38 "tmk_core/common/eeprom.h"
 4095              		.file 39 "<built-in>"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 rgb_matrix.c
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:18     .text.sqrt16:0000000000000000 $t
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:25     .text.sqrt16:0000000000000000 sqrt16
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:132    .text.sin8_C:0000000000000000 $t
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:138    .text.sin8_C:0000000000000000 sin8_C
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:231    .text.sin8_C:000000000000003c $d
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:236    .text.eeconfig_read_rgb_matrix:0000000000000000 $t
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:243    .text.eeconfig_read_rgb_matrix:0000000000000000 eeconfig_read_rgb_matrix
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:260    .text.eeconfig_read_rgb_matrix:000000000000000c $d
                            *COM*:0000000000000008 rgb_matrix_config
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:265    .text.eeconfig_update_rgb_matrix:0000000000000000 $t
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:272    .text.eeconfig_update_rgb_matrix:0000000000000000 eeconfig_update_rgb_matrix
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:288    .text.eeconfig_update_rgb_matrix:000000000000000c $d
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:293    .text.eeconfig_update_rgb_matrix_default:0000000000000000 $t
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:300    .text.eeconfig_update_rgb_matrix_default:0000000000000000 eeconfig_update_rgb_matrix_default
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:332    .text.eeconfig_update_rgb_matrix_default:0000000000000020 $d
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:338    .text.eeconfig_debug_rgb_matrix:0000000000000000 $t
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:345    .text.eeconfig_debug_rgb_matrix:0000000000000000 eeconfig_debug_rgb_matrix
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:365    .text.rgb_matrix_map_row_column_to_led_kb:0000000000000000 $t
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:372    .text.rgb_matrix_map_row_column_to_led_kb:0000000000000000 rgb_matrix_map_row_column_to_led_kb
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:390    .text.rgb_matrix_map_row_column_to_led:0000000000000000 $t
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:397    .text.rgb_matrix_map_row_column_to_led:0000000000000000 rgb_matrix_map_row_column_to_led
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:447    .text.rgb_matrix_map_row_column_to_led:0000000000000020 $d
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:452    .text.rgb_matrix_update_pwm_buffers:0000000000000000 $t
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:459    .text.rgb_matrix_update_pwm_buffers:0000000000000000 rgb_matrix_update_pwm_buffers
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:476    .text.rgb_matrix_update_pwm_buffers:0000000000000008 $d
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:481    .text.rgb_matrix_set_color:0000000000000000 $t
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:488    .text.rgb_matrix_set_color:0000000000000000 rgb_matrix_set_color
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:517    .text.rgb_matrix_set_color:0000000000000010 $d
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:522    .text.effect_runner_dx_dy_dist:0000000000000000 $t
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:529    .text.effect_runner_dx_dy_dist:0000000000000000 effect_runner_dx_dy_dist
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:722    .text.effect_runner_dx_dy_dist:00000000000000d8 $d
                            *COM*:0000000000000004 g_rgb_timer
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:731    .text.effect_runner_dx_dy:0000000000000000 $t
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:738    .text.effect_runner_dx_dy:0000000000000000 effect_runner_dx_dy
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:915    .text.effect_runner_dx_dy:00000000000000b4 $d
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:924    .text.effect_runner_i:0000000000000000 $t
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:931    .text.effect_runner_i:0000000000000000 effect_runner_i
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:1082   .text.effect_runner_i:000000000000009c $d
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:1091   .text.effect_runner_sin_cos_i:0000000000000000 $t
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:1098   .text.effect_runner_sin_cos_i:0000000000000000 effect_runner_sin_cos_i
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:1294   .text.effect_runner_sin_cos_i:00000000000000bc $d
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:1303   .text.effect_runner_reactive:0000000000000000 $t
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:1310   .text.effect_runner_reactive:0000000000000000 effect_runner_reactive
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:1516   .text.effect_runner_reactive:00000000000000cc $d
                            *COM*:0000000000000029 g_last_hit_tracker
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:1527   .text.effect_runner_reactive_splash:0000000000000000 $t
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:1534   .text.effect_runner_reactive_splash:0000000000000000 effect_runner_reactive_splash
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:1826   .text.effect_runner_reactive_splash:0000000000000120 $d
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:1838   .text.SOLID_COLOR:0000000000000000 $t
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:1845   .text.SOLID_COLOR:0000000000000000 SOLID_COLOR
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:1957   .text.SOLID_COLOR:000000000000007c $d
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:1964   .text.rgb_matrix_set_color_all:0000000000000000 $t
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:1971   .text.rgb_matrix_set_color_all:0000000000000000 rgb_matrix_set_color_all
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:1990   .text.rgb_matrix_set_color_all:0000000000000008 $d
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:1995   .text.process_rgb_matrix:0000000000000000 $t
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:2002   .text.process_rgb_matrix:0000000000000000 process_rgb_matrix
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:2179   .text.process_rgb_matrix:00000000000000bc $d
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:2187   .text.rgb_matrix_test:0000000000000000 $t
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:2194   .text.rgb_matrix_test:0000000000000000 rgb_matrix_test
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:2245   .text.rgb_matrix_test:0000000000000034 $d
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:2250   .text.rgb_matrix_indicators_kb:0000000000000000 $t
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:2257   .text.rgb_matrix_indicators_kb:0000000000000000 rgb_matrix_indicators_kb
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:2257   .text.rgb_matrix_indicators_kb:0000000000000000 rgb_matrix_indicators_kb.localalias.1
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:2272   .text.rgb_matrix_indicators_user:0000000000000000 $t
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:2279   .text.rgb_matrix_indicators_user:0000000000000000 rgb_matrix_indicators_user
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:2290   .text.rgb_matrix_indicators:0000000000000000 $t
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:2297   .text.rgb_matrix_indicators:0000000000000000 rgb_matrix_indicators
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:2321   .text.rgb_matrix_task:0000000000000000 $t
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:2328   .text.rgb_matrix_task:0000000000000000 rgb_matrix_task
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:2422   .text.rgb_matrix_task:0000000000000048 $d
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:2427   .text.rgb_matrix_task:000000000000004c $t
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:2683   .text.rgb_matrix_task:0000000000000118 $d
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:2695   .text.rgb_matrix_init:0000000000000000 $t
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:2702   .text.rgb_matrix_init:0000000000000000 rgb_matrix_init
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:2868   .text.rgb_matrix_init:00000000000000a0 $d
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:2876   .text.rgb_matrix_set_suspend_state:0000000000000000 $t
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:2883   .text.rgb_matrix_set_suspend_state:0000000000000000 rgb_matrix_set_suspend_state
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:2901   .text.rgb_matrix_set_suspend_state:0000000000000008 $d
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:2906   .text.rgb_matrix_get_suspend_state:0000000000000000 $t
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:2913   .text.rgb_matrix_get_suspend_state:0000000000000000 rgb_matrix_get_suspend_state
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:2928   .text.rgb_matrix_get_suspend_state:0000000000000008 $d
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:2933   .text.rgb_matrix_toggle:0000000000000000 $t
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:2940   .text.rgb_matrix_toggle:0000000000000000 rgb_matrix_toggle
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:2964   .text.rgb_matrix_toggle:0000000000000014 $d
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:2970   .text.rgb_matrix_enable_noeeprom:0000000000000000 $t
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:2977   .text.rgb_matrix_enable_noeeprom:0000000000000000 rgb_matrix_enable_noeeprom
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:3006   .text.rgb_matrix_enable_noeeprom:000000000000001c $d
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:3012   .text.rgb_matrix_enable:0000000000000000 $t
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:3019   .text.rgb_matrix_enable:0000000000000000 rgb_matrix_enable
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:3047   .text.rgb_matrix_disable_noeeprom:0000000000000000 $t
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:3054   .text.rgb_matrix_disable_noeeprom:0000000000000000 rgb_matrix_disable_noeeprom
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:3083   .text.rgb_matrix_disable_noeeprom:0000000000000018 $d
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:3089   .text.rgb_matrix_disable:0000000000000000 $t
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:3096   .text.rgb_matrix_disable:0000000000000000 rgb_matrix_disable
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:3124   .text.rgb_matrix_is_enabled:0000000000000000 $t
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:3131   .text.rgb_matrix_is_enabled:0000000000000000 rgb_matrix_is_enabled
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:3148   .text.rgb_matrix_is_enabled:000000000000000c $d
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:3153   .text.rgb_matrix_step:0000000000000000 $t
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:3160   .text.rgb_matrix_step:0000000000000000 rgb_matrix_step
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:3195   .text.rgb_matrix_step:0000000000000024 $d
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:3201   .text.rgb_matrix_step_reverse:0000000000000000 $t
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:3208   .text.rgb_matrix_step_reverse:0000000000000000 rgb_matrix_step_reverse
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:3243   .text.rgb_matrix_step_reverse:0000000000000024 $d
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:3249   .text.rgb_matrix_increase_hue:0000000000000000 $t
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:3256   .text.rgb_matrix_increase_hue:0000000000000000 rgb_matrix_increase_hue
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:3275   .text.rgb_matrix_increase_hue:000000000000000c $d
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:3280   .text.rgb_matrix_decrease_hue:0000000000000000 $t
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:3287   .text.rgb_matrix_decrease_hue:0000000000000000 rgb_matrix_decrease_hue
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:3306   .text.rgb_matrix_decrease_hue:000000000000000c $d
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:3311   .text.rgb_matrix_increase_sat:0000000000000000 $t
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:3318   .text.rgb_matrix_increase_sat:0000000000000000 rgb_matrix_increase_sat
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:3358   .text.rgb_matrix_increase_sat:0000000000000014 $d
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:3363   .text.rgb_matrix_decrease_sat:0000000000000000 $t
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:3370   .text.rgb_matrix_decrease_sat:0000000000000000 rgb_matrix_decrease_sat
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:3407   .text.rgb_matrix_decrease_sat:0000000000000010 $d
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:3412   .text.rgb_matrix_increase_val:0000000000000000 $t
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:3419   .text.rgb_matrix_increase_val:0000000000000000 rgb_matrix_increase_val
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:3460   .text.rgb_matrix_increase_val:0000000000000014 $d
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:3465   .text.rgb_matrix_decrease_val:0000000000000000 $t
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:3472   .text.rgb_matrix_decrease_val:0000000000000000 rgb_matrix_decrease_val
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:3509   .text.rgb_matrix_decrease_val:0000000000000010 $d
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:3514   .text.rgb_matrix_increase_speed:0000000000000000 $t
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:3521   .text.rgb_matrix_increase_speed:0000000000000000 rgb_matrix_increase_speed
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:3561   .text.rgb_matrix_increase_speed:0000000000000014 $d
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:3566   .text.rgb_matrix_decrease_speed:0000000000000000 $t
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:3573   .text.rgb_matrix_decrease_speed:0000000000000000 rgb_matrix_decrease_speed
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:3610   .text.rgb_matrix_decrease_speed:0000000000000010 $d
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:3615   .text.rgb_matrix_get_speed:0000000000000000 $t
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:3622   .text.rgb_matrix_get_speed:0000000000000000 rgb_matrix_get_speed
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:3637   .text.rgb_matrix_get_speed:0000000000000008 $d
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:3642   .text.rgb_matrix_get_flags:0000000000000000 $t
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:3649   .text.rgb_matrix_get_flags:0000000000000000 rgb_matrix_get_flags
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:3664   .text.rgb_matrix_get_flags:0000000000000008 $d
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:3669   .text.rgb_matrix_set_flags:0000000000000000 $t
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:3676   .text.rgb_matrix_set_flags:0000000000000000 rgb_matrix_set_flags
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:3693   .text.rgb_matrix_set_flags:0000000000000008 $d
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:3698   .text.rgb_matrix_mode:0000000000000000 $t
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:3705   .text.rgb_matrix_mode:0000000000000000 rgb_matrix_mode
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:3731   .text.rgb_matrix_mode:0000000000000014 $d
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:3737   .text.rgb_matrix_mode_noeeprom:0000000000000000 $t
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:3744   .text.rgb_matrix_mode_noeeprom:0000000000000000 rgb_matrix_mode_noeeprom
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:3763   .text.rgb_matrix_mode_noeeprom:000000000000000c $d
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:3768   .text.rgb_matrix_get_mode:0000000000000000 $t
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:3775   .text.rgb_matrix_get_mode:0000000000000000 rgb_matrix_get_mode
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:3792   .text.rgb_matrix_get_mode:0000000000000008 $d
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:3797   .text.rgb_matrix_sethsv:0000000000000000 $t
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:3804   .text.rgb_matrix_sethsv:0000000000000000 rgb_matrix_sethsv
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:3839   .text.rgb_matrix_sethsv:000000000000000c $d
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:3844   .text.rgb_matrix_sethsv_noeeprom:0000000000000000 $t
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:3851   .text.rgb_matrix_sethsv_noeeprom:0000000000000000 rgb_matrix_sethsv_noeeprom
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:3875   .text.rgb_matrix_sethsv_noeeprom:000000000000000c $d
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:3880   .text.rgb_matrix_get_hsv:0000000000000000 $t
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:3887   .text.rgb_matrix_get_hsv:0000000000000000 rgb_matrix_get_hsv
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:3918   .text.rgb_matrix_get_hsv:0000000000000028 $d
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:3923   .text.rgb_matrix_get_hue:0000000000000000 $t
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:3930   .text.rgb_matrix_get_hue:0000000000000000 rgb_matrix_get_hue
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:3945   .text.rgb_matrix_get_hue:0000000000000008 $d
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:3950   .text.rgb_matrix_get_sat:0000000000000000 $t
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:3957   .text.rgb_matrix_get_sat:0000000000000000 rgb_matrix_get_sat
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:3972   .text.rgb_matrix_get_sat:0000000000000008 $d
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:3977   .text.rgb_matrix_get_val:0000000000000000 $t
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:3984   .text.rgb_matrix_get_val:0000000000000000 rgb_matrix_get_val
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:3999   .text.rgb_matrix_get_val:0000000000000008 $d
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:4064   .bss:0000000000000030 g_suspend_state
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:4027   .rodata:000000000000000b k_rgb_matrix_center
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:4012   .rodata:0000000000000000 b_m16_interleave
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:4034   .data:0000000000000000 rgb_task_state
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:4038   .data:0000000000000001 rgb_effect_params
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:4041   .data:0000000000000003 $d
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:4044   .data:0000000000000004 rgb_last_effect
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:4048   .data:0000000000000005 rgb_last_enable
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:4051   .bss:0000000000000000 $d
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:4055   .bss:0000000000000000 last_hit_buffer
/var/folders/z4/wxlp73js78g02fcv9dbq6g8h0000gn/T//cc1Wz2AX.s:4060   .bss:000000000000002c rgb_timer_buffer

UNDEFINED SYMBOLS
eeprom_read_block
eeprom_update_block
g_led_config
rgb_matrix_driver
hsv_to_rgb
memcpy
timer_elapsed32
timer_read32
eeconfig_is_enabled
eeconfig_init
